^reuse__ o 0 0 D( $_rule $_enable $_fail ) ^if 00C( $_rule and $_enable and $_fail ) 00J{ ^reuse ( $_rule $_enable $_fail ) } 01E else 00r( $_rule and $_enable ) 00C{ ^reuse ( $_rule $_enable ) } 00J else ( 1 ) 00t { ^reuse ( $_rule ) } 004 `
^retry__ o 0 0 B( $_item ) ^retry ( $_item ) `
^refine__ o 0 0 C( $_rule $_fail ) ^if 00p( $_rule and $_fail ) 00B{ ^refine ( $_rule $_fail ) } 01d else 00e( $_rule ) 00u{ ^refine ( $_rule ) } 00D else ( 1 ) 00n { ^refine ( ) } 004 `
^gambit__ o 0 0 B( $_topic ) ^gambit ( $_topic ) `
^endiftest o 0 0 A( ) ^if 00n( $$ut_inprogress ) 00p{ ^end ( RULE ) } 004 `
^getlocationpatternarray o 0 0 A( $_array $_result ) $_array = ^' [ "_~number \^length(\_0)==5 \_0>0", "_(~city , [ ~state ~state_abbreviations ] , ~country)", "_([ ~state ~state_abbreviations ] , ~country)", "_(~city , ~country)", "_(~city , [ ~state ~state_abbreviations ])", "_(\^capitalName() {~addr_streetsuffix} {,} {\^capitalName()} *1 {,} [ ~state ~state_abbreviations ~country ] {_~number \^length(\_1)==5 \_1>0})", "_(\^capitalName() , [ ~state ~state_abbreviations ~country ])", "_~city", "_~state", "_~country", "~settleType of \^capitalName()", "\^capitalName() ~settleType", "\^capitalName() \_0!=city "]' $_result = ^jsonparse ( $_array ) ^return ( $_result ) `
^getcompanypatternarray o 0 0 A( $_array $_result ) $_array = ^' [ "(~employment [of at for] {the} _(\^capitalName())", "(~employment [of at for] {the} _(\_*~3) [~terminus  > ])", "(company _(\^capitalName())", "(_(~company {,} {~companyType}) \_0!=company )", "(_(\^capitalName() {,} ~companyType))"]' $_result = ^jsonparse ( $_array ) ^return ( $_result ) `
^getdatematchpattern1 o 0 0 A( ) ^return ( "_(~tp_inforat _~yearnumber)" ) `
^getdatematchpattern2 o 0 0 A( ) ^return ( "_(~tp_inforat _~month_names)" ) `
^getdatematchpattern3 o 0 0 A( ) ^return ( "_({~tp_inforat} _~month_names {,} {~tp_inforat} _~yearnumber) " ) `
^getdatematchpattern4 o 0 0 A( ) ^return ( "_({~tp_inforat} _~yearnumber {,} {~tp_inforat} _~month_names) " ) `
^getdatematchpattern5 o 0 0 A( ) ^return ( "_~time_duration_start _*" ) `
^getdatematchpattern6 o 0 0 A( ) ^return ( "_~time_duration_end _*" ) `
^getdatematchpattern7 o 0 0 A( ) ^return ( "_(~tp_inforat ~lastpast _{~number}  _~dateunits)" ) `
^getdatematchpattern8 o 0 0 A( ) ^return ( "_(~tp_inforat ~nextcoming _{~number}  _~dateunits)" ) `
^getdatematchpattern9 o 0 0 A( ) ^return ( "_(~tp_inforat ~thiscurrent _~dateunits)" ) `
^getdatematchpattern10 o 0 0 A( ) ^return ( "_~tp_inforat _~tp_count _~dateunits _~time_forward_words _~timereferences " ) `
^getdatematchpattern11 o 0 0 A( ) ^return ( "_~tp_inforat _~tp_count _~dateunits _~time_backward_words _~timereferences " ) `
^getdatematchpattern12 o 0 0 A( ) ^return ( "_~time_duration_start _* _~time_duration_end _* " ) `
^fieldafter p 0 0 A( ) _( ~afterwords * ~aftername ) `
^personfullname p 0 0 A( ) _( { ~propername } { ~propername } ~personname ) `
^secondbeforefirst p 0 0 A( ) _( [ ( before { that } ) first beforehand prior_to_that ] ) `
^secondafterfirst p 0 0 A( ) _( [ later then second 'following_that ] ) `
^validalphamenuoption p 0 0 B( ^alphamatch ) ( ^eval ( ^0 = ^original ( ^0 ) ^0 = ^pos ( lowercase ^0 ) ) ^query ( exact_vo ? displaylabel ^0 1 ) ) `
^capitalname p 0 0 A( ) _( ~capitalname { ~capitalname } { ~capitalname } ) `
^iamcapitalname p 0 0 A( ) _( I am ^capitalname ( ) ) `
^companypattern1 p 0 0 A( ) ( < _( *1 { , } ~companytype ) > ) `
^companypattern2 p 0 0 A( ) ( < _( *2 { , } ~companytype ) > ) `
^companypattern3 p 0 0 A( ) ( < _*1 > ) `
^companypattern4 p 0 0 A( ) ( < _( [ ~noun_proper_singular ~noun_proper_plural ] *1 ) > ) `
^companypattern5 p 0 0 A( ) ( < _( *1 [ ~noun_proper_singular ~noun_proper_plural ] ) > ) `
^addresspattern1 p 0 0 A( ) ( { address } _* _~number { , } _* { [ district dist ] } _* _~number _*1 ) `
^addresspattern2 p 0 0 A( ) ( { address } _* { , } _~number _* { , } _~city { , } _~state_abbreviations _~number { - } _{ ~number } ) `
^personpattern1 p 0 0 A( ) ( ^capitalname ( ) @_0- { . } _~personsalutation ) `
^personpattern2 p 0 0 A( ) ( ^capitalname ( ) { , } { the } _~occupation_generic ) `
^personpattern3 p 0 0 A( ) ( for ^capitalname ( ) who ) `
^personpattern4 p 0 0 A( ) ( [ called named ] _*1 ) `
^personpattern5 p 0 0 A( ) ( name be _*1 ) `
^personpattern6 p 0 0 A( ) ( _\'s @_0- _*~3 [ be ~terminus ] ) `
^range_control_relativepattern p 0 0 A( ) ( _( * ~number { ~units_range } ) * _( [ ~increment ~decrement ] { by } ~number { ~units_range } ) ) `
^range_control_relative_reversepattern p 0 0 A( ) ( _( * { ~units_range } ~number ) * _( [ ~increment ~decrement ] { by } ~number { ~units_range } ) ) `
^range_control_relative_operationpattern p 0 0 A( ) ( _( [ ~increment ~decrement ] { by } ~number { ~units_range } ) * _( ~number { ~units_range } ) ) `
^range_control_relative_operation_reversepattern p 0 0 A( ) ( _( [ ~increment ~decrement ] { by } ~number { ~units_range } ) * _( { ~units_range } ~number ) ) `
^suffixedpattern p 0 0 A( ) ( ( !( ~increment ~decrement ) * _~number _{ ~units_range } ) ) `
^prefixedpattern p 0 0 A( ) ( ( !( ~increment ~decrement ) _{ ~units_range } _~number ) ) `
^relativitypattern p 0 0 A( ) ( _[ ~increment ~decrement ] { by } _~number _{ ~units_range } ) `
^datepattern1 p 0 0 A( ) ( ~time_duration_start _* ~time_duration_end _*1 ) `
^datepattern2 p 0 0 A( ) ( _[ ~a ~number ] _~dateunits !( [ ~time_relative after hence later post earlier ] ) ) `
^datepattern3 p 0 0 A( ) ( ~datefrequency { ( _~dayname ) } ) `
^datepattern4 p 0 0 A( ) ( ~time_frequency_adjectives _~dayname ) `
^datepattern5 p 0 0 A( ) ( @_0+ * _~dayname ) `
^datepattern6 p 0 0 A( ) ( every _~place_number _~dayname ) `
^datepattern7 p 0 0 A( ) ( _~dayname ~time_frequency_adjectives week ) `
^datepattern8 p 0 0 A( ) ( ~time_frequency_adjectives _~dateunits { on _~dayname } ) `
^datepattern9 p 0 0 A( ) ( ~time_alternate_adjectives { ( week on ) } _~dayname ) `
^datepattern10 p 0 0 A( ) ( _~dayname ~time_alternate_adjectives week ) `
^datepattern11 p 0 0 A( ) ( every _~number =4_0>0 _~dateunits ) `
^datepattern12 p 0 0 A( ) ( ~time_alternate_adjectives _~dateunits ) `
^datepattern13 p 0 0 A( ) ( ~time_frequency_adjectives _[ weekday weekend ] ) `
^datepattern14 p 0 0 A( ) ( ~time_alternate_adjectives _~weekend ) `
^absoluteperiodpattern p 0 0 A( ) ( ~time_duration_start _* ~time_duration_end _*1 ) `
^daterangebackwardpattern p 0 0 A( ) ( last _{ ~number } _[ week year month ] ) `
^relativeperiodforwardpattern p 0 0 A( ) ( for _[ ~a ~number ] _[ day week ] _~time_forward_words _~timereferences ) `
^relativeperiodbackwardpattern p 0 0 A( ) ( for _[ ~a ~number ] _[ day week ] _~time_backward_words _~timereferences ) `
^yearpattern1 p 0 0 A( ) ( [ last next ] year ) `
^yearpattern2 p 0 0 A( ) ( [ last next ] year { at by } [ this_same this same ] time ) `
^yearpattern3 p 0 0 A( ) ( [ this_same this same ] time [ last next ] year ) `
^yearpattern4 p 0 0 A( ) ( this year ) `
^yearpattern5 p 0 0 A( ) ( last year ) `
^yearpattern6 p 0 0 A( ) ( next year ) `
^yearpattern7 p 0 0 A( ) ( [ next last ] week ) `
^yearpattern8 p 0 0 A( ) ( [ this_same this same ] time [ last next ] [ month week ] ) `
^yearpattern9 p 0 0 A( ) ( [ last next ] [ month week ] { at } [ this_same this same ] time ) `
^yearpattern10 p 0 0 A( ) ( !( [ every each alternate ] ) [ ~a ~positiveinteger ] ~year [ ~time_forward_words ] ) `
^yearpattern11 p 0 0 A( ) ( _[ ~a ~positiveinteger ] _~year _~time_forward_words _{ ~timereferences } ) `
^yearpattern12 p 0 0 A( ) ( _[ ~a ~positiveinteger ] _~year _~time_backward_words _{ ~timereferences } ) `
^timepattern1 p 0 0 A( ) ( _* ~time_duration_start _* ~time_duration_end _*1 ) `
^timepattern2 p 0 0 A( ) ( in [ an ~number ] { ~number } ~time_clock_units ) `
^timepattern3 p 0 0 A( ) ( _~time_relative _~actual_time _{ ~time_day_units } ) `
^timepattern4 p 0 0 A( ) ( _~time_relative _~number _{ ~time_day_units } ) `
^timepattern5 p 0 0 A( ) ( _~time_relative ~time_day_units ) `
^timepattern6 p 0 0 A( ) ( ~time_relative ~time_day_units ) `
^timepattern7 p 0 0 A( ) ( _~number ~time_relative _~number ) `
^timepattern8 p 0 0 A( ) ( in [ an ~number ] { ~number } ~time_clock_units ) `
^timepattern9 p 0 0 A( ) ( ~time_clock_units ~time_relative ) `
^timepattern10 p 0 0 A( ) ( _~time_day_parts ) `
^timepattern11 p 0 0 A( ) ( _~a _~hour ) `
^timepattern12 p 0 0 A( ) ( _~thissame _~time ) `
^timepattern13 p 0 0 A( ) ( _~time_day_parts ) `
^timepattern14 p 0 0 A( ) ( _~positiveinteger [ o O ] _~positiveinteger _~time_day_units =4_0<=24 ) `
^timepattern15 p 0 0 A( ) ( _~time_portion _{ ~time_absolute_relative } _~positiveinteger _~time_day_units =4_2<=12 ) `
^timepattern16 p 0 0 A( ) ( _~positiveinteger { minute } _~time_absolute_relative _~positiveinteger _~time_day_units =4_0<=12 ) `
^timepattern17 p 0 0 A( ) ( _~positiveinteger _{ ~positiveinteger } _{ ~positiveinteger } _~time_day_units =4_0<=12 ! =4_0?~placenumber ) `
^timepattern18 p 0 0 A( ) ( _~positiveinteger _{ ~positiveinteger } _{ ~positiveinteger } { at in } { the } _~time_day_units =4_0<=12 ! =4_0?~placenumber ) `
^timepattern19 p 0 0 A( ) ( _~time_day_units { at in } _~positiveinteger _{ ~positiveinteger } _{ ~positiveinteger } =4_1<=12 ! =4_1?~placenumber ) `
^timepattern20 p 0 0 A( ) ( _~positiveinteger _~positiveinteger _{ ~positiveinteger } _~time_clock_units ) `
^timepattern21 p 0 0 A( ) ( _~actual_time _{ ~time_day_units } ) `
^timepattern22 p 0 0 A( ) ( _~time_frequency _~time_clock_units _{ ~time_clock_units } _{ ~time_clock_units } ) `
^timepattern23 p 0 0 A( ) ( _~time_frequency _[ noon afternoon midnight ] ) `
^timepattern24 p 0 0 A( ) ( [ each every ] ~number ~time_clock_units { ( ~number ~time_clock_units ) } { ( ~number ~time_clock_units ) } _*1 ) `
^timepattern25 p 0 0 A( ) ( _* ~time_frequency _*1 ) `
^timepattern27 p 0 0 A( ) ( [ ~a ~number ] ~dateunits ) `
^currencypattern1 p 0 0 A( ) ( _~number [ _~currency _~currency_code ] ) `
^currencypattern2 p 0 0 A( ) ( _~number _~nationalities _~currency ^join ( '_1 _ _2 )?~currency ) `
^currencypattern3 p 0 0 A( ) ( _~currency_code _~number ) `
^unitpattern1 p 0 0 A( ) ( _~number _~measurement _~number _~measurement ) `
^unitpattern2 p 0 0 A( ) ( _~number _~measurement _~number ) `
^unitpattern3 p 0 0 A( ) ( _~number { degree } _~measurement ! =4_1=degree ) `
^unitpattern4 p 0 0 A( ) ( _~number degree ) `
^unitpattern5 p 0 0 A( ) ( _~number _~time_unit ) `
^unitpattern6 p 0 0 A( ) ( _~number quarters ) `
^time_unitpattern p 0 0 A( ) ( { ~time_frequency_adjectives } _~number _[ hour minute ] ) `
^no_numberpattern p 0 0 A( ) ( !~number _~time_frequency _[ hour minute ] ) `
^actual_timepattern p 0 0 A( ) ( { at for } _~actual_time _{ ~time_day_units } ) `
^time_quantitypattern p 0 0 A( ) ( { at for } _~number _{ ~time_day_units } ) `
^changefrequencypattern p 0 0 A( ) ( ~number ~hoursminutes ) `
^number_hourpattern p 0 0 A( ) ( _~number hour ) `
^number_minutepattern p 0 0 A( ) ( _~number minute ) `
^ftimepattern p 0 0 A( ) ( _~number minute ~afterpost ) `
^numbernumberpattern p 0 0 A( ) ( ![ hour minute second ] _~number _~number ) `
^change_mindpattern p 0 0 A( ) ( change mind ) `
^what_be_filterpattern p 0 0 A( ) ( << what be filter >> ) `
^go_createpattern p 0 0 A( ) ( !not [ ~yesanswer go create proceed 'do ~emobeg ] ) `
^stop_yespattern p 0 0 A( ) ( [ ~stop_action ~yesanswer ] ) `
^show_field p 0 0 A( ) ( << [ show list ] field >> ) `
^notamendpattern p 0 0 A( ) ( << not ~amend >> ) `
^listalltaskspattern p 0 0 A( ) [ ( ~listtaskkeywords << _{ [ action dialog ] } _{ [ alert notification ] } _{ [ FAQ question answer knowledge ] } _{ ~listallkeywords } _{ ~k-bot } >> ) ( [ any some ] << _{ [ action dialog ] } _{ [ alert notification ] } _{ [ FAQ question answer knowledge ] } _{ ~taskwords } _{ ~k-bot } >> [ _0 _1 _2 _3 ] ) ] `
^generic_botpattern1 p 0 0 A( ) ( not * use ) `
^generic_botpattern2 p 0 0 A( ) ( < [ ~stop_action ~noanswer ] > ) `
^generic_botpattern3 p 0 0 A( ) ( ~what * [ ~tobe have chose ] ) `
^nonestoppattern p 0 0 A( ) ( < [ ( _~noanswer !^query ( exact_vo ? displaylabel '_0 1 ) ) ~stop_action ] > ) `
^use_insteadpattern p 0 0 A( ) ( use _* { instead } ) `
^generic_managepattern1 p 0 0 A( ) ( refresh * [ alert notification ] ) `
^generic_managepattern2 p 0 0 A( ) ( clear [ chat history log ] ) `
^generic_managepattern3 p 0 0 A( ) ( !account !alert !task ~deletebotwords { I } [ bot ~k-bot ] ) `
^modify_accountpattern1 p 0 0 A( ) ( [ modify edit ] * account ) `
^modify_accountpattern2 p 0 0 A( ) ( !alert !task _[ rename delete add ] * { account } ) `
^act_on_accountpattern p 0 0 A( ) ( !alert !task _[ rename delete add ] * account ) `
^modify_alertpattern p 0 0 A( ) ( _[ modify edit delete remove ] * [ notification alert ] ) `
^showtaskoptionspattern p 0 0 A( ) ( [ notification notify alert 0 ] ) ! =3#!F please do cancel it `
^performactionpattern p 0 0 A( ) ( !not !~stop_action [ ~yesanswer go create proceed 'do ~emobeg ] ) `
^what_fieldspattern p 0 0 A( ) ( << [ what_are list enumerate name ] the_fields >> ) `
^askexistingfieldvaluepattern p 0 0 A( ) ( [ who what ] * be * the _*1 > ) `
^name_bepattern p 0 0 A( ) ( [ I name ] be ) `
^keywordlesspattern1 p 0 0 A( ) ( << what is [ current this ] bot >> ) ! =3#!K what are the fields of create lead `
^taskfieldspattern1 p 0 0 A( ) ( << what fields [ do be ] >> ) `
^taskfieldspattern2 p 0 0 A( ) ( < what * [ can 'do ] * [ ~you ~k-bot ] * [ perform 'do ] ) `
^koranamepattern p 0 0 A( ) ( << what be ~you [ call name ] >> ) `
^keywordlesspattern2 p 0 0 A( ) ( << who be ~you >> ) `
^tellaboutyoupattern p 0 0 A( ) ( << tell about yourself >> ) `
^keywordlesspattern3 p 0 0 A( ) ( << how [ do can ] ~stop_action >> ) `
^whatcanyoudopattern p 0 0 A( ) ( what [ do can ] [ 'I ~you ] do *~3 > ) `
^keywordlesspattern5 p 0 0 A( ) ( what 'bot [ current this ( are ~you ) ] ) `
^keywordlesspattern6 p 0 0 A( ) ( << create one >> ) `
^keywordlesspattern7 p 0 0 A( ) ( << [ help instruction manual guide guidance assist ] >> ) `
^keywordlesspattern8 p 0 0 A( ) ( << what can [ 'I we ~you ] 'do >> ) `
^whatalertpattern p 0 0 A( ) ( what be { ~determinerlist } alert > ) `
^whattaskpattern p 0 0 A( ) ( what be { ~determinerlist } [ action task ] > ) `
^keywordlesspattern11 p 0 0 A( ) ( what be { ~determinerlist } bot > ) `
^keywordlesspattern12 p 0 0 A( ) ( what be my name ) `
^keywordlesspattern13 p 0 0 A( ) ( < what be my [ alert action task ] > ) `
^keywordlesspattern14 p 0 0 A( ) ( << suggest bot related to >> ) `
^keywordlesspattern15 p 0 0 A( ) ( << [ list enumerate what tell ] bots category >> ) `
^keywordlesspattern16 p 0 0 A( ) ( << ~k-bot [ change switch ] { over } to >> ) `
^keywordlesspattern17 p 0 0 A( ) ( < ~stop_action =8~k-bot? ) `
^is_installedpattern p 0 0 A( ) ( ![ might could should ] << do I ~own _~k-bot [ bot installed ] >> ) `
^ownbotspattern p 0 0 A( ) ( << [ what list get ] { all be } [ I install ] bots >> ) `
^keywordlesspattern18 p 0 0 A( ) ( << [ which what list get ] [ all available ] bots >> ) `
^botslistpattern p 0 0 A( ) ( ![ task alert ] << [ ~you could can_i might should ] [ list enumerate what tell ] [ choices bots ] >> ) `
^keywordlesspattern19 p 0 0 A( ) ( << [ which what ] bots ~you [ know aware ] >> ) `
^keywordlesspattern20 p 0 0 A( ) ( << [ what list get ] bots [ install setup set_up ] >> ) `
^utilitypattern1 p 0 0 A( ) ( << [ start begin create initiate ] [ action task ] >> ) `
^utilitypattern2 p 0 0 A( ) ( << [ start begin create initiate ] alert >> ) `
^utilitypattern3 p 0 0 A( ) ( < [ nothing ~stop_action that_is_it ] > ) `
^badactionpattern p 0 0 A( ) ( [ ( _~noanswer !^query ( exact_vo ? displaylabel '_0 1 ) ) wrong incorrect go_back << not [ intend want right correct ] >> ] ) `
^cleanintrowords p 0 0 A( ) ( @_12- _~introcleanconcepts ) `
^cleaninterwords p 0 0 A( ) ( @_10 _( { a } new ) @_11 ) `
^cleaninterme p 0 0 A( ) ( @_10 * _me * @_11 ) `
^utilitypattern7 p 0 0 A( ) ( _( [ can will ] ~you ~help I to ) ) `
^utilitypattern8 p 0 0 A( ) ( _( ~help { I } ~botprepositions ) *1 ) `
^utilitypattern9 p 0 0 A( ) ( _( I ~politeverbs to ) ~verb ) `
^acknowledgepattern1 p 0 0 A( ) ( [ ~emothanks thanks ( thank ~you ) ] ) `
^acknowledgepattern2 p 0 0 A( ) ( ~positiveackwords ) `
^acknowledgepattern3 p 0 0 A( ) ( << [ it a ] [ helpful useful handy ] >> ) `
^acknowledgepattern4 p 0 0 A( ) ( [ ~yes got_it I_understand ] !=d%tokenflags&536870912 ) `
^acknowledgepattern5 p 0 0 A( ) ( ~emohappy ) `
^acknowledgepattern6 p 0 0 A( ) ( ~ibedone ) `
^acknowledgepattern7 p 0 0 A( ) ( ~ibedone ) `
^acknowledgepattern8 p 0 0 A( ) ( << [ it a ] { ~infowords } [ helpful useful handy help ] >> ) `
^settonepatterns o 0 0 A( ) $toneconstants.tonepatterns = ^jsonparse ( permanent ^' [ { pattern: "( @_11 *  _( ~negifier {~aux_verb} be {the}   )     * @_13 )", value: -2 }, { pattern: "( @_11 *  _( ~negifier *~1 @_12 )       * @_13 )", value: -2 }, { pattern: "( @_11 *  _( ~intensifier *~1 @_12 )    * @_13 )", value:  3 }, { pattern: "( @_11 *  _( nor {~aux_verb be} @_12 )     * @_13 )", value:  0 }, { pattern: "( @_11 *  _( be [~pronoun ~determiner] @_12 )   * @_13 )", value:  0 }, { pattern: "( @_11 *  _( be {~determiner} ~noun @_12 )    * @_13 )", value:  0 }, { pattern: "( @_11 *  _( [~aux_verb be] [not never] *~1 @_12 ) * @_13 )", value: -2 }, { pattern: "( @_11 *  _( ~reducer *~1 @_12 )      * @_13 )", value:  1 }, { pattern: "( @_11 *  _( ~negifier [so that as] @_12 )    * @_13 )", value: -1 }, { pattern: "( @_11 *  _( ~averting be @_12 )      * @_13 )", value: -2 }, { pattern: "( @_11 *  _( ~hypothetical have been @_12 )   * @_13 )", value:  1 }, { pattern: "( @_11 *  _( @_12 *~1 ~averting )      * @_13 )", value: -2 }, { pattern: "( @_11 *  _( @_12 *~1 ~increasing )     * @_13 )", value:  3 }, { pattern: "( @_11 *  _( @_12 *~1 ~decreasing )     * @_13 )", value:  1 }, { pattern: "( @_11 *  _( @_12 ~negifier )       * @_13 )", value: -2 }, { pattern: "( @_11 *  _( @_12 ~reducer )       * @_13 )", value:  1 }, { pattern: "( @_11 *  _( @_12 *~3 ~butwords )      * @_13 )", value:  1 }, { pattern: "( @_11 *  _( not @_12 at all )       * @_13 )", value: -3 } ] ' ) `
^favoritetable o 0 8 E( ^topic ^modifier ^main ^what $_x $_mod $_main $_lastfact ) $_x = ^join ( ^1 _ ^2 ) $_mod = ^1 $_main = ^2 ^if 00w( ^properties ( $_x ) != 0 ) 00y{ $_main = $_x $_mod = _ } 004 $_lastfact = ^createfact ( ( $_mod ^0 ^3 ) favorite $_main ) ^addproperty ( $_mod PATTERN_WORD ) ^addproperty ( $_main PATTERN_WORD ) `
^sethostvariables o 0 0 A( ) $apphost = app.kore.com $qa1botshost = qa1-bots.kore.com $koreappshost = koreapps.com $devbotshost = devbots.kore.net $bots1host = bots1.kore.com $botshost = bots.kore.com $workflowbotshost = workflows-bots.kore.com $disneybotshost = disney-bots.kore.com $disneyapphost = disney-app.kore.com $pilotbotshost = pilot-bots.kore.com $qabotshost = qabots.kore.com $botsinthost = bots-int.kore.net $appinthost = app-int.kore.net $loadbotshost = loadbots.kore.com $rtchost = rtc.kore.net $onprem1host = 192.168.10.55 $localhost = localhost `
^setservervariables o 0 0 A( ) $appserver = ^"$apphost/api/1.1" $qa1botsserver = ^"$qa1botshost/api/1.1" $koreappsserver = ^"$koreappshost/api/1.1" $devbotsserver = ^"$devbotshost/api/1.1" $bots1server = ^"$bots1host/api/1.1" $botsserver = ^"$botshost/api/1.1" $workflowbotsserver = ^"$workflowbotshost/api/1.1" $disneybotsserver = ^"$disneybotshost/api/1.1" $disneyappserver = ^"$disneyapphost/api/1.1" $pilotbotsserver = ^"$pilotbotshost/api/1.1" $qabotsserver = ^"$qabotshost/api/1.1" $botsintserver = ^"$botsinthost/api/1.1" $appintserver = ^"$appinthost/api/1.1" $loadbotsserver = ^"$loadbotshost/api/1.1" $rtcserver = ^"$rtchost/api/1.1" $onprem1server = ^"$onPrem1host/api/1.1" $localserver = ^"$localhost/api/1.1" `
^defaultvaluesforenvcredentials o 0 0 A( ) $devbotsuserid = ^"" $devbotsauthorization = ^"" $devbotsdevmodechannelinfo = ^"" $botsuserid = ^"" $botsauthorization = ^"" $botsdevmodechannelinfo = ^"" $workflowbotsuserid = ^"" $workflowbotsauthorization = ^"" $workflowbotsdevmodechannelinfo = ^"" $qa1botsuserid = ^"" $qa1botsauthorization = ^"" $qa1botsdevmodechannelinfo = ^"" $botsintuserid = ^"" $botsintauthorization = ^"" $botsintdevmodechannelinfo = ^"" $pilotbotsuserid = ^"" $pilotbotsauthorization = ^"" $pilotbotsdevmodechannelinfo = ^"" $loadbotsuserid = ^"" $loadbotsauthorization = ^"" $loadbotsdevmodechannelinfo = ^"" $rtcuserid = ^"" $rtcauthorization = ^"" $rtcdevmodechannelinfo = ^"" $onprem1userid = ^"" $onprem1authorization = ^"" $onprem1devmodechannelinfo = ^"" $localuserid = ^"" $localauthorization = ^"" $localdevmodechannelinfo = ^"" $bots1userid = ^"" $bots1authorization = ^"" $disneybotsuserid = ^"" $disneybotsauthorization = ^"" $disneyappuserid = ^"" $disneyappauthorization = ^"" $appintuserid = ^"" $appintauthorization = ^"" $qa1devmodechannelinfo = ^"" $qabotsdevmodechannelinfo = ^"" `
^ismoreinput o 0 0 A( ) ^if 00f( ! %more ) 00q{ ^fail ( CALL ) } 004 `
^generate_gleaninfo o 0 0 B( $_mode $_gleaninfo ) $$generateid += 1 $_gleaninfo = ^jsoncreate ( $_mode object ) $_gleaninfo.id = ^join ( %input - $$generateid ) $_gleaninfo.sentences = ^jsoncreate ( $_mode array ) $_gleaninfo.sentenceterminator = ^jsoncreate ( $_mode array ) $_gleaninfo.toplevelread = ^jsoncreate ( $_mode object ) $_gleaninfo.inputwords = ^jsoncreate ( $_mode object ) $_gleaninfo.maybeused = ^jsoncreate ( $_mode object ) $_gleaninfo.usedup = ^jsoncreate ( $_mode object ) $_gleaninfo.fieldread = ^jsoncreate ( $_mode object ) $_gleaninfo.menuread = ^jsoncreate ( $_mode object ) $_gleaninfo.botxref = ^jsoncreate ( $_mode object ) $_gleaninfo.intents = ^jsoncreate ( $_mode array ) $_gleaninfo.unprocessed = 0 ^return ( $_gleaninfo ) `
^dumpcallstack o 0 0 A( $_item $_ignore $_frame $_callee $_topic ) ^callstack ( @0 ) $_item = ^length ( @0 ) - 1 $_ignore = ^last ( @0fact ) ^loop ( -1 ) 03A { $_frame = ^last ( @0fact ) $_callee = $_frame.subject $_topic = $_frame.object ^if 00B( ^extract ( $_topic 0 1 ) == ~ ) 00J{ $_topic = ^join ( \( $_topic \) ) } 00G else ( 1 ) 00q { $_topic = null } 004 ^log ( $_item : $_callee $_topic \n ) $_item -= 1 } `
^openmongo o 0 0 A( ) $$tmp `
^addrecordinmongodb o 0 0 C( ^keyname ^keyvalue $$tmpkeyname $$tmpkeyvalue ) $$tmpkeyname = ^0 $$tmpkeyvalue = ^1 `
^getnextinput o 0 0 A( ) ^next ( INPUT ) ^nofail ( TOPIC ^respond ( ~glean ) ) `
^nextgambit o 0 0 A( ) ^if 00#( ! $$blockuser and ! $$isittask and ! $taskinfo.dialogNode ) 00s{ ^retry ( TOPIC ) } 01c else 00s( $taskinfo.dialogNode ) 00O{ ^reuse ( ~dialogmgr.start_sub_intent ) } 004 `
^getsentenceindexfromposition o 0 0 B( ^location $_remainder $_sentence ) $_remainder = ^0 % 1000000 $_sentence = ^0 - $_remainder $_sentence /= 1000000 ^return ( $_sentence ) `
^getstartindexfromposition o 0 0 B( ^location $_start $_remainder ) $_start = ^0 % 1000000 $_remainder = $_start % 1000 $_start -= $_remainder $_start /= 1000 ^return ( $_start ) `
^getendindexfromposition o 0 0 B( ^location $_end ) $_end = ^0 % 1000 ^return ( $_end ) `
^getwordindexfromposition o 0 0 B( ^location $_remainder ) $_remainder = ^0 % 1000000 ^return ( $_remainder ) `
^getpositionfromsentenceandindex o 0 0 C( ^sentenceindex ^wordindex $_position ) $_position = 1000000 * ^0 $_position += ^1 ^return ( $_position ) `
^getpositionfromsentenceandrange o 0 0 D( ^sentenceindex ^startindex ^endindex $_range $_position ) $_range = ^1 * 1000 $_range += ^2 $_position = 1000000 * ^0 $_position += $_range ^return ( $_position ) `
^iswordwithinrange o 0 0 C( ^wordposition ^range $_wordsentence $_wordstart $_wordend $_rangesentence $_rangestart $_rangeend ) $_wordsentence = ^getsentenceindexfromposition ( ^0 ) $_wordstart = ^getstartindexfromposition ( ^0 ) $_wordend = ^getendindexfromposition ( ^0 ) ^if 00o( $_wordstart == 0 ) 00z{ $_wordstart = $_wordend } 004 $_rangesentence = ^getsentenceindexfromposition ( ^1 ) $_rangestart = ^getstartindexfromposition ( ^1 ) $_rangeend = ^getendindexfromposition ( ^1 ) ^if 00p( $_rangestart == 0 ) 00B{ $_rangestart = $_rangeend } 004 ^if 00F( $_wordsentence == $_rangesentence ) 02y{ ^if 00#( $_wordstart >= $_rangestart and $_wordstart <= $_rangeend ) 01t{ ^if 00Z( $_wordend >= $_rangestart and $_wordend <= $_rangeend ) 00s{ ^return ( true ) } 004 } 004 } 004 ^fail ( CALL ) `
^computecharbitmask o 0 0 C( ^startword ^endword $_mask $_i $_bit ) $_mask = ^"" $_i = 1 $_bit = 0 ^loop ( -1 ) 01Z { ^if 00h( $_i == ^0 ) 00l{ $_bit = 1 } 004 $_mask = ^join ( $_mask $_bit ) $_i += 1 ^if 00g( $_i > ^1 ) 00p{ ^end ( LOOP ) } 004 } ^return ( $_mask ) `
^computeconceptlocationmask o 0 0 B( ^conceptlocation $_start $_end $_mask ) $_start = ^0 >> 8 $_end = ^0 & 255 $_mask = ^computecharbitmask ( $_start $_end ) ^return ( $_mask ) `
^charbitmaskor o 0 0 C( ^mask1 ^mask2 $_mask $_mask1 $_mask2 $_bit1 $_bit2 $_bit ) $_mask = ^"" $_mask1 = ^0 $_mask2 = ^1 ^loop ( -1 ) 05* { $_bit1 = ^nofail ( RULE ^extract ( $_mask1 0 1 ) ) $_mask1 = ^nofail ( RULE ^extract ( $_mask1 1 99999 ) ) $_bit2 = ^nofail ( RULE ^extract ( $_mask2 0 1 ) ) $_mask2 = ^nofail ( RULE ^extract ( $_mask2 1 99999 ) ) ^if 00p( $_bit1 and $_bit2 ) 00z{ $_bit = $_bit1 | $_bit2 } 01U else 00e( $_bit1 ) 00q{ $_bit = $_bit1 } 01b else 00e( $_bit2 ) 00q{ $_bit = $_bit2 } 00F else ( 1 ) 00p { ^end ( LOOP ) } 004 $_mask = ^join ( $_mask $_bit ) } ^return ( $_mask ) `
^countcharbitsset o 0 0 B( ^mask $_count $_offset ) $_count = 0 $_offset = 0 ^loop ( -1 ) 01# { ^if 00z( ^findtext ( ^0 1 $_offset ) ) 00U{ $_count += 1 $_offset = $$findtext_start + 1 } 00F else ( 1 ) 00p { ^end ( LOOP ) } 004 } ^return ( $_count ) `
^restoregleansentence o 0 0 B( $_id $_sentenceid $_result $_sentence $_tmp ) ^if 00q( ! $_id or $_id < 0 ) 00p{ ^end ( CALL ) } 004 $_sentenceid = ^join ( $gleaninfo.id - $_id ) $_result = ^result ( ^restoresentence ( $_sentenceid ) ) ^if 00t( $_result == NOPROBLEM ) 00P{ $currentsentenceid = $_id ^end ( CALL ) } 004 ^if 00Y( ^length ( $gleaninfo.sentences ) <= $_id or $_id < 0 ) 00q{ ^fail ( CALL ) } 004 $_sentence = $gleaninfo.sentences[$_id] ^analyze ( $_sentence ) ^respond ( ~preglean ) $_tmp = ^savesentence ( $_sentenceid ) $currentsentenceid = $_id `
^markvolleyusedrange o 0 0 D( $_sentenceid $_start $_stop $_key ) ^notrace ( ^if 00r( $$testingrejoinders ) 00p{ ^end ( CALL ) } 004 ^if 00m( ! $_sentenceid ) 00s{ $_sentenceid = 0 } 004 ^loop ( -1 ) 02q { ^if 00o( $_start > $_stop ) 00p{ ^end ( LOOP ) } 004 $_key = ^join ( $_sentenceid - $_start ) ^jsonobjectinsert ( TRANSIENT $$volleyglean.usedup $_key 1 ) $_start += 1 } ) `
^markusedrange o 0 0 D( $_sentenceid $_start $_stop $_key ) ^notrace ( ^if 00r( $$testingrejoinders ) 00p{ ^end ( CALL ) } 004 ^if 00m( ! $_sentenceid ) 00s{ $_sentenceid = 0 } 004 ^loop ( -1 ) 01^ { ^if 00o( $_start > $_stop ) 00p{ ^end ( LOOP ) } 004 $_key = ^join ( $_sentenceid - $_start ) $gleaninfo.usedup.$_key = 1 $_start += 1 } ) `
^markusedmatch o 0 0 C( ^sentenceid ^var $_start $_end ) ^notrace ( $_start = ^position ( START ^1 ) $_end = ^position ( END ^1 ) ^if 00x( $_start > 0 and $_end > 0 ) 00L{ ^markusedrange ( ^0 $_start $_end ) } 004 ) `
^markusedposition o 0 0 B( ^positionindex $_sentenceindex $_startindex $_endindex ) ^if 00a( ^0 ) 03Y{ $_sentenceindex = ^getsentenceindexfromposition ( ^0 ) $_startindex = ^getstartindexfromposition ( ^0 ) $_endindex = ^getendindexfromposition ( ^0 ) ^if 00p( $_startindex == 0 ) 00B{ $_startindex = $_endindex } 004 ^markusedrange ( $_sentenceindex $_startindex $_endindex ) } 004 `
^unmarkusedrange o 0 0 D( $_sentenceid $_start $_stop $_key ) ^if 00r( $$testingrejoinders ) 00p{ ^end ( CALL ) } 004 ^if 00m( ! $_sentenceid ) 00s{ $_sentenceid = 0 } 004 ^loop ( -1 ) 01? { ^if 00o( $_start > $_stop ) 00p{ ^end ( LOOP ) } 004 $_key = ^join ( $_sentenceid - $_start ) $gleaninfo.usedup.$_key = null $_start += 1 } `
^unmarkusedposition o 0 0 B( ^positionindex $_sentenceindex $_startindex $_endindex ) ^if 00a( ^0 ) 03~{ $_sentenceindex = ^getsentenceindexfromposition ( ^0 ) $_startindex = ^getstartindexfromposition ( ^0 ) $_endindex = ^getendindexfromposition ( ^0 ) ^if 00p( $_startindex == 0 ) 00B{ $_startindex = $_endindex } 004 ^unmarkusedrange ( $_sentenceindex $_startindex $_endindex ) } 004 `
^markusedmask o 0 0 B( $_mask $_wordindex $_key ) ^if 00r( $$testingrejoinders ) 00p{ ^end ( CALL ) } 004 $$firstwordindex = 500 $$lastwordindex = null @1 = ^burst ( $_mask ) ^if 00r( ^length ( @1 ) == 1 ) 04@{ $$sentenceid = $_mask >> 56 ^loop ( 7 ) 04d { $_wordindex = $_mask & 255 ^if 00n( $_wordindex > 0 ) 03d{ ^if 00C( $_wordindex < $$firstwordindex ) 00G{ $$firstwordindex = $_wordindex } 004 ^if 00p( ! $$lastwordindex ) 00F{ $$lastwordindex = $_wordindex } 004 $_key = ^join ( $$sentenceid - $_wordindex ) $gleaninfo.usedup.$_key = 1 } 004 $_mask >>= 8 } } 046 else ( 1 ) 03# { $$sentenceid = ^first ( @1subject ) ^loop ( -1 ) 035 { $_wordindex = ^first ( @1subject ) $_key = ^join ( $$sentenceid - $_wordindex ) $gleaninfo.usedup.$_key = 1 ^if 00C( $_wordindex < $$firstwordindex ) 00G{ $$firstwordindex = $_wordindex } 004 $$lastwordindex = $_wordindex } } 004 `
^markused o 0 0 C( ^botname ^activity $_activitylastword $_tmp $_mask ) ^if 00a( ^1 ) 01q{ @0 = ^burst ( ^1 " " ) $_activitylastword = ^last ( @0subject ) $_tmp = ^join ( ^0 - ^1 ) } 00C else ( 1 ) 00m { $_tmp = ^0 } 004 $_tmp = ^pos ( lowercase $_tmp ) $_mask = $gleaninfo.maybeused.$_tmp ^if 00e( $_mask ) 00A{ ^markusedmask ( $_mask ) } 004 ^if 00a( ^1 ) 04k{ ^if 00u( $$firstwordindex < 500 ) 01h{ ^nofail ( RULE ^restoregleansentence ( $$sentenceid ) ) ^respond ( ~politeness ) } 004 ^if 00h( $taskinfo ) 02c{ $taskinfo.activitylastwordposition = ^getpositionfromsentenceandindex ( $$sentenceid $$lastwordindex ) $taskinfo.activitylastword = $_activitylastword } 004 } 004 `
^computemarkmask o 0 0 C( ^where ^sentenceid $_start $_end $_count $_mask $_tmp ) $_start = ^position ( start ^0 ) $_end = ^position ( end ^0 ) $_count = 0 ^loop ( -1 ) 01t { $_mask <<= 8 $_mask |= $_start $_start += 1 ^if 00n( $_start > $_end ) 00p{ ^end ( LOOP ) } 004 } $_tmp = ^1 << 56 $_mask += $_tmp ^return ( $_mask ) `
^insertwordmaybe o 0 0 C( $_word $_mask ) ^if 00e( $_word ) 00M{ $gleaninfo.maybeused.$_word = $_mask } 004 `
^markmaybemask o 0 0 D( ^prefix ^label ^mask $_word ) ^if 00a( ^1 ) 00C{ $_word = ^join ( ^0 - ^1 ) } 00D else ( 1 ) 00n { $_word = ^0 } 004 $_word = ^pos ( lowercase $_word ) ^insertwordmaybe ( $_word ^2 ) `
^markwordmaybe o 0 0 D( ^word ^where ^sentenceid $_mask ) $_mask = ^computemarkmask ( ^1 ^2 ) ^insertwordmaybe ( ^0 $_mask ) `
^joinwords o 0 0 C( ^factset ^factfield $_fact $_item $_text ) @0 = ^0 ^loop ( -1 ) 01x { $_fact = ^first ( @0fact ) $_item = ^field ( $_fact ^1 ) $_text = ^join ( AUTOSPACE $_text $_item ) } ^return ( $_text ) `
^replacewordatindex o 0 0 D( ^sentencetext ^wordindex ^replacetext $_wordfact ) @1 = ^burst ( ^0 " " ) ^nofail ( RULE $_wordfact = ^nth ( @1fact ^1 ) ) ^if 00i( $_wordfact ) 01h{ ^revisefact ( $_wordfact "^^2" null null ) ^return ( ^joinwords ( @1 subject ) ) } 00G else ( 1 ) 00q { ^return ( ^0 ) } 004 `
^displayqueryresults o 0 0 C( ^querywhich ^querykeyword ) ^"^1: \n" ^if 00l( ^0 == subject ) 01q{ @0 = ^query ( exact_s ^1 ? ? ) ^loop ( -1 ) 00K { _0 = ^first ( @0all ) ^"^1 _1 _2 ,\n" } } 03v else 00i( ^0 == verb ) 01r{ @0 = ^query ( exact_v ? ^1 ? ) ^loop ( -1 ) 00L { _0 = ^first ( @0all ) ^"_0 ^1 _2 , \n" } } 01U else 00k( ^0 == object ) 01r{ @0 = ^query ( exact_o ? ? ^1 ) ^loop ( -1 ) 00L { _0 = ^first ( @0all ) ^"_0 _1 ^1 , \n" } } 004 `
^writequeryresults o 0 0 D( ^querywhich ^querykeyword ^queryindex ) $$tmpfile = ^"TMP/^1^2.txt" ^log ( FILE $$tmpfile NEW ) $$testtowrite = ^"^1: \n" ^nofail ( RULE ^log ( FILE $$tmpfile $$testtowrite ) ) ^if 00l( ^0 == subject ) 02m{ @0 = ^query ( exact_s ^1 ? ? ) ^loop ( -1 ) 01G { _0 = ^first ( @0all ) $$testtowrite = ^"^1 _1 _2 ,\n" ^nofail ( RULE ^log ( FILE $$tmpfile $$testtowrite ) ) } } 05n else 00i( ^0 == verb ) 02n{ @0 = ^query ( exact_v ? ^1 ? ) ^loop ( -1 ) 01H { _0 = ^first ( @0all ) $$testtowrite = ^"_0 ^1 _2 , \n" ^nofail ( RULE ^log ( FILE $$tmpfile $$testtowrite ) ) } } 02Q else 00k( ^0 == object ) 02n{ @0 = ^query ( exact_o ? ? ^1 ) ^loop ( -1 ) 01H { _0 = ^first ( @0all ) $$testtowrite = ^"_0 _1 ^1 , \n" ^nofail ( RULE ^log ( FILE $$tmpfile $$testtowrite ) ) } } 004 `
^istransientjson o 0 0 B( ^json ) ^if 00o( ^jsonkind ( ^0 ) ) 00={ ^if 00v( ^extract ( ^0 3 4 ) = t ) 00s{ ^return ( true ) } 004 } 004 ^fail ( CALL ) `
^makejsonpermanent o 0 0 B( $_json ) @0 = ^jsongather ( $_json ) ^removeproperty ( @0 FACTTRANSIENT ) `
^makejsontransient o 0 0 B( $_json ) @0 = ^jsongather ( $_json ) ^addproperty ( @0 FACTTRANSIENT ) `
^jsonparent o 0 0 B( ^value ) ^query ( jsonup_o ? ? ^0 ? ? ? ? 16128 ) ^return ( @0 ) `
^jsonparentfromproperty o 0 0 C( ^property ^value ) ^query ( jsonup_vo ? ^0 ^1 ? ? ? ? 16128 ) ^return ( @0 ) `
^jsonparentfrompropertyinarray o 0 0 D( ^array ^property ^value ) ^if 00z( ! ^0 or ^length ( ^0 ) == 0 ) 00s{ ^return ( null ) } 004 ^query ( jsonup_svo ^0 ^1 ^2 ? ? ? ? 16128 ) ^return ( @0 ) `
^jsonpropertiesforobjectsinarray o 0 0 C( ^array ^property ) @0 = null ^if 00a( ^0 ) 00-{ @1 = ^jsongather ( ^0 2 ) @0 = ^query ( set_v ? ^1 ? -1 @1 ) } 004 ^return ( @0 ) `
^jsonvaluesforobjectsinarray o 0 0 C( ^array ^value ) @0 = null ^if 00a( ^0 ) 00-{ @1 = ^jsongather ( ^0 2 ) @0 = ^query ( set_o ? ? ^1 -1 @1 ) } 004 ^return ( @0 ) `
^jsonpropertyvaluesforobjectsinarray o 0 0 E( $_array $_property $_value $_depth ) @0 = null ^if 00f( $_array ) 01%{ ^if 00h( ! $_depth ) 00n{ $_depth = 2 } 004 @1 = ^jsongather ( $_array $_depth ) @0 = ^query ( set_vo ? $_property $_value -1 @1 ) } 004 ^return ( @0 ) `
^jsonpropertiesforobjectsinset o 0 0 C( ^factset ^property $_obj ) @0 = ^0 @1 = null ^loop ( -1 ) 00+ { $_obj = ^first ( @0object ) @1 += ^query ( exact_sv $_obj ^1 ? ) } ^return ( @1 ) `
^deletejsonobjectsinarray o 0 0 C( $_array $_value ) @0 = ^jsonvaluesforobjectsinarray ( $_array $_value ) ^if 00r( ^length ( @0 ) == 0 ) 00p{ ^end ( CALL ) } 004 ^nofail ( RULE ^delete ( @0 ) ) @5 = ^query ( exact_s $_array ? ? ) @4 = ^jsonpropertiesforobjectsinarray ( $_array 0 ) @3 = ^uniquefacts ( @5object @4subject ) ^nofail ( RULE ^delete ( @3 ) ) `
^makearrayfromset o 0 0 D( ^factset ^factfield ^inverse $_array $_fact $_item ) @0 = ^0 ^if 00r( ^length ( @0 ) == 0 ) 00s{ ^return ( null ) } 004 $_array = ^jsoncreate ( transient array ) ^loop ( -1 ) 02z { ^if 00a( ^2 ) 00B{ $_fact = ^last ( @0fact ) } 00S else ( 1 ) 00C { $_fact = ^first ( @0fact ) } 004 $_item = ^field ( $_fact ^1 ) ^jsonarrayinsert ( transient $_array $_item ) } ^return ( $_array ) `
^insertjsontypedvalue o 0 0 E( ^object ^name ^value ^type $_value $_flags $_length $_quote $_firstchar ) $_value = ^2 ^if 00v( ^istransientjson ( ^0 ) ) 00v{ $_flags = TRANSIENT } 00L else ( 1 ) 00v { $_flags = PERMANENT } 004 ^nofail ( RULE $_length = ^length ( $_value ) ) ^if 00k( ^3 == string ) 03I{ $_quote = ^"\"" ^if 00k( $_length > 1 ) 02o{ $_firstchar = ^extract ( $_value 0 1 ) ^if 00u( $_firstchar == $_quote ) 01f{ ^if 00N( ^extract ( $_value -1 +1 ) == $_firstchar ) 00q{ $_quote = null } 004 } 004 } 004 $_value = ^join ( $_quote $_value $_quote ) } 022 else 00l( ^3 == boolean ) 01L{ ^if 00G( ^pos ( lowercase $_value ) ? ~true ) 00q{ $_value = true } 00H else ( 1 ) 00r { $_value = false } 004 } 004 ^if 00y( ^jsonkind ( ^0 ) == object ) 00T{ ^jsonobjectinsert ( $_flags ^0 ^1 $_value ) } 00% else ( 1 ) 00P { ^jsonarrayinsert ( $_flags ^0 $_value ) } 004 `
^insertjsonobjectproperty o 0 0 E( $_json $_object $_name $_value $_item $_flags ) ^if 00g( ! $_json ) 00p{ ^end ( CALL ) } 004 $_item = $_json ^if 00g( $_object ) 03d{ ^if 00p( ! $_json.$_object ) 02n{ ^if 00z( ^istransientjson ( $_json ) ) 00v{ $_flags = TRANSIENT } 00L else ( 1 ) 00v { $_flags = PERMANENT } 004 $_json.$_object = ^jsoncreate ( $_flags object ) } 004 $_item = $_json.$_object } 004 $_item.$_name = $_value `
^safejsondelete o 0 0 B( $_json $_hold $_obj ) $_hold = ^jsoncreate ( transient array ) @0 = ^query ( exact_s $_json ? ? ) ^loop ( -1 ) 01L { $_obj = ^first ( @0object ) ^if 00r( ^jsonkind ( $_obj ) ) 00T{ ^jsonarrayinsert ( transient $_hold $_obj ) } 004 } ^delete ( $_json ) `
^createoruseobject o 0 0 C( $_object $_label $_result ) $_result = ^jsoncreate ( transient object ) ^if 00Q( ^jsonkind ( $_object ) == object and $_label ) 01S{ ^if 00o( $_object.$_label ) 00D{ $_result = $_object.$_label } 00T else ( 1 ) 00D { $_object.$_label = $_result } 004 } 004 ^return ( $_result ) `
^getaccessiblebots o 0 0 A( $_bname $_tmp $_accessiblebots $_junk ) @18 = ^query ( exact_s $publicbots ? ? ) @18 += ^query ( exact_s $privatebots ? ? ) ^loop ( -1 ) 02y { $_bname = ^first ( @18object ) ^if 00D( ^extract ( $_bname 0 3 ) == jo- ) 00y{ $_bname = $_bname.name } 004 $_tmp = ^createfact ( $_bname accessibleBot $_bname FACTTRANSIENT ) } @18 = ^query ( direct_v ? accessibleBot ? ) @19 = ^query ( exact_s $installedbots ? ? ) ^loop ( -1 ) 01g { @0 = ^first ( @19fact ) @1 = ^intersectfacts ( @18object @0object ) ^delete ( @1 ) } $_accessiblebots = ^jsoncreate ( TRANSIENT array ) @18 = ^query ( exact_v ? accessibleBot ? ) ^loop ( -1 ) 01D { $_bname = ^first ( @18subject ) $_junk = ^jsonarrayinsert ( "TRANSIENT UNIQUE" $_accessiblebots $_bname ) } ^return ( $_accessiblebots ) `
^listinstalledbots o 0 0 A( $_tmpbots $_botname ) $_tmpbots = null @1 = ^query ( exact_s $installedbots ? ? ) ^sort ( alpha @1object ) ^loop ( -1 ) 013 { $_botname = ^first ( @1object ) $_tmpbots = ^"$_tmpbots $_botname \n" } ^return ( $_tmpbots ) `
^listalluninstalledbots o 0 0 A( $_tmpbots $_accessiblebots $_botname ) $_tmpbots = null $_accessiblebots = ^getaccessiblebots ( ) @1 = ^query ( exact_s $_accessiblebots ? ? ) ^sort ( alpha @1object ) ^loop ( -1 ) 013 { $_botname = ^first ( @1object ) $_tmpbots = ^"$_tmpbots $_botname \n" } ^return ( $_tmpbots ) `
^listlinkedbots o 0 0 A( $_tmpbots $_botscount $_count ) $_tmpbots = null $_botscount = ^length ( $universalbot.publishedBots ) $_count = 0 ^loop ( $_botscount ) 01i { $_tmpbots = ^join ( $_tmpbots $universalbot.publishedBots[$_count] \n ) $_count += 1 } ^return ( $_tmpbots ) `
^addtokenvaluetokeyvalueobject o 0 0 C( ^token ^value $_token $_value $_tokenvalueobj ) $_token = ^0 $_value = ^1 ^if 00q( ! $$tokenvalueobjs ) 01G{ $$tokenvalueobjs = ^jsoncreate ( transient array ) $$msgmapkeyvalueobjs.tokenValueObjs = $$tokenvalueobjs } 004 $_tokenvalueobj = ^jsoncreate ( transient object ) ^jsonarrayinsert ( transient $$tokenvalueobjs $_tokenvalueobj ) $_tokenvalueobj.token = $_token $_tokenvalueobj.value = $_value `
^addmsgkeyvalueobject o 0 0 E( $_key $_defaultmsg $_originalmsg $_modifiedmsg $_objmsgkeyvalue ) ^if 00d( $_key ) 08a{ ^if 00o( ! $$keyvalueobjs ) 01+{ $$keyvalueobjs = ^jsoncreate ( transient array ) ^if 00m( $$keyvalueobjs ) 00~{ $$msgmapkeyvalueobjs.keyValueObjs = $$keyvalueobjs } 004 } 004 $_objmsgkeyvalue = ^jsoncreate ( transient object ) ^if 00o( $_objmsgkeyvalue ) 04H{ ^jsonarrayinsert ( transient $$keyvalueobjs $_objmsgkeyvalue ) $_objmsgkeyvalue.key = $_key ^if 00k( $_defaultmsg ) 00S{ $_objmsgkeyvalue.defaultMsg = $_defaultmsg } 004 ^if 00l( $_originalmsg ) 00U{ $_objmsgkeyvalue.originalMsg = $_originalmsg } 004 ^if 00l( $_modifiedmsg ) 00U{ $_objmsgkeyvalue.modifiedMsg = $_modifiedmsg } 004 } 004 } 004 `
^generatevar o 0 0 B( ^tokenvalue $_var $_tokenvalue $_tmp ) $_var = null $_tokenvalue = ^0 $_tmp = null ^if 00G( $_tokenvalue ? ~var_type_permanent ) 00Z{ $_tmp = ^"$" $_var = ^join ( $_tmp $_tokenvalue ) } 02^ else 00G( $_tokenvalue ? ~var_type_transient ) 00~{ $_tmp = ^"$$" $_var = ^join ( $_tmp $_tokenvalue ) } 01y else 00D( $_tokenvalue ? ~var_type_system ) 00Z{ $_tmp = ^"%" $_var = ^join ( $_tmp $_tokenvalue ) } 004 ^return ( $_var ) `
^replacetokens o 0 0 B( ^msgtoreplace $_searchoffset $_tofindstart $_tofindend $_indexstart $_indexend $_token $_tokenvalue $_tmpvarvalue $_tmpvarvaluelength $_tmpmsg $_vargenerated ) $$replacedmsg = ^0 $_searchoffset = 0 $_tofindstart = ^"<" $_tofindend = ^">" ^loop ( -1 ) 0fy { $_indexstart = null $_indexend = null $_token = null $_tokenvalue = null $_tmpvarvalue = null $_tmpvarvaluelength = 0 $_tmpmsg = $$replacedmsg ^nofail ( RULE $_indexstart = ^findtext ( $_tmpmsg $_tofindstart $_searchoffset insensitive ) ) ^if 00k( $_indexstart ) 0bc{ ^nofail ( RULE $_indexend = ^findtext ( $_tmpmsg $_tofindend $_indexstart insensitive ) ) ^if 00i( $_indexend ) 09D{ $_indexstart -= 1 $_token = ^extract ( $_tmpmsg $_indexstart $_indexend ) ^if 00f( $_token ) 07x{ $_tokenvalue = ^query ( exact_sv $_token xTokenValueMap ? 1 ? @0object ) ^if 00k( $_tokenvalue ) 060{ $_vargenerated = ^generatevar ( $_tokenvalue ) ^if 00m( $_vargenerated ) 04${ $_tmpvarvalue = ^$_vargenerated $_tmpvarvaluelength = ^length ( $_tmpvarvalue ) ^addtokenvaluetokeyvalueobject ( $_token $_tmpvarvalue ) ^if 00z( $_token == "<field-prompt>" ) 013{ $$replacedmsg = ^substitute ( character $$replacedmsg $_token "" ) } 01u else ( 1 ) 01e { $$replacedmsg = ^substitute ( character $$replacedmsg $_token $_tmpvarvalue ) } 004 } 004 } 004 } 004 $_searchoffset = $_indexstart + $_tmpvarvaluelength } 004 } 004 ^if 00m( ! $_tokenvalue ) 00p{ ^end ( LOOP ) } 004 } ^return ( $$replacedmsg ) `
^getrandomnumberwithin o 0 0 B( ^rangemaxvalue $_tmprandomvalue ) $_tmprandomvalue = %rand $_tmprandomvalue %= ^0 ^return ( $_tmprandomvalue ) `
^getoriginalmsgfromgenericresponses o 0 0 B( ^msgtofind $_msgtosearchfor $_foundmsg $_tmpobject $_tmporiginalmsg ) $_msgtosearchfor = ^0 $_foundmsg = null ^if 00o( $genericmessages ) 03${ $_tmpobject = $genericmessages.$_msgToSearchFor ^if 00j( $_tmpobject ) 02X{ ^nofail ( RULE $_tmporiginalmsg = ^jsonpath ( ".Original Message" $_tmpobject ) ) ^if 00o( $_tmporiginalmsg ) 01d{ @1 = ^query ( exact_s $_tmporiginalmsg ? ? ) $_foundmsg = ^pick ( @1object ) } 004 } 004 } 004 ^return ( $_foundmsg ) `
^fetchmessageforkey o 0 0 F( ^msgtofind ^msgdefault ^prefixnewline ^suffixnewline ^skipaddingtocompositekey $$modifiedmsg $_msgtosearchfor $_defaultmsg $_originalmsg $_modifiedmsg $_modifiedmsglist $_modifiedmsgobj ) $$modifiedmsg = null $_msgtosearchfor = ^0 $_defaultmsg = ^1 $_originalmsg = null $_modifiedmsg = null $_modifiedmsglist = $modifiedmessages.messages ^if 00p( $_modifiedmsglist ) 02@{ $_modifiedmsgobj = $_modifiedmsglist.$_msgToSearchFor ^if 00o( $_modifiedmsgobj ) 01K{ @1 = ^query ( exact_s $_modifiedmsgobj ? ? ) $_modifiedmsg = ^pick ( @1object ) $$modifiedmsg = $_modifiedmsg } 004 } 004 ^if 00n( ! $$modifiedmsg ) 01p{ $_originalmsg = ^getoriginalmsgfromgenericresponses ( ^0 ) $$modifiedmsg = $_originalmsg } 004 ^if 00n( ! $$modifiedmsg ) 00E{ $$modifiedmsg = $_defaultmsg } 01G else 011( $$modifiedmsg == "" or $$modifiedmsg == null or $$modifiedmsg == "-" ) 00w{ $$modifiedmsg = null } 004 ^if 00c( ! ^4 ) 01k{ ^addmsgkeyvalueobject ( $_msgtosearchfor $_defaultmsg $_originalmsg $_modifiedmsg ) } 004 $$modifiedmsg = ^replacetokens ( $$modifiedmsg ) ^if 00l( $$modifiedmsg ) 00J{ $$modifiedmsg = ^"$$modifiedMsg " } 004 ^if 00a( ^2 ) 00%{ $$prefix = ^2 $$modifiedmsg = ^"$$prefix $$modifiedMsg" } 004 ^if 00a( ^3 ) 00%{ $$suffix = ^3 $$modifiedmsg = ^"$$modifiedMsg $$suffix" } 004 ^return ( $$modifiedmsg ) `
^messagemap o 0 0 F( ^msgtofind ^msgdefault ^prefixnewline ^suffixnewline ^skipaddingtocompositekey $_tmpmodifiedmsg $_skipaddingtocompositekey ) ^notrace ( ^if 00u( ! $$msgmapkeyvalueobjs ) 00%{ $$msgmapkeyvalueobjs = ^jsoncreate ( transient object ) } 004 $_tmpmodifiedmsg = ^fetchmessageforkey ( ^0 ^1 ^2 ^3 ^4 ) $_skipaddingtocompositekey = ^4 ^if 00A( ! $_skipaddingtocompositekey ) 03x{ ^if 00o( ! $$compositekey ) 013{ $$compositekey = ^0 $$defaultmsgforcompositekey = $_tmpmodifiedmsg } 01* else ( 1 ) 01S { $$compositekey = ^"$$compositeKey++^0" $$defaultmsgforcompositekey = ^"$$defaultMsgForCompositeKey++$_tmpmodifiedmsg" } 004 } 004 ) ^return ( $_tmpmodifiedmsg ) `
^generatemsgfrommsgmapkeyvalueobjs o 0 0 A( $_generatedmsg $_key $_nindex $_numofkeyvalueobjs $_keyvalueobj $_tmpmsg $_numoftokenvalueobjs $_tokenvalueobj $_token $_tmpvarvalue ) ^notrace ( $_generatedmsg = null $_key = null $_nindex = 0 $_numofkeyvalueobjs = ^length ( $$msgmapkeyvalueobjs.keyValueObjs ) ^loop ( $_numofkeyvalueobjs ) 06T { $_keyvalueobj = $$msgmapkeyvalueobjs.keyValueObjs[$_nIndex] ^if 00f( ! $_key ) 00B{ $_key = $_keyvalueobj.key } 00! else ( 1 ) 00L { $_key = ^"$_key++$_keyvalueobj.key" } 004 $_tmpmsg = $_keyvalueobj.modifiedMsg ^if 00i( ! $_tmpmsg ) 00M{ $_tmpmsg = $_keyvalueobj.originalMsg } 004 ^if 00i( ! $_tmpmsg ) 00L{ $_tmpmsg = $_keyvalueobj.defaultMsg } 004 ^if 00o( ! $_generatedmsg ) 00B{ $_generatedmsg = $_tmpmsg } 00? else ( 1 ) 00T { $_generatedmsg = ^"$_generatedmsg $_tmpmsg" } 004 $_nindex += 1 } ^if 00k( $_nindex > 1 ) 00^{ ^addmsgkeyvalueobject ( $_key $_generatedmsg null null ) } 004 $_nindex = 0 $_numoftokenvalueobjs = ^length ( $$msgmapkeyvalueobjs.tokenValueObjs ) ^loop ( $_numoftokenvalueobjs ) 03b { $_tokenvalueobj = $$msgmapkeyvalueobjs.tokenValueObjs[$_nIndex] $_token = $_tokenvalueobj.token $_tmpvarvalue = $_tokenvalueobj.value $_generatedmsg = ^substitute ( character $_generatedmsg $_token $_tmpvarvalue ) $_nindex += 1 } ) ^return ( $_generatedmsg ) `
^resolvecompositekey o 0 0 A( $_defvalue $_key $_resolvedmsg ) ^notrace ( $_defvalue = "^no default value " $_key = $$compositekey $_resolvedmsg = ^messagemap ( $_key "^no default value" null null true ) ^if 00z( $_resolvedmsg == $_defvalue ) 00${ $_resolvedmsg = ^generatemsgfrommsgmapkeyvalueobjs ( ) } 018 else ( 1 ) 00% { ^addmsgkeyvalueobject ( $_key $_resolvedmsg null null ) } 004 $$oob.msgmapKeyValueObjs = $$msgmapkeyvalueobjs $$oob.resolvedMsg = $_resolvedmsg ) `
^checkmessagemap o 0 0 F( ^msgtofind ^msgdefault ^prefixnewline ^suffixnewline ^skipaddingtocompositekey $_originalmsg ) ^if 00a( ^0 ) 01&{ $_originalmsg = ^getoriginalmsgfromgenericresponses ( ^0 ) ^if 00n( ! $_originalmsg ) 00L{ ^log ( Missing message key: ^0 \n ) } 004 } 010 else 00a( ^1 ) 00U{ ^log ( Null message key for default: ^1 \n ) } 004 `
^logif o 0 0 C( ^variable ^text ) ^if 00a( ^0 ) 00n{ ^log ( ^1 ) } 004 `
^rightpad o 0 0 D( ^string ^len ^char $$char $$string ) ^notrace ( ^if 00x( ^2 and ^length ( ^2 ) > 0 ) 00n{ $$char = ^2 } 00F else ( 1 ) 00p { $$char = ^" " } 004 $$string = ^0 ^loop ( -1 ) 01T { ^if 00x( ^length ( $$string ) < ^1 ) 00M{ $$string = ^join ( $$string $$char ) } 00F else ( 1 ) 00p { ^end ( LOOP ) } 004 } ) ^return ( $$string ) `
^stringlist o 0 0 C( $_querysubject $_conjunction $_text $_len $_count $_sep $_space $_item ) @0 = ^query ( exact_s $_querysubject ? ? -1 ) $_text = null $_len = ^length ( @0 ) $_count = 0 $_sep = null ^if 00l( $_conjunction ) 00Z{ $_conjunction = ^" $_conjunction " $_space = ^" " } 004 ^loop ( $_len ) 04? { $_count += 1 $_item = ^last ( @0object ) ^if 00j( $_count > 1 ) 03z{ ^if 00i( $_len == 2 ) 01r{ ^if 00l( $_conjunction ) 00x{ $_sep = $_conjunction } 00B else ( 1 ) 00l { $_sep = , } 004 } 01S else 00o( $_count == $_len ) 00J{ $_sep = ^join ( , $_conjunction ) } 00T else ( 1 ) 00D { $_sep = ^join ( , $_space ) } 004 } 004 $_text = ^join ( $_text $_sep $_item ) } ^return ( $_text ) `
^trimwhitespace o 0 0 B( ^inputtext $_word $_trimmed ) @0 = ^burst ( ^0 " " ) ^loop ( -1 ) 01c { $_word = ^first ( @0subject ) $_trimmed = ^join ( AUTOSPACE $_trimmed $_word ) } ^return ( $_trimmed ) `
^appendarray o 0 0 C( $_target $_source $_count $_results $_index $_object ) $_count = ^length ( $_source ) ^if 00y( $_count > 0 and ! $_target ) 00T{ $_results = ^jsoncreate ( TRANSIENT array ) } 00M else ( 1 ) 00w { $_results = $_target } 004 $_index = 0 ^loop ( $_count ) 01y { $_object = $_source[$_index] ^jsonarrayinsert ( "TRANSIENT UNIQUE" $_results $_object ) $_index += 1 } ^return ( $_results ) `
^addtofieldchoicesjson o 0 0 B( ^fieldchoice ) ^if 00p( $$tmpfieldchoices ) 00!{ ^jsonarrayinsert ( TRANSIENT $$tmpfieldchoices ^0 ) } 004 `
^findwordinconcept o 0 0 C( ^word ^concept $_start $_end $_tmp $_word $_original $_result ) ^if 00u( ^position ( START ^0 ) ) 03Q{ $_start = ^position ( START ^0 ) $_end = ^position ( END ^0 ) ^loop ( -1 ) 01& { $_tmp = ^pos ( raw $_start ) $_word = ^join ( AUTOSPACE $_word $_tmp ) $_start += 1 ^if 00n( $_start > $_end ) 00p{ ^end ( LOOP ) } 004 } ^nofail ( RULE $_original = ^original ( ^0 ) ) } 00D else ( 1 ) 00n { $_word = ^0 } 004 ^nofail ( RULE $_result = ^wordinconcept ( $_word ^1 ) ) ^if 00g( $_result ) 00w{ ^return ( $_result ) } 004 ^if 00H( $_original and $_original != $_word ) 00-{ ^nofail ( RULE $_result = ^wordinconcept ( $_original ^1 ) ) } 004 ^return ( $_result ) `
^cacheignorereadwords o 0 0 A( $_word ) $ignorereadwords = ^jsoncreate ( PERMANENT object ) $ignorereadwordsexcluded = ^jsoncreate ( PERMANENT object ) @0 = ^query ( direct_vo ? member ~ignorereadwords ) ^loop ( -1 ) 01H { $_word = ^first ( @0subject ) ^if 00B( ^extract ( $_word 0 1 ) != \~ ) 00D{ $ignorereadwords.$_word = 1 } 004 } @0 = ^query ( exact_vo ? exclude ~ignorereadwords ) ^loop ( -1 ) 05h { $_word = ^first ( @0subject ) ^if 00B( ^extract ( $_word 0 1 ) != \~ ) 013{ $ignorereadwords.$_word = null $ignorereadwordsexcluded.$_word = 1 } 03e else ( 1 ) 02+ { @1 = ^query ( direct_vo ? member $_word ) ^loop ( -1 ) 027 { $_word = ^first ( @1subject ) ^if 00B( ^extract ( $_word 0 1 ) != \~ ) 013{ $ignorereadwords.$_word = null $ignorereadwordsexcluded.$_word = 1 } 004 } } 004 } `
^isignorereadword o 0 0 B( $_word $_props ) ^if 00L( ! $_word or $_word == \@ or $_word == & ) 00s{ ^return ( true ) } 004 ^if 00v( $ignorereadwords.$_word ) 00s{ ^return ( true ) } 004 $_props = ^properties ( $_word ) ^if 00o( $_props & 131072 ) 00s{ ^return ( true ) } 004 ^if 00O( $_props & 100663296 or $_props & 134217728 ) 019{ ^if 00F( ! $ignorereadwordsexcluded.$_word ) 00s{ ^return ( true ) } 004 } 004 ^fail ( CALL ) `
^sendmsgsummary o 0 0 C( ^msgtype ^msgresponse ) $$oob.msgType = ^0 $$oob.msgResponse = ^1 `
^sendconfirmationsummary o 0 0 E( ^msg ^filledfields ^emptyfields ^alertvalues $_tmpfilledfieldsjson $_tmpemptyfieldsjson $_tmpalertfieldsjson $_tmpexpectedresults $_tmpsendresponse ) $_tmpfilledfieldsjson = ^jsoncreate ( object ) $_tmpfilledfieldsjson.type = map $_tmpfilledfieldsjson.filledFields = ^1 $_tmpemptyfieldsjson = ^jsoncreate ( object ) $_tmpemptyfieldsjson.type = array $_tmpemptyfieldsjson.skippedFields = ^2 $_tmpalertfieldsjson = ^jsoncreate ( object ) $_tmpalertfieldsjson.type = array $_tmpalertfieldsjson.alertFields = ^3 $_tmpexpectedresults = ^jsoncreate ( array ) ^jsonarrayinsert ( $_tmpexpectedresults yes ) ^jsonarrayinsert ( $_tmpexpectedresults no ) ^jsonarrayinsert ( $_tmpexpectedresults amend ) $_tmpsendresponse = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_tmpsendresponse msg ^0 string ) $_tmpsendresponse.filledFields = $_tmpfilledfieldsjson $_tmpsendresponse.skippedFields = $_tmpemptyfieldsjson $_tmpsendresponse.alertFields = $_tmpalertfieldsjson $_tmpsendresponse.expectedResults = $_tmpexpectedresults ^sendmsgsummary ( "^Confirmation" $_tmpsendresponse ) `
^sendchoicessummary o 0 0 C( ^msgtosend ^fieldchoices $_tmpfieldchoices $_tmpsendresponse ) $_tmpfieldchoices = ^jsoncreate ( object ) $_tmpfieldchoices.type = array $_tmpfieldchoices.choices = ^1 $_tmpsendresponse = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_tmpsendresponse msg ^0 string ) $_tmpsendresponse.fieldChoices = $_tmpfieldchoices ^sendmsgsummary ( "^Choice" $_tmpsendresponse ) `
^sendinfolistsummary o 0 0 C( ^msgtosend ^fieldchoices $_tmpfieldchoices $_tmpsendresponse ) $_tmpfieldchoices = ^jsoncreate ( object ) $_tmpfieldchoices.type = array $_tmpfieldchoices.choices = ^1 $_tmpsendresponse = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_tmpsendresponse msg ^0 string ) $_tmpsendresponse.fieldChoices = $_tmpfieldchoices ^sendmsgsummary ( "^InfoList" $_tmpsendresponse ) `
^sendquestionsummary o 0 0 B( ^msgtosend $_tmpsendresponse ) $_tmpsendresponse = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_tmpsendresponse msg ^0 string ) ^sendmsgsummary ( "^Question" $_tmpsendresponse ) `
^sendyesornoquestionsummary o 0 0 B( ^msgtosend $_tmpexpectedresults $_tmpsendresponse ) $_tmpexpectedresults = ^jsoncreate ( array ) ^jsonarrayinsert ( $_tmpexpectedresults yes ) ^jsonarrayinsert ( $_tmpexpectedresults no ) $_tmpsendresponse = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_tmpsendresponse msg ^0 string ) $_tmpsendresponse.expectedResults = $_tmpexpectedresults ^sendmsgsummary ( "^YesOrNoQuestion" $_tmpsendresponse ) `
^sendgreetingsummary o 0 0 B( ^msgtosend $_tmpsendresponse ) $_tmpsendresponse = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_tmpsendresponse msg ^0 string ) ^sendmsgsummary ( "^Greeting" $_tmpsendresponse ) `
^sendstatementsummary o 0 0 B( ^msgtosend $_tmpsendresponse ) $_tmpsendresponse = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_tmpsendresponse msg ^0 string ) ^sendmsgsummary ( "^Statement" $_tmpsendresponse ) `
^sendconfirmationquestionsummary o 0 0 B( ^msgtosend $_tmpexpectedresults $_tmpsendresponse ) $_tmpexpectedresults = ^jsoncreate ( array ) ^jsonarrayinsert ( $_tmpexpectedresults cancel ) ^jsonarrayinsert ( $_tmpexpectedresults amend ) $_tmpsendresponse = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_tmpsendresponse msg ^0 string ) $_tmpsendresponse.expectedResults = $_tmpexpectedresults ^sendmsgsummary ( "^ConfirmationQuestion" $_tmpsendresponse ) `
^sendvalidationsummary o 0 0 B( ^msgtosend $_tmpsendresponse ) $_tmpsendresponse = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_tmpsendresponse msg ^0 string ) ^sendmsgsummary ( "^Validation" $_tmpsendresponse ) `
^sendchitchatsummary o 0 0 B( ^msgtosend $_tmpsendresponse ) $_tmpsendresponse = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_tmpsendresponse msg ^0 string ) ^sendmsgsummary ( "^ChitChat" $_tmpsendresponse ) `
^senderrorsummary o 0 0 B( ^msgtosend $_tmpsendresponse ) $_tmpsendresponse = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_tmpsendresponse msg ^0 string ) ^sendmsgsummary ( "^Error" $_tmpsendresponse ) `
^matchpatternarray o 0 0 B( ^patternarray $_array $_index $_return $_pattern $_result $_start $_first ) $_array = ^0 $_index = ^length ( $_array ) $_return = null _10 = null ^loop ( -1 ) 04= { ^if 00k( $_index == 0 ) 00p{ ^end ( loop ) } 004 $_index -= 1 _0 = null $_pattern = $_array[$_index] $_result = ^result ( ^match ( $_pattern ) ) ^if 00t( $_result == NOPROBLEM ) 02C{ $_start = ^position ( START _0 ) ^if 00b( _10 ) 014{ ^if 00q( $_start <= $_first ) 00C{ $_first = $_start _10 = _0 } 004 } 00S else ( 1 ) 00C { $_first = $_start _10 = _0 } 004 } 004 } _0 = _10 ^if 00a( _0 ) 00D{ $_return = ^original ( _0 ) } 004 ^return ( $_return ) `
^getwordcount o 0 0 C( ^string ^index $_index $_str $_len ) $_index = ^1 $_str = ^extract ( ^0 0 $_index ) $_str = ^substitute ( character $_str " " "" ) $_len = ^length ( $_str ) $_index -= $_len $_index += 1 ^return ( $_index ) `
^rememberword o 0 0 B( $_word ) ^if 00r( ! $field_vocabulary ) 00@{ $field_vocabulary = ^jsoncreate ( PERMANENT object ) } 004 $field_vocabulary.$_word += 1 `
^forgetword o 0 0 B( $_word ) ^if 00r( ! $field_vocabulary ) 00p{ ^end ( CALL ) } 004 ^if 00w( $field_vocabulary.$_word ) 02V{ $field_vocabulary.$_word -= 1 ^if 00B( $field_vocabulary.$_word == 0 ) 01O{ $field_vocabulary.$_word = null ^if 00G( ^length ( $field_vocabulary ) == 0 ) 00A{ $field_vocabulary = null } 004 } 004 } 004 `
^maskindirection o 0 0 C( ^wordindex ^direction $_wordindex ) _0 = null $_wordindex = ^0 ^if 00l( ^1 == forward ) 01l{ ^if 00u( $_wordindex <= %length ) 00P{ ^setposition ( _0 $_wordindex %length ) } 004 } 01p else ( 1 ) 019 { ^if 00o( $_wordindex >= 1 ) 00J{ ^setposition ( _0 1 $_wordindex ) } 004 } 004 ^if 00y( ^position ( START _0 ) > 0 ) 00s{ ^unmark ( * _0 ) } 004 `
^castboolean o 0 0 B( $_boolean ) ^if 00r( $_boolean == "true" ) 00u{ ^return ( true ) ; } 004 ^return ( null ) `
^stripquotes o 0 0 B( $_string $_quote $_firstchar $_len ) ^if 00w( ^length ( $_string ) > 1 ) 03x{ $_quote = ^"\"" $_firstchar = ^extract ( $_string 0 1 ) ^if 00u( $_firstchar == $_quote ) 027{ ^if 00O( ^extract ( $_string -1 +1 ) == $_firstchar ) 01h{ $_len = ^length ( $_string ) $_len -= 2 $_string = ^extract ( $_string 1 $_len ) } 004 } 004 } 004 ^return ( $_string ) `
^getcurrentvolleysentences o 0 0 B( $_realterminator $_totalsentences $_currentvolleysentences $_sentences $_index $_sentence $_terminator $_sep $_ignore $_word ) $_totalsentences = ^length ( $gleaninfo.sentences ) $_currentvolleysentences = $_totalsentences - $$volleysentenceindex $_sentences = null ^if 00A( $_currentvolleysentences > 0 ) 05#{ $_index = $$volleysentenceindex ^loop ( $_currentvolleysentences ) 04~ { $_sentence = $gleaninfo.sentences[$_index] ^if 00o( $_realterminator ) 01I{ $_terminator = $gleaninfo.sentenceterminator[$_index] ^if 00m( ! $_terminator ) 00s{ $_terminator = . } 004 } 004 $_sentences = ^join ( $_sentences $_sep $_sentence $_terminator ) ^if 00k( $_terminator ) 00o{ $_sep = ^" " } 00F else ( 1 ) 00p { $_sep = ^". " } 004 $_index += 1 } } 004 ^if 00k( $$wordoffset ) 030{ @0 = ^burst ( $_sentences ) ^loop ( $$wordoffset ) 00E { $_ignore = ^first ( @0subject ) } $_sentences = null ^loop ( -1 ) 01g { $_word = ^first ( @0subject ) $_sentences = ^join ( AUTOSPACE $_sentences $_word ) } } 004 ^return ( $_sentences ) `
^getisolanguage o 0 0 B( $_cslang $_lang ) $_lang = en ^if 00q( $_cslang == FRENCH ) 00n{ $_lang = fr } 01C else 00q( $_cslang == GERMAN ) 00n{ $_lang = de } 00X else 00r( $_cslang == SPANISH ) 00n{ $_lang = es } 004 ^return ( $_lang ) `
^gethttpheaders o 0 0 C( $_host $_auth $_headers ) $_headers = $baseheaders ^if 00e( $_host ) 00J{ $_host = ^burst ( ONCE $_host / ) } 00~ else ( 1 ) 00K { $_host = ^burst ( ONCE $server / ) } 004 $_headers = ^join ( AUTOSPACE $_headers "^~Host:" $_host ) ^if 00e( $_auth ) 01b{ $_headers = ^join ( AUTOSPACE $_headers "^~Authorization:" bearer $_auth ) } 004 ^return ( $_headers ) `
^stripsubstringifexists o 0 0 D( $_key $_substring $_position $_variable $_len $_substringlength $_extractedsubstring $_nextpos $_variable1 ) ^if 00m( $_position < 0 ) 00q{ $_position = 0 } 004 $_variable = $_key $_len = ^length ( $_key ) $_substringlength = ^length ( $_substring ) $_extractedsubstring = ^extract ( $_key $_position $_substringlength ) ^if 00H( $_extractedsubstring == $_substring ) 04q{ ^if 00n( $_position == 0 ) 00%{ $_variable = ^extract ( $_key $_substringlength $_len ) } 030 else 00m( $_position > 0 ) 02I{ $_variable = ^extract ( $_key 0 $_position ) $_nextpos = $_position + $_substringlength $_variable1 = ^extract ( $_key $_nextpos $_len ) $_variable = ^join ( $_variable $_variable1 ) } 004 } 004 ^return ( $_variable ) `
^comparepropertieslength o 0 0 B( $_object $_length $_index $_previoussize $_size $_propfact $_propname $_item ) $_length = ^length ( $_object ) $_index = 0 $_previoussize = null $_size = null ^loop ( $_length ) 053 { $_propfact = ^nth ( $_object $_index ) $_propname = $_propfact.verb $_item = $_object.$_propName ^if 00C( ^jsonkind ( $_item ) != object ) 02^{ ^if 00m( $_previoussize ) 01n{ ^if 00I( ^length ( $_item ) != $_previoussize ) 00D{ $_size = null ^end ( LOOP ) } 004 } 01c else ( 1 ) 00? { $_previoussize = ^length ( $_item ) $_size = $_previoussize } 004 } 004 $_index += 1 } ^return ( $_size ) `
^addcontextinfotooob o 0 0 B( $_taskinfo ) ^if 00A( $_taskinfo.contextIdOnServer ) 00W{ $$oob.contextId = $_taskinfo.contextIdOnServer } 004 ^if 00u( $_taskinfo.contextJson ) 017{ $$oob.contextInMemory = ^jsoncopy ( transient $_taskinfo.contextJson ) } 004 `
^addpausedcontextsinfotooob o 0 0 B( $_contextsstack $_index $_count ) $$contextidsarray = ^jsoncreate ( TRANSIENT array ) $_index = 0 $_count = ^length ( $_contextsstack ) ^loop ( -1 ) 02E { ^if 00p( $_index < $_count ) 01F{ ^jsonarrayinsert ( TRANSIENT $$contextidsarray $_contextsstack[$_index].contextIdOnServer ) $_index += 1 } 00F else ( 1 ) 00p { ^end ( LOOP ) } 004 } $$oob.pausedContextIds = $$contextidsarray `
^setconceptvalue o 0 0 D( ^posit $_concept $_value ) ^if 00f( $_value ) 01o{ ^mark ( $_concept ^0 ) $_concept = ^join ( $_concept = $_value ) ^mark ( $_concept ^0 ) } 01+ else ( 1 ) 01V { @0 = ^conceptlist ( CONCEPT ^0 $_concept ) ^loop ( -1 ) 00# { $_concept = ^last ( @0subject ) ^unmark ( $_concept ^0 ) } } 004 `
^getconceptvalue o 0 0 C( ^posit $_concept $_value $_prefix $_conceptvalue ) $_value = null $_prefix = ^join ( $_concept = ) @0 = ^conceptlist ( CONCEPT ^0 $_prefix ) ^if 00c( ! @0 ) 00s{ ^return ( null ) } 004 $_conceptvalue = ^last ( @0all ) ^if 00m( $_conceptvalue ) 00V{ _0 = ^burst ( $_conceptvalue = ) $_value = _1 } 004 ^return ( $_value ) `
^range_inside o 0 0 C( $_range1 $_range2 $_start1 $_end1 $_start2 $_end2 ) $_start1 = $_range1 >> 8 $_end1 = $_range1 % 256 $_start2 = $_range2 >> 8 $_end2 = $_range2 % 256 ^if 00N( $_start1 >= $_start2 and $_end1 <= $_end2 ) 00s{ ^return ( true ) } 004 ^return ( null ) `
^checkconceptvalue o 0 0 C( ^posit $_concept $_location ) ^setposition ( _0 1 %length ) @0 = ^conceptlist ( CONCEPT _0 $_concept ) ^if 00c( ! @0 ) 00s{ ^return ( null ) } 004 ^loop ( -1 ) 01A { $_location = ^last ( @0object ) ^if 00D( ^range_inside ( ^0 $_location ) ) 00s{ ^return ( true ) } 004 } ^return ( null ) `
^jsfunctions o 0 0 A( ) *JavaScript  permanent eval { String.prototype.startsWith = function(searchString, position){ position = position || 0; return this.substr(position, searchString.length) === searchString; }; String.prototype.endsWith = function(searchString, position) { var subjectString = this.toString(); if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) { position = subjectString.length; } position -= searchString.length; var lastIndex = subjectString.lastIndexOf(searchString, position); return lastIndex !== -1 && lastIndex === position; }; function js_regex(expr, str) { var rslt = ""; var flags = "gi"; if (expr.startsWith("/")) { var exprend = expr.length - 1; if (!expr.endsWith("/")) { exprend = expr.lastIndexOf("/"); flags = expr.substring(exprend+1); } expr = expr.substring(1,exprend); } if (expr.length === 0) { return rslt; } expr = "\\b" + expr + "\\b"; var re = new RegExp(expr, flags); var matches = str.match(re); if (matches) { rslt = JSON.stringify(matches); } return rslt; }; } `
^jsregex o 0 0 C( ^expr ^string ) *JavaScript  permanent call string js_regex string string `
^clean_positions o 0 0 A( ) _0 = null _1 = null _2 = null `
^save_positions o 0 0 A( $_start $_end ) _11 = _0 _12 = _1 _13 = _2 $_start = ^position ( START _0 ) $_end = ^position ( END _0 ) ^if 00a( _1 ) 00E{ $_end = ^position ( END _1 ) } 004 ^if 00a( _2 ) 00E{ $_end = ^position ( END _2 ) } 004 ^setposition ( _10 $_start $_end ) `
^count_digits o 0 0 A( $_inconcept $_pattern $_amount $_length $_outconcept $_value ) $_inconcept = ^join ( ~ positiveInteger ) $_pattern = ^join ( @ \_ 10 + " " * " " \_ $_inconcept ) ^setposition ( _10 0 0 ) ^loop ( -1 ) 04d { ^clean_positions ( ) ^if 00s( ^match ( $_pattern ) ) 02#{ ^save_positions ( ) $_amount = _11 $_length = ^length ( $_amount ) $_outconcept = ^join ( ~ unit - count - dig - $_length ) $_value = ^'{ amount: $_amount }' ^setconceptvalue ( _10 $_outconcept $_value ) } 00F else ( 1 ) 00p { ^end ( loop ) } 004 } `
^count_scaleconcept o 0 0 C( $_in1 $_in2 $_length1 $_inconcept1 $_length2 $_inconcept2 $_outconcept $_pattern $_value $_obj1 $_amount1 $_obj2 $_amount2 $_rem ) $_length1 = ^length ( $_in1 ) $_inconcept1 = ^join ( ~ unit - count - dig - $_length1 ) $_length2 = ^length ( $_in2 ) $_inconcept2 = ^join ( ~ unit - count - dig - $_length2 ) $_length1 += $_length2 $_length1 -= 1 $_outconcept = ^join ( ~ unit - count - dig - $_length1 ) $_pattern = ^join ( @ \_ 10 + " " * " " \_ $_inconcept1 " " \_ $_inconcept2 ) ^setposition ( _10 0 0 ) ^loop ( -1 ) 07- { ^clean_positions ( ) ^if 00s( ^match ( $_pattern ) ) 06N{ ^save_positions ( ) $_value = ^getconceptvalue ( _11 $_inconcept1 ) $_obj1 = ^jsonparse ( $_value ) $_amount1 = $_obj1.amount $_value = ^getconceptvalue ( _12 $_inconcept2 ) $_obj2 = ^jsonparse ( $_value ) $_amount2 = $_obj2.amount $_rem = $_amount2 $_rem %= $_in2 ^if 00i( $_rem == 0 ) 02P{ ^setconceptvalue ( _11 $_inconcept1 null ) ^setconceptvalue ( _12 $_inconcept2 null ) $_amount1 *= $_amount2 $_value = ^'{ amount: $_amount1 }' ^setconceptvalue ( _10 $_outconcept $_value ) } 004 } 00F else ( 1 ) 00p { ^end ( loop ) } 004 } `
^count_addconcept o 0 0 C( $_in1 $_in2 $_length $_inconcept1 $_inconcept2 $_outconcept $_matchconcept1 $_pattern $_value $_obj1 $_amount1 $_rem $_obj2 $_amount2 ) $_length = ^length ( $_in1 ) $_inconcept1 = ^join ( ~ unit - count - dig - $_length ) $_length = ^length ( $_in2 ) $_inconcept2 = ^join ( ~ unit - count - dig - $_length ) $_outconcept = $_inconcept1 ^if 00j( $_in1 == 10 ) 00Z{ $_matchconcept1 = ^join ( ~ unit - count - tens ) } 00W else ( 1 ) 00G { $_matchconcept1 = $_inconcept1 } 004 $_pattern = ^join ( @ \_ 10 + " " * " " \_ $_matchconcept1 " " \_ $_inconcept2 ) $_in2 *= 10 ^setposition ( _10 0 0 ) ^loop ( -1 ) 092 { ^clean_positions ( ) ^if 00s( ^match ( $_pattern ) ) 07S{ ^save_positions ( ) $_value = ^getconceptvalue ( _11 $_inconcept1 ) $_obj1 = ^jsonparse ( $_value ) $_amount1 = $_obj1.amount $_rem = $_amount1 $_rem %= $_in2 ^if 00i( $_rem == 0 ) 05c{ $_value = ^getconceptvalue ( _12 $_inconcept2 ) $_obj2 = ^jsonparse ( $_value ) $_amount2 = $_obj2.amount ^if 00j( $_in1 == 10 ) 00V{ ^setconceptvalue ( _11 $_matchconcept1 null ) } 004 ^setconceptvalue ( _11 $_inconcept1 null ) ^setconceptvalue ( _12 $_inconcept2 null ) $_amount1 += $_amount2 $_value = ^'{ amount: $_amount1 }' ^setconceptvalue ( _10 $_outconcept $_value ) } 004 } 00F else ( 1 ) 00p { ^end ( loop ) } 004 } `
^count_changeconcept o 0 0 C( $_in $_out $_length $_inconcept $_outconcept $_pattern $_value ) $_length = ^length ( $_in ) $_inconcept = ^join ( ~ unit - count - dig - $_length ) $_length = ^length ( $_out ) $_outconcept = ^join ( ~ unit - count - dig - $_length ) $_pattern = ^join ( @ \_ 10 + " " * " " \_ $_inconcept ) ^setposition ( _10 0 0 ) ^loop ( -1 ) 03D { ^clean_positions ( ) ^if 00s( ^match ( $_pattern ) ) 02g{ ^save_positions ( ) $_value = ^getconceptvalue ( _11 $_inconcept ) ^setconceptvalue ( _11 $_inconcept null ) ^setconceptvalue ( _10 $_outconcept $_value ) } 00F else ( 1 ) 00p { ^end ( loop ) } 004 } `
^count_mergeconcept o 0 0 A( $_concept $_pattern $_value $_obj1 $_amount1 $_obj2 $_amount2 $_inconcept1 $_inconcept2 ) $_concept = ^join ( ~ unit - count - dig - 9 ) $_pattern = ^join ( \_ $_concept " " \_ $_concept ) ^loop ( -1 ) 07g { ^clean_positions ( ) ^if 00s( ^match ( $_pattern ) ) 05^{ ^save_positions ( ) $_value = ^getconceptvalue ( _11 $_concept ) $_obj1 = ^jsonparse ( $_value ) $_amount1 = $_obj1.amount $_value = ^getconceptvalue ( _12 $_concept ) $_obj2 = ^jsonparse ( $_value ) $_amount2 = $_obj2.amount $_amount1 = ^join ( $_amount1 $_amount2 ) ^setconceptvalue ( _11 $_inconcept1 null ) ^setconceptvalue ( _12 $_inconcept2 null ) $_value = ^'{ amount: $_amount1 }' ^setconceptvalue ( _10 $_concept $_value ) } 00F else ( 1 ) 00p { ^end ( loop ) } 004 } `
^count_glean o 0 0 A( ) ^count_digits ( ) ^count_scaleconcept ( 1 100 ) ^count_addconcept ( 10 1 ) ^count_changeconcept ( 1 10 ) ^count_addconcept ( 100 10 ) ^count_changeconcept ( 10 100 ) ^count_scaleconcept ( 100 1000000 ) ^count_scaleconcept ( 100 1000 ) ^count_addconcept ( 100000 100 ) ^count_changeconcept ( 100 100000 ) ^count_changeconcept ( 1000 100000 ) ^count_changeconcept ( 10000 100000 ) ^count_addconcept ( 100000000 100000 ) ^count_changeconcept ( 100000 100000000 ) ^count_changeconcept ( 1000000 100000000 ) ^count_changeconcept ( 10000000 100000000 ) ^count_mergeconcept ( ) `
^get_count o 0 0 A( $_inconcept $_pattern $_obj $_value ) $_inconcept = ^join ( ~ unit - count - dig - 9 ) $_pattern = ^join ( \_ $_inconcept ) $_obj = null ^if 00s( ^match ( $_pattern ) ) 01n{ _10 = _0 $_value = ^getconceptvalue ( _10 $_inconcept ) $_obj = ^jsonparse ( $_value ) } 004 _0 = _10 ^return ( $_obj ) `
^get_padded_left o 0 0 D( ^inputtext ^pad ^len $$tmp ) $$tmp = ^0 ^loop ( -1 ) 01x { ^if 00u( ^length ( $$tmp ) < ^2 ) 00t{ $$tmp = ^"0$$tmp" } 00F else ( 1 ) 00p { ^end ( LOOP ) } 004 } ^return ( $$tmp ) `
^format_time o 0 0 A( ) ^if 00n( $$error_in_date ) 00s{ ^return ( null ) } 004 ^if 012( $$time_computed_hrs and $$time_computed_mins and $$time_computed_secs ) 03~{ $$time_computed_hrs = ^get_padded_left ( $$time_computed_hrs 0 2 ) $$time_computed_mins = ^get_padded_left ( $$time_computed_mins 0 2 ) $$time_computed_secs = ^get_padded_left ( $$time_computed_secs 0 2 ) ^"\T$$time_computed_hrs\:$$time_computed_mins\:$$time_computed_secs\Z" } 004 `
^format_date o 0 0 E( ^format ^date ^month ^year $$date $$month $$year ) ^if 00K( ^3 and ^2 and ^1 and ! $$error_in_date ) 081{ $$date = ^1 $$month = ^2 $$year = ^3 $$month += 1 $$month = ^get_padded_left ( $$month 0 2 ) $$date = ^get_padded_left ( $$date 0 2 ) ^if 00o( ^0 == yyyy-MM-dd ) 00C{ ^"$$year\-$$month\-$$date" } 05j else 00o( ^0 == yyyy/MM/dd ) 00A{ ^"$$year/$$month/$$date" } 04t else 00o( ^0 == dd/MM/yyyy ) 00A{ ^"$$date/$$month/$$year" } 03D else 00o( ^0 == dd-MM-yyyy ) 00C{ ^"$$date\-$$month\-$$year" } 02L else 00o( ^0 == MM-dd-yyyy ) 00C{ ^"$$month\-$$date\-$$year" } 01T else 00o( ^0 == MM/dd/yyyy ) 00A{ ^"$$month/$$date/$$year" } 00# else 00m( ^0 == yyyyMMdd ) 00y{ ^"$$year$$month$$date" } 004 } 00I else ( 1 ) 00s { ^return ( NULL ) } 004 `
^hrs_mins_secs_to_secs o 0 0 D( ^ip_hrs ^ip_mins ^ip_secs ) $$op_secs = null $$op_secs = ^2 ^if 00a( ^1 ) 00U{ $$tmp_secs = ^1 * 60 $$op_secs += $$tmp_secs } 004 ^if 00a( ^0 ) 01a{ $$tmp_mins = ^0 * 60 $$tmp_secs = $$tmp_mins * 60 $$op_secs += $$tmp_secs } 004 $$op_secs `
^secs_to_hrs_mins_secs o 0 0 B( ^ip_secs ) $$time_tmp_secs = ^0 ^if 00n( $$time_tmp_secs ) 04B{ ^if 00r( $$time_tmp_secs < 0 ) 01p{ $$my_days -= 1 $$time_tmp_secs = ^hrs_mins_secs_to_secs ( 24 0 0 ) $$time_tmp_secs += ^0 } 004 $$my_secs = $$time_tmp_secs % 60 $$tmp_val = $$time_tmp_secs / 60 $$my_mins = $$tmp_val % 60 $$my_hrs = $$tmp_val / 60 $$time_tmp_days = $$my_hrs / 24 $$my_days += $$time_tmp_days $$my_hrs %= 24 } 004 `
^get_current_date_time o 0 0 A( ) _0 = ^burst ( %timenumbers ) $$current_sec = _0 $$current_min = _1 $$current_hr = _2 $$current_dayinweek = _3 $$current_date = _4 $$current_month = _5 $$current_year = _6 `
^getdatestartposition o 0 0 B( ^what $_new ) ^if 00a( ^0 ) 01K{ $_new = ^position ( START ^0 ) ^if 00I( ! $$datestart or $$datestart > $_new ) 00v{ $$datestart = $_new } 004 } 004 `
^getdateendposition o 0 0 B( ^what $_new ) ^if 00a( ^0 ) 01C{ $_new = ^position ( END ^0 ) ^if 00E( ! $$dateend or $$dateend < $_new ) 00t{ $$dateend = $_new } 004 } 004 `
^getdateposition o 0 0 B( ^what ) ^getdatestartposition ( ^0 ) ^getdateendposition ( ^0 ) `
^format_phonenumber o 0 0 B( ^phone ) @0 = ^burst ( ^0 "" ) $$tmp = null $$tmp1 = null $$tmp2 = null $$count = ^length ( @0 ) ^if 00l( $$count == 13 ) 01d{ $$tmp = ^"+^first(@0subject)^first(@0subject)^first(@0subject)" $$count -= 3 } 02w else 00l( $$count == 12 ) 00?{ $$tmp = ^"+^first(@0subject)^first(@0subject)" $$count -= 2 } 01a else 00l( $$count == 11 ) 00T{ $$tmp = ^"+^first(@0subject) " $$count -= 1 } 004 ^if 00l( $$count == 10 ) 01i{ $$tmp1 = ^"\(^first(@0subject)^first(@0subject)^first(@0subject)\) " $$count -= 3 } 004 ^if 00k( $$count == 7 ) 02f{ $$tmp2 = ^"^first(@0subject)^first(@0subject)^first(@0subject)-^first(@0subject)^first(@0subject)^first(@0subject)^first(@0subject)" ^"$$tmp$$tmp1$$tmp2" } 00u else ( 1 ) 00e { ^0 } 004 `
^unitsymboltotext o 0 0 C( ^symbol ^rawsymbol $$symbol $$testsymbol ) ^if 00a( ^1 ) 02^{ ^if 00I( ^query ( exact_sv ^1 symbolfor ? 1 ) ) 00w{ ^return ( @0object ) } 004 $$testsymbol = ^pos ( lowercase ^1 ) ^if 00S( ^query ( exact_sv $$testsymbol symbolfor ? 1 ) ) 00w{ ^return ( @0object ) } 004 } 004 $$symbol = ^substitute ( character ^0 "^ " _ ) ^if 00v( $$symbol ? ~measurement ) 00w{ ^return ( $$symbol ) } 004 $$testsymbol = ^pos ( capitalize $$symbol ) ^if 00z( $$testsymbol ? ~measurement ) 00A{ ^return ( $$testsymbol ) } 004 $$testsymbol = ^pos ( lowercase $$symbol ) ^if 00z( $$testsymbol ? ~measurement ) 00A{ ^return ( $$testsymbol ) } 004 ^if 00a( ^1 ) 01~{ $$testsymbol = ^substitute ( character ^1 "^ " _ ) ^if 00z( $$testsymbol ? ~measurement ) 00A{ ^return ( $$testsymbol ) } 004 } 004 ^return ( $$symbol ) `
^findmeasurementcategory o 0 0 C( ^unit ^canonunit ) ^if 00R( ^query ( exact_svo ^0 member ~measurement 1 ) ) 00A{ ^return ( ~measurement ) } 004 ^if 00J( ^query ( up2set ^0 ? ~measurement 1 ) ) 00x{ ^return ( @0subject ) } 004 ^if 00J( ^query ( up2set ^1 ? ~measurement 1 ) ) 00x{ ^return ( @0subject ) } 004 ^return ( null ) `
^currency_code o 0 0 B( ^posit $_return ) @0 = ^query ( exact_vo ? member ~currency-code-concepts -1 ) @1 = ^conceptlist ( CONCEPT ^0 ) @2 = ^intersectfacts ( @0subject @1subject ) ^if 00q( ^length ( @2 ) > 0 ) 01f{ $_return = @2subject $_return = ^extract ( $_return 1 4 ) ^return ( $_return ) } 004 `
^currency_object o 0 0 B( ^posit $_prefix $_valuearray $_conceptvalue $_code $_amount $_value $_object ) $_prefix = ^join ( ~ unit - currency - ) @0 = ^conceptlist ( CONCEPT ^0 $_prefix ) $_valuearray = ^jsoncreate ( array ) ^loop ( -1 ) 03i { $_conceptvalue = ^last ( @0all ) _0 = ^burst ( $_conceptvalue - ) $_code = _2 $_amount = _3 $_amount /= 100 $_value = ^'{ code: "$_code", amount: $_amount }' $_object = ^jsonparse ( $_value ) ^jsonarrayinsert ( $_valuearray $_object ) } ^return ( $_valuearray ) `
^currency_moneynumber o 0 0 A( $_inconcept $_pattern $_outconcept $_amount $_code $_value ) $_inconcept = ^join ( ~ moneynumber ) $_pattern = ^join ( @ \_ 10 + " " * " " \_ \( \_ $_inconcept \) ) $_outconcept = ^join ( ~ currency ) ^setposition ( _10 0 0 ) ^loop ( -1 ) 03q { ^if 00s( ^match ( $_pattern ) ) 02o{ _10 = _0 _11 = _1 $_amount = _11 $_code = ^currency_code ( _11 ) $_value = ^'[{ code: "$_code", amount: $_amount }]' ^setconceptvalue ( _10 $_outconcept $_value ) } 00F else ( 1 ) 00p { ^end ( loop ) } 004 } `
^currency_quantunit o 0 0 A( $_inconcept1 $_inconcept2 $_pattern $_outconcept $_amount $_valuearray $_length $_index $_value ) $_inconcept1 = ^join ( ~ number ) $_inconcept2 = ^join ( ~ unit - currency ) $_pattern = ^join ( @ \_ 10 + " " * " " \_ \( \_ $_inconcept1 " " \_ $_inconcept2 \) ) $_outconcept = ^join ( ~ currency ) ^setposition ( _10 0 0 ) ^loop ( -1 ) 058 { ^if 00s( ^match ( $_pattern ) ) 046{ _10 = _0 _11 = _1 _12 = _2 $_amount = _11 $_valuearray = ^currency_object ( _12 ) $_length = ^length ( $_valuearray ) $_index = 0 ^loop ( $_length ) 00~ { $_valuearray[$_index].amount *= $_amount $_index += 1 } $_value = ^jsonwrite ( $_valuearray ) ^setconceptvalue ( _10 $_outconcept $_value ) } 00F else ( 1 ) 00p { ^end ( loop ) } 004 } `
^currency_codequant o 0 0 A( $_inconcept1 $_inconcept2 $_pattern $_outconcept $_code $_amount $_value ) $_inconcept1 = ^join ( ~ currency - code ) $_inconcept2 = ^join ( ~ number ) $_pattern = ^join ( @ \_ 10 + " " * " " ! $_inconcept2 " " \_ \( \_ $_inconcept1 " " \_ $_inconcept2 \) ) $_outconcept = ^join ( ~ currency ) ^setposition ( _10 0 0 ) ^loop ( -1 ) 03g { ^if 00s( ^match ( $_pattern ) ) 02e{ _10 = _0 _11 = _1 _12 = _2 $_code = _11 $_amount = _12 $_value = ^'[{ code: "$_code", amount: $_amount }]' ^setconceptvalue ( _10 $_outconcept $_value ) } 00F else ( 1 ) 00p { ^end ( loop ) } 004 } `
^currency_number o 0 0 A( $_inconcept $_pattern $_outconcept $_isused $_amount $_value ) $_inconcept = ^join ( ~ number ) $_pattern = ^join ( @ \_ 10 + " " * " " \_ $_inconcept ) $_outconcept = ^join ( ~ currency ) ^setposition ( _10 0 0 ) ^loop ( -1 ) 03R { ^if 00s( ^match ( $_pattern ) ) 02P{ _10 = _0 $_isused = ^checkconceptvalue ( _10 $_outconcept ) ^if 00i( ! $_isused ) 01x{ $_amount = _10 $_value = ^'[{ amount: $_amount }]' ^setconceptvalue ( _10 $_outconcept $_value ) } 004 } 00F else ( 1 ) 00p { ^end ( loop ) } 004 } `
^currency_join o 0 0 A( $_inconcept1 $_inconcept2 $_pattern $_outconcept $_value $_obj1 $_obj2 $_length1 $_length2 $_valuearray $_index1 $_index2 $_amount $_code $_object ) $_inconcept1 = ^join ( ~ currency ) $_inconcept2 = ^join ( ~ currency ) $_pattern = ^join ( \_ \( \_ $_inconcept1 " " \{ ~ currencyjoiner \} " " \_ $_inconcept2 \) ) $_outconcept = ^join ( ~ currency ) ^loop ( -1 ) 0cQ { ^if 00s( ^match ( $_pattern ) ) 0bO{ _10 = _0 _11 = _1 _12 = _2 $_value = ^getconceptvalue ( _11 $_inconcept1 ) $_obj1 = ^jsonparse ( $_value ) $_value = ^getconceptvalue ( _12 $_inconcept2 ) $_obj2 = ^jsonparse ( $_value ) ^setconceptvalue ( _11 $_inconcept1 null ) ^setconceptvalue ( _12 $_inconcept2 null ) $_length1 = ^length ( $_obj1 ) $_length2 = ^length ( $_obj2 ) $_valuearray = ^jsoncreate ( array ) $_index1 = 0 ^loop ( $_length1 ) 050 { $_index2 = 0 ^loop ( $_length2 ) 04k { ^if 00S( $_obj1[$_index1].code == $_obj2[$_index2].code ) 03f{ $_amount = $_obj1[$_index1].amount $_amount += $_obj2[$_index2].amount $_code = $_obj1[$_index1].code $_value = ^'{ code: "$_code", amount: $_amount }' $_object = ^jsonparse ( $_value ) ^jsonarrayinsert ( $_valuearray $_object ) } 004 $_index2 += 1 } $_index1 += 1 } $_value = ^jsonwrite ( $_valuearray ) ^setconceptvalue ( _10 $_outconcept $_value ) } 00F else ( 1 ) 00p { ^end ( loop ) } 004 } `
^get_currency o 0 0 A( $_inconcept $_pattern $_obj $_value ) $_inconcept = ^join ( ~ currency ) $_pattern = ^join ( \_ $_inconcept ) $_obj = null ^if 00s( ^match ( $_pattern ) ) 01n{ _10 = _0 $_value = ^getconceptvalue ( _10 $_inconcept ) $_obj = ^jsonparse ( $_value ) } 004 _0 = _10 ^return ( $_obj ) `
^currency_glean o 0 0 A( ) ^currency_moneynumber ( ) ^currency_quantunit ( ) ^currency_codequant ( ) ^currency_join ( ) ^currency_number ( ) `
^matchcurrencycode o 0 0 C( ^amount ^currency $$code $$codelc ) @0 = ^query ( exact_v ? currencyCodeConcept ? -1 ) @1 = ^conceptlist ( CONCEPT ^0 ) @2 = ^intersectfacts ( @0 @1subject ) ^if 00q( ^length ( @2 ) > 0 ) 00w{ ^return ( @2object ) } 004 ^if 00a( ^1 ) 030{ $$code = ^pos ( canonical ^1 ) ^if 00u( $$code == unknown-word ) 00n{ $$code = ^1 } 004 $$codelc = ^pos ( lowercase $$code ) ^if 00R( ^query ( exact_sv $$codelc currencyCode ? 1 ) ) 00w{ ^return ( @0object ) } 004 } 004 ^return ( $$code ) `
^formatstreetsuffix o 0 0 B( ^suffix ) ^if 00v( ^0 ? ~addr_streetsuffix ) 01K{ $$ind = ^find ( ~addr_streetsuffix ^0 ) $$propersuffix = ^nth ( ~addr_streetsuffix_out $$ind ) $$propersuffix } 00u else ( 1 ) 00e { ^0 } 004 `
^formatstreetdirection o 0 0 B( ^dir ) ^if 00s( ^0 ? ~addr_direction ) 01y{ $$ind = ^find ( ~addr_direction ^0 ) $$properdir = ^nth ( ~addr_direction_out $$ind ) $$properdir } 00u else ( 1 ) 00e { ^0 } 004 `
^formatstreetunit o 0 0 B( ^unit ) ^if 00q( ^0 ? ~addr_secunit ) 01w{ $$ind = ^find ( ~addr_secunit ^0 ) $$properunit = ^nth ( ~addr_secunit_out $$ind ) $$properunit } 00u else ( 1 ) 00e { ^0 } 004 `
^formatstate o 0 0 B( ^state ) ^if 00u( ^0 ? ~addr_usstatename ) 01C{ $$ind = ^find ( ~addr_usstatename ^0 ) $$properstate = ^nth ( ~addr_usstatecode $$ind ) $$properstate } 00u else ( 1 ) 00e { ^0 } 004 `
^formataddress o 0 0 A( ) $$address_out = ^join ( $$address_out $$streetnumber " " ) $$jsonaddress.Street_Number = $$streetnumber ^if 00m( $$predirection ) 02j{ $$propdir1 = ^formatstreetdirection ( $$predirection ) $$address_out = ^join ( $$address_out $$propdir1 " " ) $$jsonaddress.Street_Pre-Direction = $$propdir1 } 00& else ( 1 ) 00R { $$jsonaddress.Street_Pre-Direction = null } 004 $$propstreetname = ^pos ( noun $$streetname proper ) $$address_out = ^join ( $$address_out $$propstreetname " " ) $$jsonaddress.Street_Name = $$propstreetname $$propstr = ^formatstreetsuffix ( $$streetsuffix ) $$address_out = ^join ( $$address_out $$propstr " " ) $$jsonaddress.Street_Suffix = $$propstr ^if 00n( $$postdirection ) 02l{ $$propdir2 = ^formatstreetdirection ( $$postdirection ) $$address_out = ^join ( $$address_out $$propdir2 " " ) $$jsonaddress.Street_Post-Direction = $$propdir2 } 00* else ( 1 ) 00S { $$jsonaddress.Street_Post-Direction = null } 004 ^if 00i( $$unitname ) 01={ $$propunit = ^formatstreetunit ( $$unitname ) $$address_out = ^join ( $$address_out $$propunit " " ) $$jsonaddress.Unit_Name = $$propunit } 00W else ( 1 ) 00G { $$jsonaddress.Unit_Name = null } 004 ^if 00k( $$unitnumber ) 01y{ $$address_out = ^join ( $$address_out $$unitnumber " " ) $$jsonaddress.Unit_Number = $$unitnumber } 00Y else ( 1 ) 00I { $$jsonaddress.Unit_Number = null } 004 $$propcityname = ^pos ( noun $$cityname proper ) $$address_out = ^join ( $$address_out $$propcityname " " ) $$jsonaddress.City_Name = $$propcityname $$propstate = ^formatstate ( $$statename ) $$address_out = ^join ( $$address_out $$propstate " " ) $$jsonaddress.State_Name = $$propstate $$address_out = ^join ( $$address_out $$zip5 ) $$jsonaddress.Zip_5 = $$zip5 ^if 00e( $$zip4 ) 01e{ $$address_out = ^join ( $$address_out - $$zip4 ) $$jsonaddress.Zip_4 = $$zip4 } 00S else ( 1 ) 00C { $$jsonaddress.Zip_4 = null } 004 `
^get_address o 0 0 A( $_return ) ^respond ( ~us_address_parsing ) $_return = $$address_out ^if 00g( $_return ) 00!{ ^setposition ( _0 $$address_start $$address_start ) } 00B else ( 1 ) 00l { _0 = null } 004 ^return ( $_return ) `
^get_time_zone_value o 0 0 A( $_pattern $_result $_tmz $_length $_sign $_hours $_colon $_mins ) $_pattern = "_~timebasedreference" ^nofail ( RULE $_result = ^result ( ^match ( $_pattern ) ) ) ^if 00t( $_result != NOPROBLEM ) 00s{ ^return ( null ) } 004 $_tmz = ^original ( _0 ) $_length = ^length ( $_tmz ) ^if 00l( $_length != 6 ) 00s{ ^return ( null ) } 004 $_sign = ^extract ( $_tmz 0 1 ) ^if 00D( $_sign != "+" and $_sign != "-" ) 00s{ ^return ( null ) } 004 $_hours = ^extract ( $_tmz 1 3 ) ^if 00k( $_hours > 12 ) 00s{ ^return ( null ) } 004 $_colon = ^extract ( $_tmz 3 4 ) ^if 00m( $_colon != ":" ) 00s{ ^return ( null ) } 004 $_mins = ^extract ( $_tmz 4 6 ) ^if 00*( $_mins != 0 and $_mins != 15 and $_mins != 30 and $_mins != 45 ) 00s{ ^return ( null ) } 004 ^return ( $_tmz ) `
^get_time_zone_name o 0 0 A( $_tmz $_pattern $_result $_name $_index ) $_tmz = null $_pattern = "_~tmzname" ^nofail ( RULE $_result = ^result ( ^match ( $_pattern ) ) ) ^if 00t( $_result == NOPROBLEM ) 01y{ $_name = ^original ( _0 ) $_index = ^find ( ~tmzname $_name ) $_tmz = ^nth ( ~tmzoffset $_index ) } 004 ^return ( $_tmz ) `
^get_time_zone o 0 0 A( $_tmz ) $_tmz = null ^nofail ( RULE $_tmz = ^get_time_zone_value ( ) ) ^if 00f( ! $_tmz ) 00H{ $_tmz = ^get_time_zone_name ( ) } 004 ^return ( $_tmz ) `
^get_date o 0 0 B( ^format $_format ) $_format = ^0 ^if 00i( ! $_format ) 00x{ $_format = yyyy-mm-dd } 004 ^respond ( ~date_time_wrapper ) $$formatted_date = ^format_date ( $_format $$date $$month $$year ) ^if 00o( $$formatted_date ) 02m{ ^setposition ( _0 $$datestart $$dateend ) ^if 00z( $$ambiguity_in_date == true ) 00s{ ^return ( null ) } 00U else ( 1 ) 00E { ^return ( $$formatted_date ) } 004 } 00I else ( 1 ) 00s { ^return ( null ) } 004 `
^get_date_time o 0 0 A( $$existingdate $$existingtime ) ^respond ( ~date_time_wrapper ) ^if 00B( $$date and $$month and $$year ) 00x{ $$existingdate = true } 012 else 00z( $$ambiguity_in_date == true ) 00x{ $$existingdate = true } 004 ^if 012( $$time_computed_hrs and $$time_computed_mins and $$time_computed_secs ) 00x{ $$existingtime = true } 004 ^if 00V( ! $$existingdate and $$existingtime and ! $k-date ) 01O{ ^if 00p( ! $k-default-date ) 01a{ $$date = $$current_date $$month = $$current_month $$year = $$current_year } 004 } 004 ^if 00f( $k-date ) 00C{ $$formatted_date = $k-date } 02& else 00I( $k-default-date and ! $$existingdate ) 00K{ $$formatted_date = $k-default-date } 01N else 00z( $$ambiguity_in_date != true ) 015{ $$formatted_date = ^format_date ( yyyy-MM-dd $$date $$month $$year ) } 004 ^nofail ( RULE $$time_zone = null $$time_zone = ^get_time_zone ( ) ) ^if 00j( $$time_zone ) 01u{ ^if 00p( ! $savedutcoffset ) 00E{ $savedutcoffset = $utcoffset } 004 $utcoffset = $$time_zone } 01G else ( 1 ) 01q { ^if 00n( $savedutcoffset ) 00!{ $utcoffset = $savedutcoffset $savedutcoffset = null } 004 } 004 $$formatted_time = ^format_time ( ) ^if 00o( $$formatted_time ) 08I{ ^if 00T( $$formatted_date or $$ambiguity_in_date == true ) 05B{ ^if 00B( ! $$datestart and ! $$dateend ) 00X{ $$datestart = $$timestart $$dateend = $$timeend } 03C else ( 1 ) 03m { ^if 00z( $$datestart and $$timestart ) 01a{ ^if 00x( $$timestart < $$datestart ) 00B{ $$datestart = $$timestart } 004 } 004 ^if 00v( $$dateend and $$timeend ) 012{ ^if 00t( $$timeend > $$dateend ) 00x{ $$dateend = $$timeend } 004 } 004 } 004 ^setposition ( _0 $$datestart $$dateend ) } 004 ^if 00o( $$formatted_date ) 01j{ $k-default-date = $$formatted_date ^return ( "^$$formatted_date$$formatted_time" ) } 00I else ( 1 ) 00s { ^return ( null ) } 004 } 01Y else 00o( $$formatted_date ) 00~{ $k-datetime = ^"$$formatted_date" ^return ( null ) } 00I else ( 1 ) 00s { ^return ( null ) } 004 `
^get_date_frequency o 0 0 A( ) ^respond ( ~date_time_wrapper ) $$frequency_in_date = ^"date_frequency = $$date_frequency \n month_frequency = $$month_frequency \n year_frequency = $$year_frequency \n days_of_week_to_set = $$days_of_week_to_set \n" ^if 00B( $$date and $$month and $$year ) 02Z{ $$formatted_date = ^format_date ( yyyy-MM-dd $$date $$month $$year ) $$formatted_time = ^format_time ( ) $$frequency_in_date = ^"$$frequency_in_date reference date = $$formatted_date$$formatted_time" } 004 $$frequency_in_date `
^get_time o 0 0 A( ) ^get_current_date_time ( ) ^respond ( ~time_parse ) $$formatted_time = null ^if 00p( $$time_identified ) 00L{ $$formatted_time = ^format_time ( ) } 004 ^if 00o( $$formatted_time ) 017{ ^setposition ( _0 $$timestart $$timeend ) ^return ( $$formatted_time ) } 00I else ( 1 ) 00s { ^return ( null ) } 004 `
^get_time_frequency o 0 0 A( ) ^get_current_date_time ( ) ^respond ( ~time_parse ) `
^get_time_duration o 0 0 A( ) ^get_current_date_time ( ) ^respond ( ~time_parse ) ^"\Duration in secs - $$time_computed_duration_secs \n " ^format_time ( ) `
^get_frequency o 0 0 A( ) $$freq_date = ^get_date_frequency ( ) $$freq_time = ^get_time_frequency ( ) ^"$$freq_date $$freq_time" `
^get_duration o 0 0 A( ) ^respond ( ~date_time_wrapper ) ^if 00i( $$duration ) 00u{ $$duration seconds } 004 `
^get_date_period o 0 0 A( ) ^respond ( ~date_period_parse ) ^if 00p( ! $$error_in_date ) 00@{ ^"\from date: $k-date-from  -  to date: $k-date-to " } 004 `
^setformatdate o 0 0 E( $_format $_0 $_1 $_2 ) ^if 00l( $_format == 0 ) 00^{ $$year = null $$month = null $$date = null ^end ( CALL ) } 04c else 00l( $_format == 1 ) 00P{ $$year = $_0 $$month = $_1 $$date = $_2 } 03a else 00l( $_format == 2 ) 00P{ $$year = $_0 $$month = $_2 $$date = $_1 } 028 else 00l( $_format == 4 ) 00P{ $$year = $_2 $$month = $_0 $$date = $_1 } 016 else 00l( $_format == 8 ) 00P{ $$year = $_2 $$month = $_1 $$date = $_0 } 004 $$month -= 1 ^if 00k( $$year < 100 ) 01n{ ^if 00j( $$year < 50 ) 00q{ $$year += 2000 } 00G else ( 1 ) 00q { $$year += 1900 } 004 } 004 `
^getpaddedleft o 0 0 D( ^inputtext ^pad ^len $$tmp ) $$tmp = ^0 ^loop ( -1 ) 01x { ^if 00u( ^length ( $$tmp ) < ^2 ) 00t{ $$tmp = ^"0$$tmp" } 00F else ( 1 ) 00p { ^end ( LOOP ) } 004 } ^return ( $$tmp ) `
^formatdatetime o 0 0 B( ^showtime ) ^respond ( ~date_time_wrapper ) ^if 00n( $$error_in_date ) 00s{ ^return ( null ) } 07$ else ( 1 ) 07O { ^if 00B( $$year and $$month and $$date ) 01U{ $$month += 1 $$month = ^getpaddedleft ( $$month 0 2 ) $$date = ^getpaddedleft ( $$date 0 2 ) ^"$$year\-$$month\-$$date" } 004 ^if 00f( ^0 == 1 ) 04+{ ^if 012( $$time_computed_hrs and $$time_computed_mins and $$time_computed_secs ) 03U{ $$time_computed_hrs = ^getpaddedleft ( $$time_computed_hrs 0 2 ) $$time_computed_mins = ^getpaddedleft ( $$time_computed_mins 0 2 ) $$time_computed_secs = ^getpaddedleft ( $$time_computed_secs 0 2 ) ^"\T$$time_computed_hrs\:$$time_computed_mins\:$$time_computed_secs\Z" } 004 } 004 } 004 `
^getdatetime o 0 0 A( ) ^formatdatetime ( 1 ) `
^getdate o 0 0 A( ) ^formatdatetime ( 0 ) `
^getfrequency o 0 0 A( ) ^respond ( ~date_time_wrapper ) `
^isleapyear o 0 0 B( ^year ) ^if 00a( ^0 ) 02y{ $$div4 = ^0 % 4 $$div100 = ^0 % 100 $$div400 = ^0 % 400 ^if 00l( $$div400 == 0 ) 00p{ ^return ( 1 ) } 00? else 00B( $$div4 == 0 and $$div100 != 0 ) 00p{ ^return ( 1 ) } 004 } 004 ^fail ( CALL ) `
^getmonthnamefromindex o 0 0 B( ^month_index ) ^if 00v( ^0 ? ~month_names_index ) 026{ $$temp456 = ^find ( ~month_names_index ^0 ) $$month_name_from_index = ^nth ( ~month_proper_names $$temp456 ) ^return ( $$month_name_from_index ) } 00G else ( 1 ) 00q { ^return ( ^0 ) } 004 `
^getmonthindexfromname o 0 0 B( ^month_name ) ^if 00p( ^0 ? ~month_names ) 01~{ $$temp789 = ^find ( ~month_names ^0 ) $$month_index_from_name = ^nth ( ~month_names_index $$temp789 ) $$month_index_from_name } 00u else ( 1 ) 00e { ^0 } 004 `
^getpreviousmonth o 0 0 B( ^month ) $$temp_index = ^0 ^if 00z( $$temp_index ? ~month_names ) 00${ $$temp_index = ^getmonthindexfromname ( $$temp_index ) } 004 $$temp_index -= 1 ^if 00o( $$temp_index < 0 ) 00t{ $$temp_index = 11 } 004 $$temp_index `
^getnextmonth o 0 0 B( ^month ) $$temp_index = ^0 ^if 00z( $$temp_index ? ~month_names ) 00${ $$temp_index = ^getmonthindexfromname ( $$temp_index ) } 004 $$temp_index += 1 ^if 00p( $$temp_index > 11 ) 00s{ $$temp_index = 0 } 004 $$temp_index `
^getdaysinmonth o 0 0 C( ^month ^year ) $$tmp_month = ^0 ^if 00v( ^0 ? ~month_names_index ) 00T{ $$tmp_month = ^getmonthnamefromindex ( ^0 ) } 004 $$tmp123 = ^find ( ~month_proper_names $$tmp_month ) $$daysinmonth = ^nth ( ~daysinmonth $$tmp123 ) ^if 00i( ^1 == null ) 00E{ $$temp_year = $$current_year } 00I else ( 1 ) 00s { $$temp_year = ^1 } 004 ^if 00z( ^isleapyear ( $$temp_year ) ) 01G{ $$feb = ^find ( ~month_proper_names February ) ^if 00p( $$tmp123 == $$feb ) 00u{ $$daysinmonth = 29 } 004 } 004 $$daysinmonth `
^validatedate o 0 0 D( ^date ^month ^year ) ^if 00t( ! $$ambiguity_in_date ) 04J{ ^if 00c( ! ^0 ) 00O{ $$error_in_date = ^"Not a valid date!" } 03L else ( 1 ) 03v { $$error_in_date = null $$date_validate = ^0 $$month_validate = ^1 $$year_validate = ^2 $$daysinmon = ^getdaysinmonth ( $$month_validate $$year_validate ) ^if 00B( $$daysinmon < $$date_validate ) 00O{ $$error_in_date = ^"Not a valid date!" } 004 } 004 } 004 `
^getrelativedate o 0 0 D( ^direction ^time_unit ^units ) ^respond ( ~date_reference ) $$date = $$date_referenced $$month = $$month_referenced $$year = $$year_referenced $$dayinweek = $$dayinweek_referenced $$units = ^2 ^if 00U( $$units == a or $$units == an or $$units == null ) 00n{ $$units = 1 } 004 $$direction = ^0 ^if 00j( $$direction ) 09?{ ^if 00i( ^1 == year ) 00?{ $$year = ^compute ( $$year_referenced $$direction $$units ) } 085 else 00j( ^1 == month ) 00+{ $$month = ^compute ( $$month_referenced $$direction $$units ) } 06W else 00i( ^1 == week ) 019{ $$units *= 7 $$date = ^compute ( $$date_referenced $$direction $$units ) } 05q else 00h( ^1 == day ) 00?{ $$date = ^compute ( $$date_referenced $$direction $$units ) } 048 else 00l( ^1 ? ~dayname ) 03R{ $$temp_dayinweek = ^find ( ~dayname ^1 ) $$temp_dayindex = ^nth ( ~dayindex $$temp_dayinweek ) $$diff = $$temp_dayindex - $$dayinweek ^if 00s( $$direction == minus ) 00o{ $$diff *= -1 } 004 $$diff += $$units $$date = ^compute ( $$date_referenced $$direction $$diff ) } 004 ^notrace ( ^respond ( ~date_overflow ) ) } 004 `
^setdaynamebit o 0 0 C( ^dayname ^days_of_week ) $$sunday = 1 $$monday = 2 $$tuesday = 4 $$wednesday = 8 $$thursday = 16 $$friday = 32 $$saturday = 64 $$tmp_days_of_week = ^1 ^if 00k( ^0 == Sunday ) 00G{ $$tmp_days_of_week |= $$sunday } 05L else 00k( ^0 == Monday ) 00G{ $$tmp_days_of_week |= $$monday } 04T else 00l( ^0 == Tuesday ) 00H{ $$tmp_days_of_week |= $$tuesday } 03Z else 00n( ^0 == Wednesday ) 00J{ $$tmp_days_of_week |= $$wednesday } 02! else 00m( ^0 == Thursday ) 00I{ $$tmp_days_of_week |= $$thursday } 01% else 00k( ^0 == Friday ) 00G{ $$tmp_days_of_week |= $$friday } 010 else 00m( ^0 == Saturday ) 00I{ $$tmp_days_of_week |= $$saturday } 004 $$tmp_days_of_week `
^adddays o 0 0 D( ^units ^dayorweek ^direction ) $$temp_units = ^0 ^if 00M( $$temp_units == a or $$temp_units == the ) 00s{ $$temp_units = 1 } 004 ^if 00i( ^1 == week ) 00t{ $$temp_units *= 7 } 004 ^if 00e( $$date ) 00U{ $$date = ^compute ( $$date ^2 $$temp_units ) } 00# else ( 1 ) 00N { $$error_in_date = "Not a valid date!" } 004 `
^datetosec o 0 0 B( ^date $$year $$month $$date $$abssec ) _0 = ^burst ( ^0 "-" ) $$year = _0 $$month = _1 $$date = _2 $$abssec = ^timetoseconds ( 0 0 0 $$date $$month $$year ) ^return ( $$abssec ) `
^maskoutside o 0 0 C( ^left ^right $_beg $_end ) $_beg = ^0 $_beg -= 1 ^if 00h( $_beg > 0 ) 00U{ ^setposition ( _0 1 $_beg ) ^unmark ( * _0 ) } 004 $_end = ^1 $_end += 1 ^if 00o( $_end <= %length ) 00~{ ^setposition ( _0 $_end %length ) ^unmark ( * _0 ) } 004 `
^get_dp_specialcases o 0 0 A( )  `
^get_dp_year o 0 0 A( $_matchpattern $_result $_start $_end $_year $_date-from $_date-to $_dateperiod ) $_matchpattern = ^getdatematchpattern1 ( ) $_result = ^result ( ^match ( $_matchpattern ) ) ^if 00t( $_result != NOPROBLEM ) 00s{ ^return ( null ) } 004 $_start = ^position ( START _0 ) $_end = ^position ( END _0 ) $_year = _1 $_date-from = ^format_date ( $$format 1 0 $_year ) $_date-to = ^format_date ( $$format 31 11 $_year ) $_dateperiod = ^join ( $_date-from = $_date-to ) ^setposition ( _0 $_start $_end ) ^return ( $_dateperiod ) `
^get_dp_month o 0 0 A( $_matchpattern $_result $_start $_end $_month $_year $_day $_date-from $_date-to $_dateperiod ) $_matchpattern = ^getdatematchpattern2 ( ) $_result = ^result ( ^match ( $_matchpattern ) ) ^if 00t( $_result != NOPROBLEM ) 00s{ ^return ( null ) } 004 $_start = ^position ( START _0 ) $_end = ^position ( END _0 ) $_month = ^getmonthindexfromname ( _1 ) ^get_current_date_time ( ) $_year = $$current_year $_day = ^getdaysinmonth ( $_month $_year ) $_date-from = ^format_date ( $$format 1 $_month $_year ) $_date-to = ^format_date ( $$format $_day $_month $_year ) $_dateperiod = ^join ( $_date-from = $_date-to ) ^setposition ( _0 $_start $_end ) ^return ( $_dateperiod ) `
^get_dp_yearmonth o 0 0 A( $_matchpattern $_result $_month $_year $_start $_end $_day $_date-from $_date-to $_dateperiod ) $_matchpattern = ^getdatematchpattern3 ( ) $_result = ^result ( ^match ( $_matchpattern ) ) ^if 00t( $_result != NOPROBLEM ) 02${ $_matchpattern = ^getdatematchpattern4 ( ) $_result = ^result ( ^match ( $_matchpattern ) ) ^if 00t( $_result != NOPROBLEM ) 00s{ ^return ( null ) } 004 $_month = ^getmonthindexfromname ( _2 ) $_year = _1 } 014 else ( 1 ) 00! { $_month = ^getmonthindexfromname ( _1 ) $_year = _2 } 004 $_start = ^position ( START _0 ) $_end = ^position ( END _0 ) $_day = ^getdaysinmonth ( $_month $_year ) $_date-from = ^format_date ( $$format 1 $_month $_year ) $_date-to = ^format_date ( $$format $_day $_month $_year ) $_dateperiod = ^join ( $_date-from = $_date-to ) ^setposition ( _0 $_start $_end ) ^return ( $_dateperiod ) `
^get_dp_totodayabsolute o 0 0 A( $_matchpattern $_result $_date-to $_start $_left $_right $_date-from $_end $_dateperiod ) $_matchpattern = ^getdatematchpattern5 ( ) $_result = ^result ( ^match ( $_matchpattern ) ) ^if 00t( $_result != NOPROBLEM ) 00s{ ^return ( null ) } 004 _10 = _0 _11 = _1 ^get_current_date_time ( ) $_date-to = ^format_date ( $$format $$current_date $$current_month $$current_year ) $_start = ^position ( START _10 ) $_left = ^position ( START _11 ) $_right = ^position ( END _11 ) ^maskoutside ( $_left $_right ) $_date-from = ^get_date ( $$format ) ^mark ( ) $_end = ^position ( END _0 ) $_dateperiod = ^join ( $_date-from = $_date-to ) ^setposition ( _0 $_start $_end ) ^return ( $_dateperiod ) `
^get_dp_fromtodayabsolute o 0 0 A( $_matchpattern $_result $_date-from $_start $_left $_right $_date-to $_end $_dateperiod ) $_matchpattern = ^getdatematchpattern6 ( ) $_result = ^result ( ^match ( $_matchpattern ) ) ^if 00t( $_result != NOPROBLEM ) 00s{ ^return ( null ) } 004 _10 = _0 _11 = _1 ^get_current_date_time ( ) $_date-from = ^format_date ( $$format $$current_date $$current_month $$current_year ) $_start = ^position ( START _10 ) $_left = ^position ( START _11 ) $_right = ^position ( END _11 ) ^maskoutside ( $_left $_right ) $_date-to = ^get_date ( $$format ) ^mark ( ) $_end = ^position ( END _0 ) $_dateperiod = ^join ( $_date-from = $_date-to ) ^setposition ( _0 $_start $_end ) ^return ( $_dateperiod ) `
^get_dp_lastperiod o 0 0 A( $_matchpattern $_result $_start $_end $_num $_unit $_year $_date-to $_date-from $_dateperiod ) $_matchpattern = ^getdatematchpattern7 ( ) $_result = ^result ( ^match ( $_matchpattern ) ) ^if 00t( $_result != NOPROBLEM ) 00s{ ^return ( null ) } 004 $_start = ^position ( START _0 ) $_end = ^position ( END _0 ) ^if 00a( _1 ) 00m{ $_num = _1 } 00B else ( 1 ) 00l { $_num = 1 } 004 $_unit = _2 ^get_current_date_time ( ) ^if 00m( $_unit == year ) 02n{ $_year = $$current_year - 1 $_date-to = ^format_date ( $$format 31 11 $_year ) $_year = $$current_year - $_num $_date-from = ^format_date ( $$format 1 0 $_year ) } 0c7 else 00n( $_unit == month ) 041{ $$time_reference = first ^getrelativedate ( minus month $_num ) $_date-from = ^format_date ( $$format $$date $$month $$year ) $$time_reference = first ^getrelativedate ( minus month 1 ) $$date = ^getdaysinmonth ( $$month $$year ) $_date-to = ^format_date ( $$format $$date $$month $$year ) } 07R else 00m( $_unit == week ) 03H{ $$time_reference = Sunday $_num *= 7 ^getrelativedate ( minus day $_num ) $_date-from = ^format_date ( $$format $$date $$month $$year ) $$time_reference = Saturday ^getrelativedate ( minus day 7 ) $_date-to = ^format_date ( $$format $$date $$month $$year ) } 03W else 00l( $_unit == day ) 03s{ $$time_reference = today ^getrelativedate ( minus day $_num ) $_date-from = ^format_date ( $$format $$date $$month $$year ) $$time_reference = today ^getrelativedate ( minus day 1 ) $_date-to = ^format_date ( $$format $$date $$month $$year ) } 004 $_dateperiod = ^join ( $_date-from = $_date-to ) ^setposition ( _0 $_start $_end ) ^return ( $_dateperiod ) `
^get_dp_nextperiod o 0 0 A( $_matchpattern $_result $_start $_end $_num $_unit $_year $_date-to $_date-from $_dateperiod ) $_matchpattern = ^getdatematchpattern8 ( ) $_result = ^result ( ^match ( $_matchpattern ) ) ^if 00t( $_result != NOPROBLEM ) 00s{ ^return ( null ) } 004 $_start = ^position ( START _0 ) $_end = ^position ( END _0 ) ^if 00a( _1 ) 00m{ $_num = _1 } 00B else ( 1 ) 00l { $_num = 1 } 004 $_unit = _2 ^get_current_date_time ( ) ^if 00m( $_unit == year ) 02n{ $_year = $$current_year + $_num $_date-to = ^format_date ( $$format 31 11 $_year ) $_year = $$current_year + 1 $_date-from = ^format_date ( $$format 1 0 $_year ) } 0c1 else 00n( $_unit == month ) 03={ $$time_reference = first ^getrelativedate ( plus month 1 ) $_date-from = ^format_date ( $$format $$date $$month $$year ) $$time_reference = first ^getrelativedate ( plus month $_num ) $$date = ^getdaysinmonth ( $$month $$year ) $_date-to = ^format_date ( $$format $$date $$month $$year ) } 07N else 00m( $_unit == week ) 03F{ $$time_reference = Sunday ^getrelativedate ( plus day 7 ) $_date-from = ^format_date ( $$format $$date $$month $$year ) $_num *= 7 $$time_reference = Saturday ^getrelativedate ( plus day $_num ) $_date-to = ^format_date ( $$format $$date $$month $$year ) } 03U else 00l( $_unit == day ) 03q{ $$time_reference = today ^getrelativedate ( plus day 1 ) $_date-from = ^format_date ( $$format $$date $$month $$year ) $$time_reference = today ^getrelativedate ( plus day $_num ) $_date-to = ^format_date ( $$format $$date $$month $$year ) } 004 $_dateperiod = ^join ( $_date-from = $_date-to ) ^setposition ( _0 $_start $_end ) ^return ( $_dateperiod ) `
^get_dp_thisperiod o 0 0 A( $_matchpattern $_result $_start $_end $_unit $_date-to $_date-from $_dateperiod ) $_matchpattern = ^getdatematchpattern9 ( ) $_result = ^result ( ^match ( $_matchpattern ) ) ^if 00t( $_result != NOPROBLEM ) 00s{ ^return ( null ) } 004 $_start = ^position ( START _0 ) $_end = ^position ( END _0 ) $_unit = _1 ^get_current_date_time ( ) $_date-to = ^format_date ( $$format $$current_date $$current_month $$current_year ) ^if 00m( $_unit == year ) 00*{ $_date-from = ^format_date ( $$format 1 0 $$current_year ) } 05n else 00n( $_unit == month ) 019{ $_date-from = ^format_date ( $$format 1 $$current_month $$current_year ) } 03Z else 00m( $_unit == week ) 01V{ $$time_reference = Sunday ^getrelativedate ( minus day 0 ) $_date-from = ^format_date ( $$format $$date $$month $$year ) } 01Q else 00l( $_unit == day ) 01m{ $_date-from = ^format_date ( $$format $$current_date $$current_month $$current_year ) } 004 $_dateperiod = ^join ( $_date-from = $_date-to ) ^setposition ( _0 $_start $_end ) ^return ( $_dateperiod ) `
^get_dp_relativeforward o 0 0 A( $_matchpattern $_result $_start $_left $_right $_date-from $_date-to $_end $_dateperiod ) $_matchpattern = ^getdatematchpattern10 ( ) $_result = ^result ( ^match ( $_matchpattern ) ) ^if 00t( $_result != NOPROBLEM ) 00s{ ^return ( null ) } 004 _10 = _0 _11 = _1 _12 = _2 _13 = _3 _14 = _4 $_start = ^position ( START _10 ) $_left = ^position ( START _14 ) $_right = ^position ( END _14 ) ^maskoutside ( $_left $_right ) $_date-from = ^get_date ( $$format ) ^mark ( ) $_left = ^position ( START _11 ) $_right = ^position ( END _14 ) ^maskoutside ( $_left $_right ) $_date-to = ^get_date ( $$format ) ^mark ( ) $_end = ^position ( END _0 ) $_dateperiod = ^join ( $_date-from = $_date-to ) ^setposition ( _0 $_start $_end ) ^return ( $_dateperiod ) `
^get_dp_relativebackward o 0 0 A( $_matchpattern $_result $_start $_left $_right $_date-from $_date-to $_end $_dateperiod ) $_matchpattern = ^getdatematchpattern11 ( ) $_result = ^result ( ^match ( $_matchpattern ) ) ^if 00t( $_result != NOPROBLEM ) 00s{ ^return ( null ) } 004 _10 = _0 _11 = _1 _12 = _2 _13 = _3 _14 = _4 $_start = ^position ( START _10 ) $_left = ^position ( START _11 ) $_right = ^position ( END _14 ) ^maskoutside ( $_left $_right ) $_date-from = ^get_date ( $$format ) ^mark ( ) $_left = ^position ( START _14 ) $_right = ^position ( END _14 ) ^maskoutside ( $_left $_right ) $_date-to = ^get_date ( $$format ) ^mark ( ) $_end = ^position ( END _0 ) $_dateperiod = ^join ( $_date-from = $_date-to ) ^setposition ( _0 $_start $_end ) ^return ( $_dateperiod ) `
^get_dp_absolute o 0 0 A( $_matchpattern $_result $_start $_left $_right $_date-from $_date-to $_end $_dateperiod ) $_matchpattern = ^getdatematchpattern12 ( ) $_result = ^result ( ^match ( $_matchpattern ) ) ^if 00t( $_result != NOPROBLEM ) 00s{ ^return ( null ) } 004 _10 = _0 _11 = _1 _12 = _2 _13 = _3 $_start = ^position ( START _10 ) $_left = ^position ( START _11 ) $_right = ^position ( END _11 ) ^maskoutside ( $_left $_right ) $_date-from = ^get_date ( $$format ) ^mark ( ) $_left = ^position ( START _13 ) $_right = ^position ( END _13 ) ^maskoutside ( $_left $_right ) $_date-to = ^get_date ( $$format ) ^mark ( ) $_end = ^position ( END _0 ) $_dateperiod = ^join ( $_date-from = $_date-to ) ^setposition ( _0 $_start $_end ) ^return ( $_dateperiod ) `
^get_dateperiod o 0 0 B( ^format $_dateperiod ) $$format = ^0 $$error_in_date = null $_dateperiod = null ^if 00m( ! $_dateperiod ) 00L{ $_dateperiod = ^get_dp_absolute ( ) } 004 ^if 00m( ! $_dateperiod ) 00T{ $_dateperiod = ^get_dp_relativebackward ( ) } 004 ^if 00m( ! $_dateperiod ) 00S{ $_dateperiod = ^get_dp_relativeforward ( ) } 004 ^if 00m( ! $_dateperiod ) 00S{ $_dateperiod = ^get_dp_totodayabsolute ( ) } 004 ^if 00m( ! $_dateperiod ) 00U{ $_dateperiod = ^get_dp_fromtodayabsolute ( ) } 004 ^if 00m( ! $_dateperiod ) 00N{ $_dateperiod = ^get_dp_thisperiod ( ) } 004 ^if 00m( ! $_dateperiod ) 00N{ $_dateperiod = ^get_dp_lastperiod ( ) } 004 ^if 00m( ! $_dateperiod ) 00N{ $_dateperiod = ^get_dp_nextperiod ( ) } 004 ^if 00m( ! $_dateperiod ) 00M{ $_dateperiod = ^get_dp_yearmonth ( ) } 004 ^if 00m( ! $_dateperiod ) 00H{ $_dateperiod = ^get_dp_year ( ) } 004 ^if 00m( ! $_dateperiod ) 00I{ $_dateperiod = ^get_dp_month ( ) } 004 ^if 00m( ! $_dateperiod ) 00P{ $_dateperiod = ^get_dp_specialcases ( ) } 004 ^return ( $_dateperiod ) `
^convert_hrs_mins_secs_to_secs o 0 0 D( ^ip_hrs ^ip_mins ^ip_secs ) $$op_secs = null $$op_secs = ^2 ^if 00a( ^1 ) 00U{ $$tmp_secs = ^1 * 60 $$op_secs += $$tmp_secs } 004 ^if 00a( ^0 ) 01a{ $$tmp_mins = ^0 * 60 $$tmp_secs = $$tmp_mins * 60 $$op_secs += $$tmp_secs } 004 $$op_secs `
^convert_secs_to_hrs_mins_secs o 0 0 B( ^ip_secs ) $$time_tmp_secs = ^0 * 1 ^if 00n( $$time_tmp_secs ) 06k{ ^if 00r( $$time_tmp_secs < 0 ) 01I{ $$time_computed_days -= 1 $$time_tmp_secs = ^convert_hrs_mins_secs_to_secs ( 24 0 0 ) $$time_tmp_secs += ^0 } 004 $$time_computed_secs = $$time_tmp_secs % 60 $$tmp_val = $$time_tmp_secs / 60 $$time_computed_mins = $$tmp_val % 60 $$time_computed_hrs = $$tmp_val / 60 ^if 00x( $$time_computed_hrs >= 24 ) 01j{ $$time_tmp_days = $$time_computed_hrs / 24 $$time_computed_days += $$time_tmp_days } 004 $$time_computed_hrs %= 24 } 004 `
^identify_clock_units o 0 0 C( ^ip_number ^ip_clock_unit ) ^if 00z( ^1 == o'clock or ^1 == hour ) 00C{ $$time_hrs_identified = ^0 } 01V else 00k( ^1 == minute ) 00D{ $$time_mins_identified = ^0 } 00^ else 00k( ^1 == second ) 00D{ $$time_secs_identified = ^0 } 004 `
^convert_pm_time_to_military_time o 0 0 C( ^ip_day_unit ^ip_num_hrs ) $$time_new_hrs = ^1 ^if 00f( ^1 < 12 ) 02@{ ^if 01m( ^0 == p.m. or ^0 == afternoon or ^0 == noon or ^0 == evening or ^0 == even or ^0 == night ) 01r{ $$time_new_hrs = ^1 + 12 ^if 00u( ^0 == night and ^1 < 6 ) 00w{ $$time_new_hrs -= 12 } 004 } 004 } 01s else 00g( ^1 == 12 ) 013{ ^if 00x( ^0 == a.m. or ^0 == night ) 00u{ $$time_new_hrs = 0 } 004 } 004 $$time_new_hrs `
^adjust_time_as_per_day_unit o 0 0 E( ^ip_day_unit ^ip_num_hrs ^ip_num_mins ^ip_num_secs ) $$time_hrs_identified = ^1 ^if 00i( ^0 != null ) 014{ $$time_hrs_identified = ^convert_pm_time_to_military_time ( ^0 ^1 ) } 004 $$time_mins_identified = ^2 $$time_secs_identified = 0 ^if 00f( ^3 < 10 ) 00E{ $$time_mins_identified += ^3 } 00T else ( 1 ) 00D { $$time_secs_identified = ^3 } 004 `
^tokenize_to_hrs_mins_secs o 0 0 C( ^ip_string ^ip_day_unit ) $$tmp_day_unit = ^1 _19 = ^burst ( count ^0 : ) ^if 00g( _19 == 3 ) 01E{ _0 = ^burst ( ^0 : ) $$time_hrs_identified = _0 $$time_mins_identified = _1 $$time_secs_identified = _2 } 01@ else 00g( _19 == 2 ) 01D{ _0 = ^burst ( ^0 : ) $$time_hrs_identified = _0 $$time_mins_identified = _1 $$time_secs_identified = 0 } 004 ^if 00u( $$tmp_day_unit != null ) 01z{ $$time_hrs_identified = ^convert_pm_time_to_military_time ( $$tmp_day_unit $$time_hrs_identified ) } 004 `
^compute_duration o 0 0 G( ^ip_from_hrs ^ip_from_mins ^ip_from_secs ^ip_to_hrs ^ip_to_mins ^ip_to_secs ) $$tmp_from_secs = ^convert_hrs_mins_secs_to_secs ( ^0 ^1 ^2 ) $$tmp_to_secs = ^convert_hrs_mins_secs_to_secs ( ^3 ^4 ^5 ) $$time_computed_total_secs = ^compute ( $$tmp_to_secs $$time_hint_direction $$tmp_from_secs ) `
^compute_relative_time o 0 0 G( ^ip_hrs ^ip_mins ^ip_secs ^ip_base_hrs ^ip_base_mins ^ip_base_secs ) ^compute_duration ( ^0 ^1 ^2 ^3 ^4 ^5 ) `
^compute_relative_to_base o 0 0 A( ) ^compute_relative_time ( $$time_hrs_identified $$time_mins_identified $$time_secs_identified $$time_base_hrs $$time_base_mins $$time_base_secs ) `
^assign_time_to_base o 0 0 D( ^ip_hrs ^ip_mins ^ip_secs ) $$time_base_hrs = ^0 $$time_base_mins = ^1 $$time_base_secs = ^2 `
^compute_relative_to_now o 0 0 A( ) ^assign_time_to_base ( $$time_current_hrs $$time_current_mins $$time_current_secs ) ^compute_relative_to_base ( ) `
^get_time_portion_value o 0 0 B( ^ip_portion ) $$tmp_value = 0 ^if 00l( ^0 == quarter ) 00s{ $$tmp_value = 15 } 00T else 00i( ^0 == half ) 00s{ $$tmp_value = 30 } 004 $$tmp_value `
^parse_compute_duration o 0 0 A( ) ^unmark ( * _16 ) ^respond ( ~time_identification ) $$time_from_hrs = $$time_hrs_identified $$time_from_mins = $$time_mins_identified $$time_from_secs = $$time_secs_identified $$time_from_day_unit = $$time_day_unit ^mark ( * _16 ) ^unmark ( * _15 ) ^respond ( ~time_identification ) $$time_to_hrs = $$time_hrs_identified $$time_to_mins = $$time_mins_identified $$time_to_secs = $$time_secs_identified $$time_to_day_unit = $$time_day_unit ^mark ( * _15 ) ^if 00%( $$time_from_day_unit == null and $$time_to_day_unit != null ) 03X{ ^if 00s( $$time_from_hrs < 12 ) 03g{ ^if 02H( $$time_to_day_unit == p.m. or $$time_to_day_unit == afternoon or $$time_to_day_unit == noon or $$time_to_day_unit == evening or $$time_to_day_unit == even or $$time_to_day_unit == night ) 00x{ $$time_from_hrs += 12 } 004 } 004 } 04^ else 00%( $$time_from_day_unit != null and $$time_to_day_unit == null ) 03%{ ^if 00q( $$time_to_hrs < 12 ) 03q{ ^if 02T( $$time_from_day_unit == p.m. or $$time_from_day_unit == afternoon or $$time_from_day_unit == noon or $$time_from_day_unit == evening or $$time_from_day_unit == even or $$time_from_day_unit == night ) 00v{ $$time_to_hrs += 12 } 004 } 004 } 004 $$time_hint_direction = - ^compute_duration ( $$time_from_hrs $$time_from_mins $$time_from_secs $$time_to_hrs $$time_to_mins $$time_to_secs ) ^if 00D( $$time_from_hrs > $$time_to_hrs ) 01w{ $$tmp_secs = ^convert_hrs_mins_secs_to_secs ( 24 0 0 ) $$time_computed_total_secs += $$tmp_secs } 004 $$time_computed_duration_secs = $$time_computed_total_secs `
^set_frequency_with_value o 0 0 C( ^ip_clock_unit ^ip_value ) ^if 00i( ^0 != null ) 03k{ ^if 00x( ^0 == hour or ^0 == hours ) 00B{ $$time_frequency_hrs = ^1 } 02e else 00B( ^0 == minute or ^0 == minutes ) 00C{ $$time_frequency_mins = ^1 } 019 else 00B( ^0 == second or ^0 == seconds ) 00C{ $$time_frequency_secs = ^1 } 004 } 004 `
^get_direction o 0 0 B( ^ip_token ) $$tmp_direction = + ^if 00i( ^0 != null ) 01?{ ^if 01p( ^0 == prior or ^0 == before or ^0 == of or ^0 == until or ^0 == til or ^0 == ago or ^0 == to ) 00v{ $$tmp_direction = - } 004 } 004 $$tmp_direction `
^get_place_value o 0 0 B( ^ip_token ) $$time_tmp_value = 0 ^if 00i( ^0 != null ) 03q{ ^if 00h( ^0 == ten ) 00x{ $$time_tmp_value = 10 } 02E else 00l( ^0 == hundred ) 00y{ $$time_tmp_value = 100 } 01T else 00m( ^0 == thousand ) 00z{ $$time_tmp_value = 1000 } 00^ else 00l( ^0 == million ) 00C{ $$time_tmp_value = 1000000 } 004 } 004 $$time_tmp_value `
^settimestartposition o 0 0 B( ^startpos ) ^if 00s( ^0 and ! $$timestart ) 00M{ $$timestart = ^position ( START ^0 ) } 004 `
^settimeendposition o 0 0 B( ^endpos ) ^if 00a( ^0 ) 00I{ $$timeend = ^position ( END ^0 ) } 004 `
^getpatternmatchposition o 0 0 B( $_pattern $_result $_start $_end ) _0 = null $_result = ^result ( ^match ( $_pattern ) ) ^if 00A( $_result == NOPROBLEM and _0 ) 025{ $_start = ^position ( START _0 ) $_end = ^position ( END _0 ) ^return ( ^getpositionfromsentenceandrange ( $currentsentenceid $_start $_end ) ) } 00I else ( 1 ) 00s { ^return ( null ) } 004 `
^parsetimepatterns o 0 0 A( $_sentenceindex $_sentencecount $_sentencelength $_start $_len $_patternindex $_pattern ) $_sentenceindex = $gleaninfo.unprocessed $_sentencecount = ^length ( $gleaninfo.sentences ) - $_sentenceindex ^loop ( $_sentencecount ) 03T { ^restoregleansentence ( $_sentenceindex ) $_sentencelength = %length $_start = 0 ^loop ( $_sentencelength ) 02e { $_len = ^length ( $timepatterns ) $_patternindex = $_len ^loop ( $_len ) 00* { $_patternindex -= 1 $_pattern = $timepatterns[$_patternindex] } $_start += 1 } } `
^scantimeconceptsequences o 0 0 A( )  `
^scantimeconcepts o 0 0 A( $_sentenceindex $_sentencecount $_timeprefix $_timeconcept $_name $_value $_startindex $_endindex $_position $_input $_timeobject ) $_sentenceindex = $gleaninfo.unprocessed $_sentencecount = ^length ( $gleaninfo.sentences ) - $_sentenceindex ^loop ( $_sentencecount ) 09X { ^restoregleansentence ( $_sentenceindex ) $_timeprefix = ^join ( ~ timeconcept- ) ^setposition ( _0 1 %length ) @0 = ^conceptlist ( CONCEPT _0 $_timeprefix ) ^loop ( -1 ) 079 { _10 = ^first ( @0all ) ^if 00d( ! _10 ) 00p{ ^end ( loop ) } 004 $_timeconcept = _10 _0 = ^burst ( $_timeconcept - ) $_name = _1 $_value = _2 $_startindex = _12 >> 8 $_endindex = _12 & 255 $_position = ^getpositionfromsentenceandrange ( $_sentenceindex $_startindex $_endindex ) ^setposition ( _0 $_startindex $_endindex ) $_input = ^original ( _0 ) $_timeobject = ^jsonparse ( ^'{ position: $_position, name: "$_name",  value: "$_value", input: "$_input" }' ) ^jsonarrayinsert ( permanent $timeparser.timeinfo $_timeobject ) } $_sentenceindex += 1 } `
^resettimeparser o 0 0 A( ) ^if 00j( $timeparser ) 00z{ ^delete ( $timeparser ) } 004 $timeparser = ^jsoncreate ( permanent object ) $timeparser.volleytime = null `
^resetvolleytimeinfo o 0 0 A( $_sentencecount ) ^if 00l( ! $timeparser ) 00w{ ^resettimeparser ( ) } 004 ^if 00s( $timeparser.timeinfo ) 00F{ ^delete ( $timeparser.times ) } 004 $timeparser.timeinfo = ^jsoncreate ( permanent array ) ^if 00w( ! $gleaninfo.unprocessed ) 00s{ ^return ( null ) } 004 $_sentencecount = ^length ( $gleaninfo.sentences ) - $gleaninfo.unprocessed ^if 00p( ! $_sentencecount ) 00s{ ^return ( null ) } 004 $timeparser.position = 0 ^return ( 1 ) `
^timeparser o 0 0 A( $_return ) $_return = ^resetvolleytimeinfo ( ) ^if 00g( $_return ) 00U{ ^scantimeconcepts ( ) ^parsetimepatterns ( ) } 004 `
^parse_address o 0 0 B( ^ip_country ) ^if 00i( ^0 == U.S. ) 00G{ ^respond ( ~address_parse_us ) } 00+ else 00j( ^0 == india ) 00J{ ^respond ( ~address_parse_india ) } 004 `
^tokenize_to_us_state_zip_code o 0 0 B( ^ip_string ) _19 = ^burst ( count ^0 " " ) ^if 00g( _19 == 4 ) 01z{ _0 = ^burst ( ^0 " " ) $$address_state_name = _0 $$address_zip_code = _1 $$address_zip_4_code = _3 } 004 `
^get_location o 0 0 A( $_address $_locationpatternarray ) $_address = ^get_address ( ) ^if 00h( $_address ) 00x{ ^return ( $_address ) } 004 $_locationpatternarray = ^getlocationpatternarray ( ) $_locationpatternarray = ^matchpatternarray ( $_locationpatternarray ) ^return ( $_locationpatternarray ) `
^get_company o 0 0 A( $_companypatternarray ) $_companypatternarray = ^getcompanypatternarray ( ) $_companypatternarray = ^matchpatternarray ( $_companypatternarray ) ^return ( $_companypatternarray ) `
^addtoplevelread o 0 0 D( $_word $_position $_volleyposition ) ^if 00u( $_word == unknown-word ) 00p{ ^end ( CALL ) } 004 ^if 00E( ! $gleaninfo.toplevelread.$_word ) 011{ $gleaninfo.toplevelread.$_word = ^jsoncreate ( PERMANENT array ) } 004 ^jsonarrayinsert ( "PERMANENT UNIQUE" $gleaninfo.toplevelread.$_word $_position ) ^if 00l( $$volleyglean ) 033{ ^if 00H( ! $$volleyglean.toplevelread.$_word ) 014{ $$volleyglean.toplevelread.$_word = ^jsoncreate ( TRANSIENT array ) } 004 ^jsonarrayinsert ( "TRANSIENT UNIQUE" $$volleyglean.toplevelread.$_word $_volleyposition ) } 004 `
^topglean o 0 0 A( $_wordindex $_gleanposition $_volleyposition $_word $_canon $_botprefix $_botname $_conceptname $_start $_end $_position $_xref $_lcword ) $_wordindex = ^position ( start _0 ) $_gleanposition = ^getpositionfromsentenceandindex ( $$gleansentenceindex $_wordindex ) ^if 00l( $$volleyglean ) 01v{ $_volleyposition = ^getpositionfromsentenceandindex ( $$volleygleansentenceindex $_wordindex ) } 004 $_word = '_0 $_canon = _0 ^if 00h( ! $_canon ) 00s{ $_canon = $_word } 004 $_botprefix = ^join ( ~ bot- ) ^if 00n( $nonkorabotname ) 00D{ $_botname = $nonkorabotname } 004 ^if 00h( $_botname ) 01t{ $_botprefix = ^join ( $_botprefix $_botname - ) $_botprefix = ^pos ( lowercase $_botprefix ) } 004 @0 = ^conceptlist ( CONCEPT _0 $_botprefix ) ^loop ( -1 ) 0gq { _10 = ^first ( @0all ) $_conceptname = _10 ^if 00!( ^substitute ( character $_conceptname -field- xx fail ) ) 05^{ $_start = _12 >> 8 $_end = _12 & 255 $_position = ^getpositionfromsentenceandrange ( $$gleansentenceindex $_start $_end ) ^jsonobjectinsert ( "PERMANENT DUPLICATE" $gleaninfo.fieldread $_conceptname $_position ) ^if 00l( $$volleyglean ) 02J{ $_position = ^getpositionfromsentenceandrange ( $$volleygleansentenceindex $_start $_end ) ^jsonobjectinsert ( "TRANSIENT DUPLICATE" $$volleyglean.fieldread $_conceptname $_position ) } 004 } 08& else ( 1 ) 08R { ^addtoplevelread ( $_conceptname $_gleanposition $_volleyposition ) $_botname = ^burst ( once $_conceptname -task ) $_botname = ^substitute ( character $_botname "^\~bot-" "" ) $_xref = ^join ( $_botname -xref ) ^if 00z( ! $gleaninfo.botxref.$_xref ) 00?{ $gleaninfo.botxref.$_xref = ^jsoncreate ( PERMANENT array ) } 004 ^jsonarrayinsert ( "PERMANENT UNIQUE" $gleaninfo.botxref.$_xref $_gleanposition ) ^if 00l( $$volleyglean ) 02!{ ^if 00C( ! $$volleyglean.botxref.$_xref ) 00={ $$volleyglean.botxref.$_xref = ^jsoncreate ( TRANSIENT array ) } 004 ^jsonarrayinsert ( "TRANSIENT UNIQUE" $$volleyglean.botxref.$_xref $_volleyposition ) } 004 } 004 } ^if 00k( $_word == me ) 00&{ ^addtoplevelread ( you $_gleanposition $_volleyposition ) } 004 $_lcword = ^pos ( lowercase $_canon ) ^addtoplevelread ( $_lcword $_gleanposition $_volleyposition ) $_lcword = ^pos ( lowercase $_word ) ^addtoplevelread ( $_lcword $_gleanposition $_volleyposition ) $gleaninfo.inputwords.$_gleanposition = $_lcword ^if 00l( $$volleyglean ) 00@{ $$volleyglean.inputwords.$_volleyposition = $_lcword } 004 _18 = ^burst ( count $_lcword _ ) ^if 00f( _18 > 1 ) 026{ @19 = ^burst ( $_lcword _ ) ^loop ( -1 ) 01t { $_lcword = ^first ( @19subject ) ^addtoplevelread ( $_lcword $_gleanposition $_volleyposition ) } } 004 `
^menuglean o 0 0 C( $_wordindex $_concept $_word ) ^loop ( -1 ) 04- { $_word = ^first ( @2subject ) ^if 00j( ! $_concept ) 01v{ $_word = ^pos ( lowercase $_word ) ^if 00u( $_word == unknown-word ) 00q{ ^next ( LOOP ) } 004 } 004 ^jsonobjectinsert ( "PERMANENT DUPLICATE" $gleaninfo.menuread $_wordindex $_word ) ^if 00l( $$volleyglean ) 01m{ ^jsonobjectinsert ( "TRANSIENT DUPLICATE" $$volleyglean.menuread $_wordindex $_word ) } 004 } `
^splitsentence o 0 0 C( $_thisinput $_nextinput ) ^if 00z( $_thisinput and $_nextinput ) 01n{ $$splitsentences += 1 ^input ( $_nextinput ) ^analyze ( $_thisinput ) ^retry ( TOPIC ) } 00H else ( 1 ) 00r { ^retry ( RULE ) } 004 `
^vlog o 0 0 C( ^key ^value ) ^log ( FILE LOGS/vlog.txt "^||||| input: %originalinput ||||||\n" ) ^log ( FILE LOGS/vlog.txt "^||||| date: %date | time: %time ||||||\n" ) ^log ( FILE LOGS/vlog.txt "^^0 -:- ^1\n" ) ^log ( FILE LOGS/vlog.txt "^||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n" ) `
^addjsonfailure o 0 0 E( ^method ^url ^data ^payload $_obj ) ^if 00o( ! $$jsonfailures ) 02h{ $$jsonfailures = ^jsoncreate ( transient array ) ^if 00f( ! $$oob ) 00Q{ $$oob = ^jsoncreate ( transient object ) } 004 $$oob.api_failures = $$jsonfailures } 004 $_obj = ^jsoncreate ( transient object ) ^jsonarrayinsert ( transient $$jsonfailures $_obj ) $_obj.method = ^0 $_obj.url = ^1 $_obj.channelInfo = $$channelinfo $_obj.authToken = $authorization ^if 00a( ^3 ) 00u{ $_obj.payload = ^3 } 004 $_obj.data = ^jsoncopy ( TRANSIENT ^2 ) ^delete ( ^2 ) `
^note_permanent_facts o 0 0 B( $_json ) ^if 00T( $taskinfo and $_json and ^length ( $_json ) > 0 ) 03w{ ^if 00t( ! $taskinfo.permanent ) 00#{ $taskinfo.permanent = ^jsoncreate ( PERMANENT array ) } 004 ^if 00z( ^istransientjson ( $_json ) ) 00P{ $_json = ^jsoncopy ( PERMANENT $_json ) } 004 ^jsonarrayinsert ( PERMANENT $taskinfo.permanent $_json ) } 004 ^return ( $_json ) `
^cannot_do_request o 0 0 B( ^message $$count ) ^flushoutput ( ) ^notrace ( ^reuse ( ~no_task.do_reset_lead ) ) ^disable ( outputrejoinder ) ^disable ( inputrejoinder ) ^norejoinder ( ) $$count = 1 ^loop ( %response ) 00Q { ^reviseoutput ( $$count null ) $$count += 1 } ^senderrorsummary ( ^0 ) ^notrace ( ^reuse ( ~no_task.now_what ) ) ^fail ( INPUT ) `
^show_failed_response o 0 0 E( ^postdata ^responsejson ^caller ^msg $_tmpauthrequired $_tmperrorstring $_tmpvalue $_tmp1 $_tmp2 $_response $_intents $_taskobj $_entities $_botexplain $_tmpmodified ) $$caller = ^2 $$msg = ^3 $$httpresponse = %httpresponse ^if 01N( %httpresponse == 420 or %httpresponse == 403 or %httpresponse == 401 or %httpresponse == 101 or %httpresponse == 100 ) 0et{ $_tmpauthrequired = true ^if 00s( %httpresponse == 420 ) 0c8{ $_tmpauthrequired = false $$tmpmsg = ^3 $_tmperrorstring = ^jsonpath ( ".errors[0].msg" ^1 ) $_tmpvalue = null ^if 00F( $_tmperrorstring == "reauthorize" ) 03a{ $$tmpmsg = $_tmperrorstring $_tmpauthrequired = true $$oob.currentAccountLabel = $taskinfo.contextJson.accountnametouse $$oob.currentAccountId = $taskinfo.contextJson.accountidtouse $$oob.taskInstanceId = $taskinfo.dialogId } 06Y else ( 1 ) 06I { ^nofail ( RULE $_tmperrorstring = ^substitute ( character $_tmperrorstring \\ "" ) ) ^if 00o( $_tmperrorstring ) 02#{ $$tmpmsg = $_tmperrorstring $_tmp1 = ^jsonparse ( NOFAIL $_tmperrorstring ) $_tmp2 = $_tmp1.clientActions $_tmpvalue = $_tmp2[0] ^if 00z( $_tmpvalue == "reauthorize" ) 00A{ $_tmpauthrequired = true } 004 } 004 $$oob.currentAccountLabel = $taskinfo.accountnametouse $$oob.currentAccountId = $taskinfo.currentaccountid $$oob.taskInstanceId = $taskinfo.taskinstanceid } 004 } 004 ^insertjsontypedvalue ( $$oob authRequired $_tmpauthrequired boolean ) $$oob.streamId = $botinfo.botid } 09D else 00s( %httpresponse == 400 ) 07*{ $_tmpauthrequired = false $_tmperrorstring = ^jsonpath ( ".errors[0].msg" ^1 ) $_tmpvalue = null ^nofail ( RULE ^if 01s( $_tmperrorstring == "Account Id not provided" or $_tmperrorstring == "Credentials are disabled" ) 00y{ $_tmpvalue = authorize } 004 ) ^if 00v( $_tmpvalue == authorize ) 00A{ $_tmpauthrequired = true } 004 ^insertjsontypedvalue ( $$oob authRequired $_tmpauthrequired boolean ) $$oob.streamId = $botinfo.botid $$oob.currentAccountLabel = $taskinfo.accountnametouse $$oob.currentAccountId = $taskinfo.currentaccountid $$oob.taskInstanceId = $taskinfo.taskinstanceid } 01b else ( 1 ) 00* { $$oob.authRequired = false $$oob.streamId = $botinfo.botid } 004 ^if 00g( $$istest ) 06t{ $$oob.isTest = true $_response = ^jsoncreate ( object ) $_response._id = $botinfo.botid $_response.name = $botname $_intents = ^jsoncreate ( array ) $_taskobj = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_taskobj name $taskinfo.currentintendedaction string ) ^jsonarrayinsert ( $_intents $_taskobj ) $_response.intent = $_intents $_entities = ^jsoncreate ( array ) $_response.Entities = $_entities $_response.error = ^3 $$oob.response = $_response ^end ( INPUT ) } 004 ^if 00%( $taskinfo.currentintendedaction and ! $taskinfo.iseemessage ) 01L{ $_botexplain = ^"For activity $taskinfo.currentintendedaction of $botinfo.botname, " $taskinfo.iseemessage = 1 } 00L else ( 1 ) 00v { $_botexplain = null } 004 ^if 00Z( ^substitute ( character $$tmpmsg reauthorize x FAIL ) ) 03I{ ^reuse ( ~authwait.waiting ) $_tmpmodified = ^messagemap ( "^I'm discarding this request" "^I am discarding this request due to a server failure." ) ^sendstatementsummary ( $$tmpmodified ) ^print ( $_tmpmodified ) ^reuse ( ~no_task.now_what ) ^end ( TOPIC ) } 05D else ( 1 ) 05n { $_tmpmodified = ^"I'm sorry, I could not proceed. $botinfo.botname responded with HTTP code %httpresponse and message \"^3\" " $_tmpmodified = ^messagemap ( "^I'm sorry, I could not proceed." "I'm sorry, I could not proceed due to a server call failure." ) $_tmpmodified = ^join ( $_botexplain $_tmpmodified ) ^sendstatementsummary ( $_tmpmodified ) ^cannot_do_request ( $_tmpmodified ) } 004 `
^jsonerror o 0 0 B( $_responsejson $_msg $_tmp $_errorjson $_tmp1 $_tmp2 ) ^if 00s( %httpresponse != 200 ) 07b{ $_msg = null $_tmp = null $_errorjson = null $_tmp = $_responsejson.errors[0].msg ^if 00d( $_tmp ) 04!{ ^makejsontransient ( $_responsejson ) ^nofail ( RULE $_errorjson = ^substitute ( character $_tmp \\ "" ) ) ^if 00j( $_errorjson ) 02z{ $_msg = $_errorjson $_tmp1 = ^jsonparse ( NOFAIL $_errorjson ) $_tmp2 = $_tmp1.message ^if 00e( $_tmp2 ) 00q{ $_msg = $_tmp2 } 00L else ( 1 ) 00v { $_msg = $_errorjson } 004 } 00F else ( 1 ) 00p { $_msg = $_tmp } 004 } 00N else ( 1 ) 00x { $_msg = %httpresponse } 004 ^return ( $_msg ) } 004 ^return ( null ) `
^invoke_json o 0 0 J( ^how ^kind ^url ^postdata ^why ^caller ^host ^safe ^silent $$result $$msg $$tmp $$errorjson $$responsejson $$tmp1 $_headers $_botexplain $_why $_tmpmsg $_msg ) ^if 00a( ^6 ) 00P{ $_headers = ^gethttpheaders ( ^6 null ) } 017 else ( 1 ) 00$ { $_headers = ^gethttpheaders ( $server $authorization ) } 004 _19 = ^burst ( count ^2 "//" ) ^if 00f( _19 > 2 ) 015{ ^log ( Invalid request: ^1 ^2 \n ) ^dumpcallstack ( ) ^fail ( CALL ) } 004 $$result = ^result ( $$responsejson = ^jsonopen ( ^0 ^1 ^2 ^3 $_headers ) ) ^if 00a( ^8 ) 00C{ ^return ( $$responsejson ) } 004 ^if 00t( $$result != NOPROBLEM ) 09={ $$oob.httpResponseCode = %httpresponse ^nofail ( RULE ^delete ( $$responsejson ) ) ^addjsonfailure ( ^1 ^2 "Curl problem" ^3 ) ^addcontextinfotooob ( $taskinfo ) ^if 00%( $taskinfo.currentintendedaction and ! $taskinfo.iseemessage ) 01L{ $_botexplain = ^"For activity $taskinfo.currentintendedaction of $botinfo.botname, " $taskinfo.iseemessage = 1 } 00L else ( 1 ) 00v { $_botexplain = null } 004 $_why = ^4 $_tmpmsg = ^messagemap ( "^I'm sorry. I couldn't reach the server." "^$_botexplain I'm sorry. I couldn't reach the server $_why ." ) ^sendstatementsummary ( $_tmpmsg ) ^print ( $_tmpmsg ) ^if 00c( ! ^7 ) 01O{ ^reuse ( ~no_task.cancel_work ) $botname = null $botid = null ^delete ( $botinfo ) $botinfo = null ^end ( TOPIC ) } 004 } 04V else ( 1 ) 04F { ^if 00s( %httpresponse == 202 ) 00b{ } 03$ else ( 1 ) 03O { $_msg = ^jsonerror ( $$responsejson ) ^if 00d( $_msg ) 02X{ ^addjsonfailure ( ^1 ^2 $_msg ^3 ) $$oob.httpResponseCode = %httpresponse ^addcontextinfotooob ( $taskinfo ) ^if 00l( ! $$invisible ) 00@{ ^show_failed_response ( ^3 $$responsejson ^5 $_msg ) } 004 } 004 } 004 } 004 ^return ( $$responsejson ) `
^sendoobforcancel o 0 0 C( ^cancelvalue ^cancelkeyword $_cancelkeyword $_response ) $_cancelkeyword = cancel ^if 00a( ^1 ) 00w{ $_cancelkeyword = ^1 } 004 ^insertjsontypedvalue ( $$oob $_cancelkeyword ^0 string ) $_response = ^jsoncreate ( object ) $_response._id = $botinfo.botid $_response.name = $botname $_response.intend = $taskinfo.currentintendedaction $$oob.response = $_response `
^setserversettings o 0 0 B( ^currentserver $_tempprotocol $_tempuserid $_tempauthorization $_temphost $_tempdevmodechannelinfo ) ^setservervariables ( ) $_tempprotocol = $protocol $_tempuserid = $userid $_tempauthorization = $authorization $_temphost = $host $_tempdevmodechannelinfo = $devmodechannelinfo ^if 00c( ! ^0 ) 00D{ ^0 = $qabotsserver /api/1.1 } 004 ^if 00t( ^0 == $koreappsserver ) 01Z{ $_tempuserid = $koreappsuserid $_tempauthorization = $koreappsauthorization $_temphost = $koreappshost $_tempprotocol = http } 0A8 else 00o( ^0 == $appserver ) 01o{ $_tempuserid = $appuserid $_tempauthorization = $appauthorization $_temphost = $apphost } 0yu else 00s( ^0 == $devbotsserver ) 02f{ $_tempuserid = $devbotsuserid $_tempauthorization = $devbotsauthorization $_temphost = $devbotshost $_tempdevmodechannelinfo = $devbotsdevmodechannelinfo } 0vV else 00v( ^0 == $disneybotsserver ) 01J{ $_tempuserid = $disneybotsuserid $_tempauthorization = $disneybotsauthorization $_temphost = $disneybotshost } 0tP else 00u( ^0 == $disneyappserver ) 01G{ $_tempuserid = $disneyappuserid $_tempauthorization = $disneyappauthorization $_temphost = $disneyapphost } 0rN else 00u( ^0 == $pilotbotsserver ) 02n{ $_tempuserid = $pilotbotsuserid $_tempauthorization = $pilotbotsauthorization $_temphost = $pilotbotshost $_tempdevmodechannelinfo = $pilotbotsdevmodechannelinfo } 0o$ else 00r( ^0 == $qabotsserver ) 02b{ $_tempuserid = $qabotsuserid $_tempauthorization = $qabotsauthorization $_temphost = $qabotshost $_tempdevmodechannelinfo = $qabotsdevmodechannelinfo } 0mn else 00s( ^0 == $qa1botsserver ) 02f{ $_tempuserid = $qa1botsuserid $_tempauthorization = $qa1botsauthorization $_temphost = $qa1botshost $_tempdevmodechannelinfo = $qa1botsdevmodechannelinfo } 0jO else 00x( ^0 == $workflowbotsserver ) 02z{ $_tempuserid = $workflowbotsuserid $_tempauthorization = $workflowbotsauthorization $_temphost = $workflowbotshost $_tempdevmodechannelinfo = $workflowbotsdevmodechannelinfo } 0gQ else 00s( ^0 == $botsintserver ) 02f{ $_tempuserid = $botsintuserid $_tempauthorization = $botsintauthorization $_temphost = $botsinthost $_tempdevmodechannelinfo = $botsintdevmodechannelinfo } 0e4 else 00t( ^0 == $loadbotsserver ) 01D{ $_tempuserid = $loadbotsuserid $_tempauthorization = $loadbotsauthorization $_temphost = $loadbotshost } 0c6 else 00q( ^0 == $bots1server ) 01u{ $_tempuserid = $bots1userid $_tempauthorization = $bots1authorization $_temphost = $bots1host } 0ak else 00p( ^0 == $botsserver ) 023{ $_tempuserid = $botsuserid $_tempauthorization = $botsauthorization $_temphost = $botshost $_tempdevmodechannelinfo = $botsdevmodechannelinfo } 07~ else 00o( ^0 == $rtcserver ) 01={ $_tempuserid = $rtcuserid $_tempauthorization = $rtcauthorization $_temphost = $rtchost $_tempdevmodechannelinfo = $rtcdevmodechannelinfo } 05y else 00s( ^0 == $onprem1server ) 02B{ $_tempuserid = $onprem1userid $_tempauthorization = $onprem1authorization $_temphost = $onprem1host $_tempdevmodechannelinfo = $onprem1devmodechannelinfo $_tempprotocol = http } 02D else 00R( ^0 == $localserver or ^0 == 127.0.0.1/api/1.1 ) 01Q{ $_tempuserid = $localuserid $_tempauthorization = $localauthorization $_temphost = $localhost $_tempprotocol = http } 004 ^if 00Z( ^0 == 10.0.2.193/api/1.1 or ^0 == 10.0.23.254/api/1.1 ) 00x{ $_tempprotocol = http } 004 $userid = $_tempuserid $authorization = $_tempauthorization $host = $_temphost $protocol = $_tempprotocol $devmodechannelinfo = $_tempdevmodechannelinfo `
^sendlogdata o 0 0 B( ^logdata $$payload $_host $_url $_tmp ) $_host = null $$payload = ^jsonwrite ( ^0 ) $_url = ^"$protocol://$server/users/$userid/builder/logs" $_tmp = ^invoke_json ( transient post $_url $$payload "^to send success or failure logs to server" SendLogData $_host 1 1 ) `
^gatherlogdata o 0 0 B( ^answer $_mainbot $_object $_array $_input $_tmp ) ^if 00n( $nonkorabotname ) 00D{ $_mainbot = $nonkorabotname } 00I else ( 1 ) 00s { $_mainbot = Kora } 004 $_object = ^jsoncreate ( TRANSIENT object ) $_object.result = ^0 $_object.mainbot = $_mainbot ^if 00g( $botname ) 020{ $_object.bot = $botname ^if 00m( $botinfo.botid ) 00H{ $_object.botid = $botinfo.botid } 00O else ( 1 ) 00y { $_object.botid = "xxx" } 004 } 010 else ( 1 ) 00X { $_object.bot = $_mainbot $_object.botid = "xxx" } 004 ^if 00d( $room ) 00x{ $_object.room = $room } 004 ^if 00h( $taskinfo ) 02r{ $_object.task = $taskinfo.currentintendedaction $$sanitizekeys = true ^respond ( ~getconfirmationdata ) $_object.fields = $$getconfirmationdata $$sanitizekeys = null } 004 $_array = ^jsoncreate ( TRANSIENT array ) ^if 00o( ! $recordedinput ) 00T{ ^jsonarrayinsert ( $_array %originalinput ) } 02b else ( 1 ) 01* { @0 = ^burst ( $recordedinput " | " ) ^loop ( -1 ) 019 { $_input = ^first ( @0subject ) $_tmp = ^jsonarrayinsert ( $_array $_input ) } } 004 $_object.input = $_array ^if 00m( %response != 0 ) 01G{ ^nofail ( RULE $_tmp = null $_tmp = ^response ( 1 ) ) ^if 00d( $_tmp ) 00z{ $_object.output = $_tmp } 004 } 004 ^return ( $_object ) `
^logsuccess o 0 0 A( ) $$tmplogtosend = ^gatherlogdata ( success ) `
^logfailintent o 0 0 A( ) $$tmplogtosend = ^gatherlogdata ( failintent ) `
^logfailtask o 0 0 A( ) $$tmplogtosend = ^gatherlogdata ( failtask ) `
^taskdisplayname o 0 0 B( $_task $_output ) ^if 00u( $_task.MatchedQuestion ) 00J{ $_output = $_task.MatchedQuestion } 00O else ( 1 ) 00y { $_output = $_task.name } 004 ^return ( $_output ) `
^taskid o 0 0 B( $_task ) ^if 00i( $_task._id ) 00y{ ^return ( $_task._id ) } 00+ else 00o( $_task.dialog_id ) 00E{ ^return ( $_task.dialog_id ) } 004 ^return ( null ) `
^getfieldkey o 0 0 B( ^fieldobject $_fieldobj $_key ) $_fieldobj = ^0 ^nofail ( RULE $_key = null $_key = $_fieldobj.key $_key = ^substitute ( character $_key " " _ ) ) ^return ( $_key ) `
^getfieldtitle o 0 0 B( ^fieldobject $_fieldobj $_title ) $_fieldobj = ^0 ^nofail ( RULE $_title = null $_title = $_fieldobj.title ) ^return ( $_title ) `
^getfieldrequired o 0 0 B( ^fieldobject $_fieldobj $_required ) $_fieldobj = ^0 ^nofail ( RULE $_required = $_fieldobj.required ) ^return ( $_required ) `
^getfieldlowercasetitle o 0 0 B( ^fieldobject $_fieldobj $_title ) $_fieldobj = ^0 ^nofail ( RULE $_title = null $_title = $_fieldobj.title $_title = ^pos ( lowercase $_title ) ) ^return ( $_title ) `
^getfieldhelp o 0 0 B( ^fieldobject $_fieldobj $_help ) $_fieldobj = ^0 ^nofail ( RULE $_help = null $_help = $_fieldobj.help ) ^if 00e( $_help ) 00P{ $_help = ^jsonundecodestring ( $_help ) } 004 ^return ( $_help ) `
^getfieldfieldtype o 0 0 B( $_fieldobject ) ^return ( $_fieldobject.fieldType ) `
^getfieldtype o 0 0 B( $_fieldobject ) ^return ( $_fieldobject.type ) `
^getfieldmetadata o 0 0 B( $_fieldobject ) ^return ( $_fieldobject.metadata ) `
^getdateformat o 0 0 B( $_fieldobject ) ^return ( $_fieldobject.format ) `
^getfieldfromkey o 0 0 B( ^key $$fieldcount $$fieldid $$key $_field ) $$fieldcount = ^length ( $taskinfo.fields ) $$fieldid = 0 ^loop ( $$fieldcount ) 022 { $_field = ^jsonpath ( "[$$fieldid]" $taskinfo.fields ) $$key = $_field.key ^if 00j( $$key == ^0 ) 00v{ ^return ( $_field ) } 004 $$fieldid += 1 } ^return ( null ) `
^setkeys o 0 0 B( $_fieldobject ) ^nofail ( RULE $taskinfo.fieldkeys.$xkey = null $taskinfo.fieldkeys.$xkey = ^getfieldtitle ( $_fieldobject ) ) $key_value = $xkey $taskinfo.fieldvalues.$key_value = null ^nofail ( RULE $taskinfo.fieldvalues.$key_value = $_fieldobject.value ) ^if 00z( ! $taskinfo.fieldkeys.$xkey ) 00-{ $taskinfo.fieldkeys.$xkey = $taskinfo.fieldvalues.$key_value } 004 `
^acceptvalue o 0 0 D( ^key ^glean ^value2 $_value $_key ) $_value = ^1 ^if 00o( ^1 != $k-novalue ) 00l{ ^1 = null } 004 ^if 00v( $taskinfo.nestfromfield ) 01M{ ^if 00t( $_value != $k-novalue ) 014{ $$nestedvalue = $_value ^reuse ( FINISHNESTEDCHOICE ) ^end ( CALL ) } 004 } 004 $_key = ^0 $taskinfo.fieldkeys.$_key = $_value $key_value = ^0 ^if 00a( ^2 ) 00N{ $taskinfo.fieldvalues.$key_value = ^2 } 00* else ( 1 ) 00S { $taskinfo.fieldvalues.$key_value = $_value } 004 ^nextgambit ( ) `
^parse_dynamicdropdowninfo o 0 0 D( ^keyname ^fieldobjectitem ^filters $$dynamicdropdowninfo $_fieldobj ) $_fieldobj = ^1 ^nofail ( RULE $$endpoint = null $$endpoint = ^jsoncopy ( transient $_fieldobj.endPoint ) ) ^nofail ( RULE $$payloadfields = null $$payloadfields = ^jsoncopy ( transient $_fieldobj.payloadFields ) ) ^if 00a( ^2 ) 00K{ $$dynamicdropdowninfo = $_fieldobj } 01R else ( 1 ) 01B { ^nofail ( RULE $$dynamicdropdowninfo = null $$dynamicdropdowninfo = $_fieldobj.dynamicDropDownInfo ) } 004 ^nofail ( RULE $$keyforlabel = null $$keyforlabel = ^substitute ( character $$dynamicdropdowninfo.keyForLabel "\n" "" ) ) $$keyforvalue = $$dynamicdropdowninfo.keyForValue $$responsepath = $$dynamicdropdowninfo.responsePath ^nofail ( RULE $$dependson = null $$dependson = $_fieldobj.dependsOn ) ^if 00k( ! $$endpoint ) 01l{ ^nofail ( RULE $$endpoint = ^jsoncopy ( transient $$dynamicdropdowninfo.endPoint ) ) } 004 ^if 00p( ! $$payloadfields ) 01v{ ^nofail ( RULE $$payloadfields = ^jsoncopy ( transient $$dynamicdropdowninfo.payloadFields ) ) } 004 ^if 00n( ! $$keyforlabel ) 00w{ $$keyforlabel = Name } 004 ^if 00n( ! $$keyforvalue ) 00u{ $$keyforvalue = Id } 004 `
^get_dropdowninfo o 0 0 F( ^orderid ^instanceid ^fieldobjectinfo ^filters ^silent $_fieldobject $_keyname $_dependson $_fields $_tmpdependsoncount $_tmpcount $_dependsonfield $_fieldtype $_fieldvalue $_data $_postinfo $_instanceurl $_tmp ) $_fieldobject = ^2 $_keyname = ^getfieldlowercasetitle ( ^2 ) ^parse_dynamicdropdowninfo ( $_keyname ^2 ^3 ) $_dependson = ^nofail ( RULE $_fieldobject.dependsOn ) $_fields = ^jsoncreate ( object ) $_tmpdependsoncount = ^length ( $_dependson ) ^if 00v( $_tmpdependsoncount > 0 ) 0dv{ $_tmpcount = 0 ^loop ( $_tmpdependsoncount ) 06V { $_keyname = ^jsonpath ( "[$_tmpCount]" $_dependson ) $_dependsonfield = ^getfieldfromkey ( $_keyname ) $_fieldtype = ^getfieldfieldtype ( $_dependsonfield ) ^if 00F( ! $taskinfo.fieldvalues.$_keyname ) 00U{ $_fieldvalue = $taskinfo.fieldkeys.$_keyname } 00= else ( 1 ) 00W { $_fieldvalue = $taskinfo.fieldvalues.$_keyname } 004 ^if 00y( ^jsonkind ( $_fieldvalue ) ) 00!{ $_fieldvalue = ^jsoncopy ( transient $_fieldvalue ) } 004 ^jsonobjectinsert ( $_fields $_keyname $_fieldvalue ) $_tmpcount += 1 } $_data = ^jsoncreate ( object ) ^if 00i( $$endpoint ) 00E{ $_data.endPoint = $$endpoint } 004 ^if 00l( $$keyforlabel ) 00K{ $_data.keyForLabel = $$keyforlabel } 004 ^if 00l( $$keyforvalue ) 00K{ $_data.keyForValue = $$keyforvalue } 004 ^if 00m( $$responsepath ) 00M{ $_data.responsePath = $$responsepath } 004 ^if 00n( $$payloadfields ) 00O{ $_data.payloadFields = $$payloadfields } 004 ^if 00g( $_fields ) 00A{ $_data.fields = $_fields } 004 } 01Z else ( 1 ) 01J { ^if 00a( ^3 ) 00n{ $_data = ^2 } 011 else ( 1 ) 00Y { $_data = ^jsonpath ( ".dynamicDropDownInfo" ^2 ) } 004 } 004 $_postinfo = ^jsonwrite ( $_data ) $_instanceurl = ^"$protocol://$server/market/orders/^0/instances/^1/fetch" $_tmp = ^invoke_json ( transient post $_instanceurl $_postinfo "^to get dropdown field values" get_dropdowninfo null null ^4 ) ^return ( $_tmp ) `
^resetkeys o 0 0 B( ^fieldtitle $$tmp_key $$tmp_key_value ) $xkey = ^0 ^nofail ( RULE $taskinfo.fieldkeys.$xkey = null ) `
^erasefieldinfo o 0 0 B( $_field ) ^if 00f( $_field ) 02a{ $_field.processed = null $_field.gleanvalue = null $_field.amend = null ^if 00x( $_field.fieldType == file ) 00E{ $taskinfo.attachments = null } 004 } 004 `
^erasedependantfields o 0 0 B( ^key $$fieldcount $$fieldid $$dependson $$tmpdependsoncount $$tmpcount $$dependsonkey $$key $_field $_required ) $$key = ^0 $$fieldcount = ^length ( $taskinfo.fields ) $$fieldid = 0 ^loop ( $$fieldcount ) 08F { $_field = ^jsonpath ( "[$$fieldid]" $taskinfo.fields ) $$dependson = $_field.dependsOn $$tmpdependsoncount = ^length ( $$dependson ) $$keytmp = $_field.key $_required = $_field.isRequired ^if 00v( $$tmpdependsoncount > 0 ) 05k{ $$tmpcount = 0 ^loop ( $$tmpdependsoncount ) 04D { $$dependsonkey = ^jsonpath ( "[$$tmpCount]" $$dependson ) ^if 00v( $$dependsonkey == $$key ) 02-{ $xkey = ^getfieldkey ( $_field ) ^if 00q( $_required == true ) 00I{ $taskinfo.fieldkeys.$xkey = null } 00$ else ( 1 ) 00O { $taskinfo.fieldkeys.$xkey = $k-novalue } 004 ^erasefieldinfo ( $_field ) ^end ( LOOP ) } 004 $$tmpcount += 1 } } 004 $$fieldid += 1 } `
^gettimetosave o 0 0 B( ^fieldobject $_fieldobj $_time ) $_fieldobj = ^0 ^nofail ( RULE $_time = null $_time = $_fieldobj.timeToSave ) ^if 00g( ! $_time ) 00p{ ^return ( 0 ) } 004 ^return ( $_time ) `
^finddefaultvalue o 0 0 B( $_field $_defaultvalue ) $$defaulttitle = $_field.default $_defaultvalue = $_field.value ^return ( $_defaultvalue ) `
^memorizedfile o 0 0 A( $_file ) $_file = ^join ( USERS/ltm- %user - %bot .txt ) ^return ( $_file ) `
^cleanmemorized o 0 0 B( ^mode $_now $_deleteitem ) ^if 00a( ^0 ) 01Y{ @0 = ^jsonparentfromproperty ( memexpire ^0 ) ^if 00t( @0 and ^delete ( @0 ) ) 00v{ $$memorychanged = 1 } 004 ^end ( CALL ) } 004 $_now = %fulltime @0 = ^query ( exact_v ? memexpire ? ) ^loop ( -1 ) 01Y { $_deleteitem = null _0 = ^last ( @0all ) ^if 00j( _2 <= $_now ) 00!{ ^nofail ( RULE ^delete ( _0 ) ) $$memorychanged = 1 } 004 } `
^memoryheader o 0 0 B( ^datum $_array ) @1 = ^query ( exact_o ? ? ^0 ) $_array = @1subject @1 = ^query ( exact_o ? ? $_array ) ^return ( @1subject ) `
^validmemory o 0 0 B( ^header $_namespace $_botname $_membot ) $_namespace = ^extract ( ^0 3 +4 ) ^if 00r( $_namespace != tmem ) 00s{ ^return ( null ) } 004 @1 = ^query ( exact_sv ^0 memexpire ? 1 ) ^if 00t( @1object <= %fulltime ) 00s{ ^return ( null ) } 004 $_botname = ^pos ( lowercase $botname ) @1 = ^query ( exact_sv ^0 memaction ? 1 ) $_membot = ^burst ( @1object : ) ^if 00t( $_membot != $_botname ) 00s{ ^return ( null ) } 00F else ( 1 ) 00p { ^return ( 1 ) } 004 `
^findmatchingdatabykind o 0 0 B( ^kind $_key $_header $_val ) $_key = null $sharevalue2 = null @0 = ^query ( exact_vo ? memkind ^0 ) ^loop ( -1 ) 05W { _0 = ^first ( @0subject ) $_header = ^memoryheader ( _0 ) ^if 00z( ! ^validmemory ( $_header ) ) 00q{ ^next ( LOOP ) } 004 $_key = ^query ( exact_sv _0 memkey ? 1 ? @1object ) @1 = ^query ( exact_sv _0 memval ? 1 ) ^if 00r( ^length ( @1 ) == 1 ) 02b{ $_val = @1object ^if 00r( ^jsonkind ( $_val ) ) 00W{ $sharevalue2 = ^note_permanent_facts ( $_val ) } 00M else ( 1 ) 00w { $sharevalue2 = $_val } 004 } 004 ^return ( $_key ) } ^return ( null ) `
^findmatchingdatabyfieldname o 0 0 B( ^name $_key $_header $_val ) $_key = null $sharevalue2 = null @0 = ^query ( exact_vo ? memname ^0 ) ^loop ( -1 ) 05V { _0 = ^last ( @0subject ) $_header = ^memoryheader ( _0 ) ^if 00z( ! ^validmemory ( $_header ) ) 00q{ ^next ( LOOP ) } 004 $_key = ^query ( exact_sv _0 memkey ? 1 ? @1object ) @1 = ^query ( exact_sv _0 memval ? 1 ) ^if 00r( ^length ( @1 ) == 1 ) 02b{ $_val = @1object ^if 00r( ^jsonkind ( $_val ) ) 00W{ $sharevalue2 = ^note_permanent_facts ( $_val ) } 00M else ( 1 ) 00w { $sharevalue2 = $_val } 004 } 004 ^return ( $_key ) } ^return ( null ) `
^memorizeaction o 0 0 C( ^botname ^action $_tmp $_fieldcount $_now $_count $_object $_fieldkey $_key $_keyvalue $_timetosave $_action $_expire $_fieldarray $_title $_fieldtype $_type $_metadata $_kind $_obj1 ) $_tmp = ^jsonlabel ( mem ) $_fieldcount = ^length ( $taskinfo.fields ) $_now = %fulltime $_count = 0 $_object = null ^loop ( $_fieldcount ) 0rK { $taskinfo.field = ^jsonpath ( "[$_count]" $taskinfo.fields ) $_count += 1 $_fieldkey = ^getfieldkey ( $taskinfo.field ) $_key = $_fieldkey $_keyvalue = $_key $_key = $taskinfo.fieldkeys.$_key $_keyvalue = $taskinfo.fieldvalues.$_keyvalue $_timetosave = ^gettimetosave ( $taskinfo.field ) ^if 00m( $cheatsavetime ) 00F{ $_timetosave = $cheatsavetime } 004 ^if 00r( $_key == $k-novalue ) 00q{ ^next ( LOOP ) } 00Y else 00p( $_timetosave == 0 ) 00q{ ^next ( LOOP ) } 004 ^if 00o( $_object == null ) 07@{ $_object = ^jsoncreate ( TRANSIENT object ) $_action = ^join ( ^0 : ^1 ) $_action = ^pos ( lowercase $_action ) $_timetosave *= 60 $_expire = %fulltime + $_timetosave $_object.memaction = $_action $_object.memexpire = $_expire $_object.memwhen = %fulltime ^if 00l( ! $$memorized ) 00W{ $$memorized = ^jsoncreate ( TRANSIENT object ) } 004 ^if 00t( ! $$memorized.actions ) 00#{ $$memorized.actions = ^jsoncreate ( TRANSIENT array ) } 004 ^jsonarrayinsert ( TRANSIENT $$memorized.actions $_object ) $_fieldarray = ^jsoncreate ( TRANSIENT array ) $_object.memfields = $_fieldarray } 004 $_title = ^getfieldtitle ( $taskinfo.field ) $_fieldtype = ^getfieldfieldtype ( $taskinfo.field ) $_type = ^getfieldtype ( $taskinfo.field ) $_metadata = ^getfieldmetadata ( $taskinfo.field ) $_kind = $_fieldtype ^if 00i( $_metadata ) 00v{ $_kind = $_metadata } 00O else 00e( $_type ) 00r{ $_kind = $_type } 004 $_obj1 = ^jsoncreate ( TRANSIENT object ) ^jsonarrayinsert ( TRANSIENT $_fieldarray $_obj1 ) $$memorychanged = 1 ^if 00n( $_kind == array ) 00q{ ^next ( LOOP ) } 004 $_obj1.memname = $_title $_obj1.memkey = $_key ^if 00i( $_keyvalue ) 01={ ^if 00w( ^jsonkind ( $_keyvalue ) ) 00Q{ $_obj1.memval = ^jsoncopy ( $_keyvalue ) } 00S else ( 1 ) 00C { $_obj1.memval = $_keyvalue } 004 } 004 ^if 03i( $_kind != textbox and $_kind != textarea and $_kind != nestedform and $_kind != typeahead and $_kind != dynamicDropDown and $_kind != dynamicDropDownCB and $_kind != staticDropDown and $_kind != staticDropDownCB and $_kind != typeahead ) 00z{ $_obj1.memtype = $_kind } 004 } $_tmp = ^jsonlabel ( "" ) ^logif ( $cheatmemorize "^Memorized action ^1 for ^0 \n" ) `
^cleancachekey o 0 0 B( ^key $_key ) $_key = ^pos ( lowercase ^0 ) ^if 00z( ^extract ( $_key 0 1 ) == $ ) 00W{ $_key = ^extract ( $_key 1 ^length ( $_key ) ) } 004 $_key = ^substitute ( character $_key . _ ) ^return ( $_key ) `
^getcacheobject o 0 0 B( $_cachetype $_cacheobject ) ^if 00l( ! $$memorized ) 00s{ ^return ( null ) } 004 $_cacheobject = $$memorized.$_cacheType ^return ( $_cacheobject ) `
^getcacheitemobject o 0 0 C( ^cachename ^itemname $_cacheobject $_key $_cacheitem ) $_cacheobject = ^getcacheobject ( ^0 ) ^if 00n( ! $_cacheobject ) 00s{ ^return ( null ) } 004 ^notrace ( $_key = ^cleancachekey ( ^1 ) ) $_cacheitem = $_cacheobject.$_key ^return ( $_cacheitem ) `
^getcacheitem o 0 0 C( ^cachename ^itemname $_cacheitem $_cachedata ) $_cacheitem = ^getcacheitemobject ( ^0 ^1 ) ^if 00l( ! $_cacheitem ) 00s{ ^return ( null ) } 004 $_cachedata = $_cacheitem.data ^return ( $_cachedata ) `
^getcacheitemwhen o 0 0 C( ^cachename ^itemname $_cacheitem $_cachewhen ) $_cacheitem = ^getcacheitemobject ( ^0 ^1 ) ^if 00l( ! $_cacheitem ) 00s{ ^return ( null ) } 004 $_cachewhen = $_cacheitem.memwhen ^return ( $_cachewhen ) `
^savecacheitem o 0 0 E( ^cachename ^itemname ^dataitem ^cachetime $_key $_cacheobject $_cacheitem $_cachetime ) ^notrace ( ^if 00k( ! ^0 or ! ^1 ) 00p{ ^end ( CALL ) } 004 ^if 00o( $ignoredatacache ) 00p{ ^end ( CALL ) } 004 ^jsonlabel ( "mem" ) ^notrace ( $_key = ^cleancachekey ( ^1 ) ) $_cacheobject = ^getcacheobject ( ^0 ) ^if 00n( ! $_cacheobject ) 02I{ ^if 00l( ! $$memorized ) 00W{ $$memorized = ^jsoncreate ( TRANSIENT object ) } 004 $_cacheobject = ^jsoncreate ( TRANSIENT object ) ^jsonobjectinsert ( $$memorized ^0 $_cacheobject ) } 025 else ( 1 ) 01@ { $_cacheitem = $_cacheobject.$_key ^if 00j( $_cacheitem ) 00?{ ^nofail ( RULE ^delete ( $_cacheitem ) ) $_cacheitem = null } 004 } 004 ^if 00a( ^2 ) 07b{ $_cacheitem = ^jsoncreate ( TRANSIENT object ) ^if 00o( ^jsonkind ( ^2 ) ) 00L{ $_cacheitem.data = ^jsoncopy ( ^2 ) } 00N else ( 1 ) 00x { $_cacheitem.data = ^2 } 004 $_cacheitem.memwhen = %fulltime $_cachetime = ^3 ^if 00l( ! $_cachetime ) 00I{ $_cachetime = $$defaultcachetime } 004 ^if 00o( $_cachetime >= 0 ) 00~{ $_cachetime = ^compute ( %fulltime + $_cachetime ) } 004 $_cacheitem.memexpire = $_cachetime ^jsonobjectinsert ( $_cacheobject $_key $_cacheitem ) ^logif ( $cheatmemorize "^Memorized data in ^0 for ^1 \n" ) } 004 ^jsonlabel ( "" ) $$memorychanged = 1 ) `
^loadmemorized o 0 0 A( $_file ) $_file = ^memorizedfile ( ) $$defaultcachetime = 8640000 ^nofail ( RULE $$memorized = ^import ( $_file "" keep transient ) ) ^if 00j( $$memorized ) 01@{ ^if 00A( $lastvolleytime <= $boottime ) 00!{ ^cleanmemorized ( onboot ) ^cleanmemorized ( boot ) } 004 ^cleanmemorized ( null ) } 004 `
^savememorized o 0 0 A( $_file ) ^if 00n( $$memorychanged ) 01e{ $_file = ^memorizedfile ( ) ^export ( $_file $$memorized ) $$memorized = null } 004 `
^isrecentbot o 0 0 B( ^botname $_data ) $_data = ^getcacheitem ( bots ^0 ) ^if 00e( $_data ) 00s{ ^return ( true ) } 004 ^fail ( CALL ) `
^botlastused o 0 0 B( ^botname $_time ) $_time = ^getcacheitemwhen ( bots ^0 ) ^return ( $_time ) `
^rememberbot o 0 0 C( ^botid ^botname ) $lastbotid = ^0 $lastbotname = ^1 ^if 00c( ! ^1 ) 00p{ ^end ( CALL ) } 004 ^savecacheitem ( bots ^1 ^0 86400 ) `
^isloopingnode o 0 0 C( $_node $_component ) ^if 00B( $_component.type == dialogAct ) 00q{ ^fail ( CALL ) } 068 else 019( $_component.type == message and $_node.nodeOptions.transitionType == onInput ) 00q{ ^fail ( CALL ) } 04H else 00+( $_component.type == entity and $_node.nodeOptions.isArray == true ) 01!{ ^if 00V( $_node._iterations > $_node.nodeOptions.arraySize ) 00s{ ^return ( true ) } 00G else ( 1 ) 00q { ^fail ( CALL ) } 004 } 01Q else 00p( $_node._processed ) 00s{ ^return ( true ) } 00& else 00w( $_node._iterations >= 10 ) 00s{ ^return ( true ) } 004 ^fail ( CALL ) `
^resolvemsg o 0 0 B( $_msgtoresolve ) _15 = ^burst ( once $_msgtoresolve "_" ) $$oob.dlgMsgTemplateId = _15 ^return ( _16 ) `
^finddialogact o 0 0 B( ^act $_concept $_sentencecount $_count $_start $_end ) $_concept = ^join ( ~ ^0 ) ^if 00p( $_concept == ~yes ) 00y{ $_concept = ~yesanswer } 00$ else 00o( $_concept == ~no ) 00x{ $_concept = ~noanswer } 004 $_sentencecount = ^length ( $gleaninfo.sentences ) - $gleaninfo.unprocessed $_count = $gleaninfo.unprocessed ^loop ( $_sentencecount ) 040 { ^nofail ( RULE ^restoregleansentence ( $_count ) ) ^if 00G( pattern _ [ ~yesanswer ~noanswer ] ) 01O{ $_start = ^position ( START _0 ) $_end = ^position ( END _0 ) ^markusedrange ( $currentsentenceid $_start $_end ) } 004 $_count += 1 ^if 00s( ^match ( $_concept ) ) 00p{ ^return ( 1 ) } 004 } ^fail ( CALL ) `
^fetchdialoggraph o 0 0 C( $_botid $_dialogid $_instanceurl $_dialogtree ) $_instanceurl = ^"$protocol://$server/market/streams/$_botid/dialogs/$_dialogid" ^if 00l( $$channelinfo ) 00^{ $_instanceurl = ^"$_instanceurl?channelId=$$channelInfo" } 004 $_dialogtree = ^invoke_json ( permanent get $_instanceurl null "^to get dialog tree" FetchDialogGraph ) ^return ( $_dialogtree ) `
^getmessage o 0 0 B( $_component $_message ) ^notrace ( ^if 00r( $_component.message ) 01#{ ^nofail ( RULE ^query ( exact_s $_component.message ? ? ) ) $_message = ^pick ( @0object ) $_message = ^resolvemsg ( $_message ) } 004 ) ^return ( $_message ) `
^geterrormessage o 0 0 B( $_component $_message ) ^notrace ( ^if 00r( $_component.message ) 01*{ ^nofail ( RULE ^query ( exact_s $_component.errorMessage ? ? ) ) $_message = ^pick ( @0object ) $_message = ^resolvemsg ( $_message ) } 004 ) ^return ( $_message ) `
^evaluatecondition o 0 0 D( $_leftvalue $_operator $_rightvalue $_testresult $_value ) ^if 00#( $_operator == "=" or $_operator == eq or $_operator == EQ ) 016{ ^if 00z( $_leftvalue == $_rightvalue ) 00v{ $_testresult = true } 004 } 0dL else 00%( $_operator == not or $_operator == neq or $_operator == NEQ ) 016{ ^if 00z( $_leftvalue != $_rightvalue ) 00v{ $_testresult = true } 004 } 0bI else 00#( $_operator == ">" or $_operator == gt or $_operator == GT ) 015{ ^if 00y( $_leftvalue > $_rightvalue ) 00v{ $_testresult = true } 004 } 09I else 00#( $_operator == "<" or $_operator == lt or $_operator == LT ) 015{ ^if 00y( $_leftvalue < $_rightvalue ) 00v{ $_testresult = true } 004 } 07I else 00^( $_operator == ">=" or $_operator == gte or $_operator == GTE ) 016{ ^if 00z( $_leftvalue >= $_rightvalue ) 00v{ $_testresult = true } 004 } 05E else 00^( $_operator == "<=" or $_operator == lte or $_operator == LTE ) 016{ ^if 00z( $_leftvalue <= $_rightvalue ) 00v{ $_testresult = true } 004 } 03A else 00M( $_operator == and or $_operator == "AND" ) 012{ ^if 00v( $_leftvalue and $_value ) 00v{ $_testresult = true } 004 } 01U else 00K( $_operator == or or $_operator == "OR" ) 011{ ^if 00u( $_leftvalue or $_value ) 00v{ $_testresult = true } 004 } 004 ^return ( $_testresult ) `
^ignorepriorvolleys o 0 0 A( ) ^if 00i( $gleaninfo ) 00&{ $gleaninfo.unprocessed = ^length ( $gleaninfo.sentences ) } 004 `
^dialogentitytypetotaskentitytypemapper o 0 0 B( $_entitytype $_metadata $_type ) $_metadata = $_entitytype ^if 00q( $_metadata == date ) 00p{ $_type = date } 0kx else 00u( $_metadata == datetime ) 00t{ $_type = datetime } 0jI else 00q( $_metadata == time ) 00p{ $_type = time } 0i! else 00p( $_metadata == url ) 00o{ $_type = url } 0i9 else 00A( $_metadata == list_of_values ) 00z{ $_type = list_of_values } 0h8 else 00r( $_metadata == email ) 00q{ $_type = email } 0gp else 00u( $_metadata == timezone ) 00t{ $_type = timezone } 0fA else 00u( $_metadata == location ) 00y{ $_type = coordlocation } 0eG else 00w( $_metadata == attachment ) 00p{ $_type = file } 0dT else 00q( $_metadata == city ) 00p{ $_type = city } 0c= else 00r( $_metadata == color ) 00q{ $_type = color } 0cg else 00y( $_metadata == company_name ) 00u{ $_type = cscompany } 0bm else 00u( $_metadata == currency ) 00v{ $_type = cscurrency } 0av else 00x( $_metadata == person_name ) 00w{ $_type = cshumanname } 09A else 00r( $_metadata == Label ) 00r{ $_type = string } 08Q else 00x( $_metadata == description ) 00w{ $_type = description } 07V else 00s( $_metadata == number ) 00t{ $_type = csnumber } 06* else 00w( $_metadata == percentage ) 00s{ $_type = percent } 065 else 00y( $_metadata == phone_number ) 00y{ $_type = csphonenumber } 057 else 00t( $_metadata == zipcode ) 00s{ $_type = zipcode } 04k else 00u( $_metadata == quantity ) 00t{ $_type = csnumber } 03v else 00x( $_metadata == from_number ) 00t{ $_type = csnumber } 02D else 00v( $_metadata == to_number ) 00t{ $_type = csnumber } 01N else 00r( $_metadata == regex ) 00q{ $_type = regex } 00$ else 00t( $_metadata == address ) 00s{ $_type = address } 004 ^return ( $_type ) `
^dialoghinttotaskdatatypemapper o 0 0 B( $_entityhint $_taskdatatype ) $_taskdatatype = $_entityhint ^return ( $_taskdatatype ) `
^createcontextonserver o 0 0 C( $_botid $_context $$payloadjson $_instanceurl $_response ) ^notrace ( ^if 00w( ! $_botid or ! $_context ) 00s{ ^return ( null ) } 004 $$payloadjson = ^jsonwrite ( $_context ) $_instanceurl = "^$protocol://$server/stream/$_botid/context" ^if 00l( $$channelinfo ) 00${ $_instanceurl = ^"$_instanceurl?channel=$$channelInfo" } 004 $_response = ^invoke_json ( TRANSIENT post $_instanceurl $$payloadjson "^to create context on server" CreateContext ) ^logif ( $dialogtrace "^Dialog Context: created $_response.id with $$payloadJson \n" ) ) ^return ( $_response.id ) `
^fetchvaluesforkeysfromcontextonserver o 0 0 E( $_botid $_contextid $_commaseperatedkeys $_mode $_instanceurl $_response ) ^notrace ( ^if 00U( $_botid and $_contextid and $_commaseperatedkeys ) 08I{ $_instanceurl = ^"$protocol://$server/stream/$_botid/context/$_contextid" ^if 00s( $_commaseperatedkeys ) 00*{ $_instanceurl = ^"$_instanceurl?keys=$_commaseperatedkeys" } 00+ else ( 1 ) 00V { $_instanceurl = ^"$_instanceurl?keys=context" } 004 ^if 00l( $$channelinfo ) 00${ $_instanceurl = ^"$_instanceurl&channel=$$channelInfo" } 004 $_response = ^invoke_json ( TRANSIENT get $_instanceurl null "^to get values for keys from context on server" FetchValuesForKeysFromContextOnServer ) ^if 00k( $dialogtrace ) 01M{ ^log ( Dialog Context: fetched from $_contextid for $_commaseperatedkeys \n ) ^log ( ^jsontree ( $_response ) ) } 004 } 004 ) ^if 00G( $_mode == PERMANENT and $_response ) 00X{ $_response = ^jsoncopy ( PERMANENT $_response ) } 004 ^return ( $_response ) `
^updatecontextonserver o 0 0 D( $_botid $_contextid $_arrayofkeyvaluepairsjson $_instanceurl $_response ) ^notrace ( ^if 00~( $_botid and $_contextid and $_arrayofkeyvaluepairsjson ) 05B{ $_instanceurl = ^"$protocol://$server/stream/$_botid/context/$_contextid" ^if 00l( $$channelinfo ) 00${ $_instanceurl = ^"$_instanceurl?channel=$$channelInfo" } 004 $_response = ^invoke_json ( TRANSIENT put $_instanceurl $_arrayofkeyvaluepairsjson "^to update context on server" UpdateContextOnServer ) ^logif ( $dialogtrace "^Dialog Context: updated $_contextid with $_arrayofkeyvaluepairsjson \n" ) } 004 ) `
^deletecontextonserver o 0 0 C( $_botid $_contextid $_instanceurl $_response ) ^notrace ( ^if 00y( ! $_botid or ! $_contextid ) 00p{ ^end ( CALL ) } 004 @0 = ^query ( exact_vo ? contextIdOnServer $_contextid -1 ) ^if 00r( ^length ( @0 ) == 1 ) 04R{ $_instanceurl = ^"$protocol://$server/stream/$_botid/context/$_contextid" ^if 00l( $$channelinfo ) 00${ $_instanceurl = ^"$_instanceurl?channel=$$channelInfo" } 004 $_response = ^invoke_json ( TRANSIENT delete $_instanceurl null "^to delete context on server" DeleteContext ) ^logif ( $dialogtrace "^Dialog Context: deleted $_contextid \n" ) } 004 ) `
^checkforcontextonserver o 0 0 C( $_botid $_contextidonserver ) ^if 00~( ! $_contextidonserver or ! $taskinfo.contextIdOnServer ) 03^{ ^if 00H( $taskinfo and $taskinfo.contextJson ) 03a{ $taskinfo.contextIdOnServer = ^createcontextonserver ( $_botid $taskinfo.contextJson ) ^if 00z( $taskinfo.contextIdOnServer ) 01n{ $_contextidonserver = $taskinfo.contextIdOnServer $taskinfo.contextJson.session = null } 004 } 004 } 004 ^return ( $_contextidonserver ) `
^addlogentryinhistory o 0 0 D( $_botid $_contextid $_log $_logjson $_instanceurl $_response ) $_contextid = ^checkforcontextonserver ( $_botid $_contextid ) $_logjson = ^jsonwrite ( $_log ) $_instanceurl = ^"$protocol://$server/stream/$_botid/context/$_contextid/history" ^if 00l( $$channelinfo ) 00${ $_instanceurl = ^"$_instanceurl?channel=$$channelInfo" } 004 $_response = ^invoke_json ( TRANSIENT post $_instanceurl $_logjson "^to add log entry in history" UpdateHistoryLog ) ^logif ( $dialogtrace "^Dialog History Log: updated $_contextid with $_logjson \n" ) `
^gethistoryfromserver o 0 0 C( $_botid $_contextid $_instanceurl $_response $_logjson ) $_contextid = ^checkforcontextonserver ( $_botid $_contextid ) $_instanceurl = ^"$protocol://$server/stream/$_botid/context/$_contextid/history" ^if 00l( $$channelinfo ) 00${ $_instanceurl = ^"$_instanceurl?channel=$$channelInfo" } 004 $_response = ^invoke_json ( TRANSIENT get $_instanceurl $_logjson "^to get latest history from server" GetHistoryFromServer ) ^logif ( $dialogtrace "^Dialog History Log: got latest history from server \n" ) `
^getvalueforkeyfromcontext o 0 0 E( $_botid $_contextid $_key $_mode ) $_contextid = ^checkforcontextonserver ( $_botid $_contextid ) ^return ( ^fetchvaluesforkeysfromcontextonserver ( $_botid $_contextid $_key $_mode ) ) `
^getvaluesforkeysfromcontext o 0 0 D( $_botid $_contextid $_keysarray $_commaseperatedkeysstring ) $_contextid = ^checkforcontextonserver ( $_botid $_contextid ) ^notrace ( $_commaseperatedkeysstring = ^stringlist ( $_keysarray null ) ) ^return ( ^fetchvaluesforkeysfromcontextonserver ( $_botid $_contextid $_commaseperatedkeysstring TRANSIENT ) ) `
^getvaluefromcontextforkey o 0 0 B( $_key $_response $_value ) $_response = ^getvalueforkeyfromcontext ( $taskinfo.contextJson.botid $taskinfo.contextIdOnServer $_key TRANSIENT ) $_value = $_response.$_key ^return ( $_value ) `
^updatevalueforkeyincontext o 0 0 E( $_botid $_contextid $_key $_value $_arrayofkeyvaluepairs $_object $_arrayjson ) $_contextid = ^checkforcontextonserver ( $_botid $_contextid ) $_arrayofkeyvaluepairs = ^jsoncreate ( TRANSIENT array ) $_object = ^jsoncreate ( TRANSIENT object ) $_object.key = $_key $_object.value = $_value ^jsonarrayinsert ( TRANSIENT $_arrayofkeyvaluepairs $_object ) $_arrayjson = ^jsonwrite ( $_arrayofkeyvaluepairs ) ^updatecontextonserver ( $_botid $_contextid $_arrayjson ) `
^updatevaluesforkeysincontext o 0 0 D( $_botid $_contextid $_keyvaluepairsarray $_arrayjson ) $_contextid = ^checkforcontextonserver ( $_botid $_contextid ) $_arrayjson = ^jsonwrite ( $_keyvaluepairsarray ) ^updatecontextonserver ( $_botid $_contextid $_arrayjson ) `
^flush_menuread o 0 0 A( ) ^if 014( ^query ( exact_s $gleaninfo.menuread ? ? -1 ? @10 ) and ^delete ( @10 ) ) 00b{ } 004 `
^flush_choice o 0 0 B( ^menuread $_json ) ^if 00H( ^query ( exact_v ? displayvalue ? ) ) 01-{ ^loop ( -1 ) 01M { $_json = ^first ( @0object ) ^if 00z( ^istransientjson ( $_json ) ) 00L{ ^nofail ( RULE ^delete ( $_json ) ) } 004 } } 004 ^if 00-( ^query ( exact_v ? displayvalue ? -1 ? @10 ) and ^delete ( @10 ) ) 00b{ } 004 ^if 00-( ^query ( exact_v ? displaylabel ? -1 ? @10 ) and ^delete ( @10 ) ) 00b{ } 004 ^if 00i( ^0 == true ) 00v{ ^flush_menuread ( ) } 004 `
^push_choice o 0 0 A( $_choices $_labelfact $_valuefact $_choice ) @0 = ^query ( exact_v ? displaylabel ? ) ^if 00r( ^length ( @0 ) == 0 ) 00s{ ^return ( null ) } 004 @1 = ^query ( exact_v ? displayvalue ? ) $_choices = ^jsoncreate ( PERMANENT object ) ^loop ( @0 ) 03T { $_labelfact = ^last ( @0fact ) $_valuefact = ^last ( @1fact ) $_choice = ^field ( $_labelfact object ) $_choices.$_choice = ^jsoncreate ( PERMANENT object ) $_choices.$_choice.label = ^field ( $_labelfact subject ) $_choices.$_choice.value = ^field ( $_valuefact object ) } ^return ( $_choices ) `
^pop_choice o 0 0 B( $_choices $_len $_choicefact $_choice ) $displaycounter = null ^if 00N( ! $_choices or ^length ( $_choices ) == 0 ) 00s{ ^return ( null ) } 004 ^flush_choice ( false ) $displaycounter = 0 $_len = ^length ( $_choices ) ^loop ( $_len ) 03k { $_choicefact = ^nth ( $_choices $displaycounter ) $_choice = ^field ( $_choicefact verb ) ^createfact ( $_choices.$_choice.label displaylabel $_choice ) ^createfact ( $_choice displayvalue $_choices.$_choice.value ) $displaycounter += 1 } ^nofail ( RULE ^delete ( $_choices ) ) `
^erasefields o 0 0 A( ) ^if 00h( $taskinfo ) 01M{ $taskinfo.fieldkeys = ^jsoncreate ( PERMANENT object ) $taskinfo.fieldvalues = ^jsoncreate ( PERMANENT object ) } 004 `
^reset_bot_search o 0 0 A( ) ^if 011( ^query ( exact_sv botsearchlist botsearchlist ? ) and ^delete ( @0 ) ) 00b{ } 004 ^if 00o( $partialbotmatch ) 00V{ ^nofail ( RULE ^delete ( $partialbotmatch ) ) } 004 $partialbotmatch = null `
^reset_bot_glean o 0 0 A( ) $k-bot = null ^nofail ( RULE ^delete ( $gleaninfo.botnames ) ) $gleaninfo.botnames = null ^nofail ( RULE ^delete ( $gleaninfo.botread ) ) $gleaninfo.botread = null `
^reset_glean o 0 0 A( ) ^if 00p( $hasmultipletasks ) 00p{ ^end ( CALL ) } 004 ^nofail ( RULE ^delete ( $gleaninfo ) ) $gleaninfo = null $hasmultipletasks = null $currentsentenceid = null $protectglean = null $k-date = null $k-default-date = null $k-datetime = null $k-company = null $k-time_frequency_hrs = null $k-time_frequency_mins = null $k-time_frequency_secs = null $k-date-from = null $k-date-to = null $k-twittername = null $k-installbot = null $k-sentence = null $k-human = null $k-typeahead = null $k-number = null $k-bot = null $k-location = null $k-fromlocation = null $k-tolocation = null $k-field = null $k-label = null $k-amend = null $k-description = null `
^reset_fields o 0 0 A( ) ^nofail ( RULE ^erasefields ( ) ) ^nofail ( RULE ^delete ( $taskinfo.fields ) ) ^nofail ( RULE $taskinfo.optionalmessage = null ) $typeaheadkey = null $ambiguousvalues = null `
^reset_basics o 0 0 A( ) $cs_token = $csbase_token $std_token = $csbase_token $recordedinput = null $originalinput = null ^if 00Z( ^query ( exact_v ? historyinfo ? ) and ^delete ( @0 ) ) 00b{ } 004 ^if 00%( ^query ( exact_s bestMatchedIntent ? ? ) and ^delete ( @0 ) ) 00b{ } 004 `
^reset_intent o 0 0 A( ) ^flush_choice ( true ) $displayglean = null ^reset_basics ( ) $skipoptional = $kora_skipoptional $botid = null $botname = null ^reset_fields ( ) ^if 00%( $taskinfo.contextJson.botid and $taskinfo.contextIdOnServer ) 01A{ ^nofail ( RULE ^deletecontextonserver ( $taskinfo.contextJson.botid $taskinfo.contextIdOnServer ) ) } 004 ^delete ( $taskinfo ) $taskinfo = null $$currentintendedaction = null ^delete ( $botinfo ) $botinfo = null ^delete ( $date_ambiguity ) $date_ambiguity = null ^reset_bot_search ( ) $xkey = null $callbacktime = null $callbackrule = null $callbacktopic = null `
^reset_context o 0 0 A( $_task ) @1 = ^query ( exact_v ? contextIdOnServer ? -1 ) ^loop ( -1 ) 01V { $_task = ^first ( @1subject ) ^nofail ( RULE ^deletecontextonserver ( $_task.contextJson.botid $_task.contextIdOnServer ) ) } ^delete ( $context ) $context = null `
^reset_lead o 0 0 B( $_all ) $sequenceid += 1 ^reset_intent ( ) ^if 00x( $$discard == all or $_all ) 00u{ ^reset_context ( ) } 004 ^setrejoinder ( input null ) ^reset_glean ( ) `
^iswordavailableinsentence o 0 0 E( ^word ^sentenceindex ^wordindex ^check $_check $_key ) $_check = ^3 ^if 00G( $displayglean and $_check == false ) 00q{ ^return ( ^2 ) } 004 $_key = ^join ( ^1 - ^2 ) ^if 00x( ! $gleaninfo.usedup.$_key ) 00q{ ^return ( ^2 ) } 00G else ( 1 ) 00q { ^fail ( CALL ) } 004 `
^iswordavailable o 0 0 C( ^word ^positionindex $_sentenceindex $_startindex $_endindex $_result ) $_sentenceindex = ^getsentenceindexfromposition ( ^1 ) $_startindex = ^getstartindexfromposition ( ^1 ) $_endindex = ^getendindexfromposition ( ^1 ) ^if 00p( $_startindex == 0 ) 00B{ $_startindex = $_endindex } 004 ^loop ( -1 ) 02T { $_result = ^result ( ^iswordavailableinsentence ( ^0 $_sentenceindex $_startindex false ) ) $_startindex += 1 ^if 00W( $_result != NOPROBLEM or $_startindex > $_endindex ) 00p{ ^end ( LOOP ) } 004 } ^if 00t( $_result != NOPROBLEM ) 00q{ ^fail ( CALL ) } 004 ^return ( $_endindex ) `
^nextwordposition o 0 0 C( ^word ^sentenceindex $$word $$wordnumber $_refs ) $$positionindexnew = null $$word = ^0 $$word = ^substitute ( character $$word \" "" ) $_refs = $gleaninfo.toplevelread.$$word @1 = ^query ( exact_s $_refs ? ? ) $$wordnumber = ^length ( @1 ) $$sentenceid = ^1 ^loop ( $$wordnumber ) 027 { $$positionindexnew = ^first ( @1object ) ^if 014( ^iswordavailableinsentence ( ^0 $$sentenceid $$positionindexnew false ) ) 00p{ ^end ( LOOP ) } 004 } ^return ( ^getwordindexfromposition ( $$positionindexnew ) ) `
^directinputmatch o 0 0 C( ^label ^isaction $_label $_lcbotname $_numwords $_word $_concept $_wordarray $_positionfield $_avail $_fact $_posn $_posnlist ) $_label = ^pos ( lowercase ^0 ) @2 = ^burst ( $_label " " ) $_lcbotname = ^pos ( lowercase $botname ) $_numwords = ^length ( @2 ) ^loop ( -1 ) 0dA { $_word = ^first ( @2subject ) ^if 00T( $_numwords > 1 and ^isignorereadword ( $_word ) ) 00q{ ^next ( LOOP ) } 004 $_word = ^pos ( lowercase $_word ) $_concept = ^join ( ~ bot- $_lcbotname - $_word ) ^if 00n( ! $displayglean ) 03Q{ ^if 00a( ^1 ) 00X{ $_wordarray = $gleaninfo.toplevelread.$_concept } 00- else ( 1 ) 00U { $_wordarray = $gleaninfo.toplevelread.$_word } 004 ^if 00^( ! $_wordarray or ! ^query ( exact_s $_wordarray ? ? ? ? @1 ) ) 00s{ ^return ( null ) } 004 $_positionfield = object } 02@ else ( 1 ) 02M { ^notrace ( ^if 01I( ! ^query ( exact_so $gleaninfo.menuread ? $_word ? ? @1 ) and ! ^query ( exact_so menuread ? $_concept ? ? @1 ) ) 00s{ ^return ( null ) } 004 ) $_positionfield = verb } 004 $_avail = null ^loop ( -1 ) 02~ { $_fact = ^first ( @1fact ) $_posn = ^field ( $_fact $_positionfield ) ^if 00G( ^iswordavailable ( $_word $_posn ) ) 01d{ $_avail = 1 $_posnlist = ^join ( AUTOSPACE $_posnlist $_posn ) ^end ( LOOP ) } 004 } ^if 00h( ! $_avail ) 00s{ ^return ( null ) } 004 } @2 = ^burst ( $_posnlist ) ^loop ( -1 ) 00% { $_posn = ^first ( @2subject ) ^markusedposition ( $_posn ) } ^return ( ^0 ) `
^create_element_array o 0 0 E( $_jsonflag $_jsonarray $_startpath $_template $$item $_json $_base $_element ) $_json = $_jsonarray ^if 00j( $_startpath ) 00W{ $_json = ^jsonpath ( $_startpath $_jsonarray ) } 004 ^if 00k( ! $_jsonflag ) 00y{ $_jsonflag = transient } 004 $_base = ^jsoncreate ( $_jsonflag array ) ^if 00B( ^query ( exact_s $_json ? ? ) ) 02L{ ^loop ( -1 ) 02n { $$item = ^last ( @0object ) $_element = ^jsonparse ( $_jsonflag NOFAIL $_template ) ^if 00h( $_element ) 00Y{ ^jsonarrayinsert ( $_jsonflag $_base $_element ) } 004 } } 004 ^return ( $_base ) `
^extract_alternates o 0 0 C( ^array ^showbotname $_newarray $_alt $_label $_name ) $_newarray = ^jsoncreate ( TRANSIENT array ) @0 = ^query ( exact_s ^0 ? ? ) ^loop ( -1 ) 03* { $_alt = ^first ( @0object ) $_label = ^taskdisplayname ( $_alt.value ) ^if 00h( ! $_label ) 00y{ $_label = $_alt.intent } 004 ^if 00a( ^1 ) 00W{ $_name = ^join ( $_alt.botname ":  " $_label ) } 00I else ( 1 ) 00s { $_name = $_label } 004 ^jsonarrayinsert ( TRANSIENT $_newarray $_name ) } ^return ( $_newarray ) `
^parsepossessive o 0 0 B( ^word ) _1 = null _0 = ^burst ( ^0 \' ) ^if 00f( _1 == s ) 00w{ _1 = ^join ( \' _1 ) } 00B else ( 1 ) 00l { _1 = null } 004 `
^getalphafornumber o 0 0 B( ^numberindex $_displaychar ) $_displaychar = ^0 ^if 00p( $_displaychar > 0 ) 00u{ $_displaychar -= 1 } 004 $_displaychar = ^nth ( ~alphanumbers $_displaychar ) ^return ( $_displaychar ) `
^getnumberforalpha o 0 0 B( ^alphachar $_numberindex ) $_numberindex = ^0 ^if 00J( pattern =f$_numberindex?~alphanumbers ) 019{ $_numberindex = ^find ( ~alphanumbers $_numberindex ) $_numberindex += 1 } 00# else 00q( $_numberindex != 0 ) 00u{ $_numberindex = -1 } 004 ^return ( $_numberindex ) `
^generatechoicelist o 0 0 H( ^array ^path ^isaction ^alternatepath ^sortlist ^ignoreinput ^valuepath $_dynamicdropdownarray $_emptyobject $_initialdisplaycountervalue $_indexcounter $_postgleandata $_postgleanoption $_founddirect $_postgleanvaluelc $_len $_label $_object $_tmpaccstatus $_labellc $_displaychar $_displayvalue $_nummatches $_numwordsmatched $_displaynumberindex $_labelfact $_choice $_valuefact ) $_dynamicdropdownarray = ^0 $$lengthofjson = ^length ( $_dynamicdropdownarray ) ^if 00r( $$lengthofjson == 1 ) 02i{ $_emptyobject = $_dynamicdropdownarray[0] $$lengthofjson = ^length ( $_emptyobject ) ^if 00r( $$lengthofjson == 0 ) 00F{ $_dynamicdropdownarray = null } 004 } 004 $_initialdisplaycountervalue = $displaycounter $_indexcounter = 0 $_postgleandata = null $_postgleanoption = null $_founddirect = null $_postgleanvaluelc = ^pos ( lowercase $$postgleanvalue ) @18 = null @19 = null $_len = ^length ( $_dynamicdropdownarray ) ^loop ( $_len ) 0vU { $_label = "" $_object = $_dynamicdropdownarray[$_indexcounter] $_indexcounter += 1 ^if 00x( ^extract ( ^1 0 1 ) == \^ ) 00B{ $_label = ^1 ( $_object ) } 01L else ( 1 ) 01v { ^nofail ( RULE $_label = ^jsonpath ( ^1 $_object ) ) $_label = ^jsonundecodestring ( $_label ) } 004 ^if 00l( $_label == "" ) 02R{ ^if 00E( ^3 and ^jsonpath ( ^3 $_object ) ) 01v{ ^nofail ( RULE $_label = ^jsonpath ( ^3 $_object ) ) $_label = ^jsonundecodestring ( $_label ) } 00K else ( 1 ) 00u { $_label = $_object } 004 } 004 ^if 00t( $$appendaccountstatus ) 02p{ $_tmpaccstatus = $_object.status ^if 00m( $_tmpaccstatus ) 01u{ $_tmpaccstatus = ^jsonundecodestring ( $_tmpaccstatus ) $_label = ^"$_label - $_tmpaccstatus" } 004 } 004 $_labellc = ^pos ( lowercase $_label ) $displaycounter += 1 $_displaychar = ^getalphafornumber ( $displaycounter ) ^nofail ( RULE @19 += ^createfact ( $_label displaylabel $_displaychar ) ) $_displayvalue = $_object ^if 00a( ^6 ) 03f{ ^if 00x( ^extract ( ^6 0 1 ) == \^ ) 00I{ $_displayvalue = ^6 ( $_object ) } 01c else ( 1 ) 00? { ^nofail ( RULE $_displayvalue = ^jsonpath ( ^6 $_object ) ) } 004 ^if 00o( ! $_displayvalue ) 00B{ $_displayvalue = $_object } 004 } 01q else 00H( ^istransientjson ( $_displayvalue ) ) 00N{ ^makejsonpermanent ( $_displayvalue ) } 004 ^nofail ( RULE @18 += ^createfact ( $_displaychar displayvalue $_displayvalue ) ) ^if 00a( ^5 ) 00q{ ^next ( LOOP ) } 004 ^if 00T( $_label != null and $_label == $$postgleanvalue ) 00*{ $_postgleandata = $_displayvalue $_postgleanvaluelc = null } 0bn else 00^( ! $_founddirect and ^directinputmatch ( $_label ^2 ) != NULL ) 01E{ $_founddirect = 1 $$postgleanvalue = $_label $_postgleandata = $_displayvalue $_postgleanvaluelc = null } 08Y else 00q( $_postgleanvaluelc ) 08p{ @0 = ^intersectwords ( $_labellc $_postgleanvaluelc ) $_nummatches = ^length ( @0 ) ^if 00o( $_nummatches > 0 ) 06Q{ ^if 00F( $_nummatches == $_numwordsmatched ) 03E{ ^if 00s( ! $$postgleanoptions ) 027{ $$postgleanoptions = ^jsoncreate ( transient array ) ^jsonarrayinsert ( transient $$postgleanoptions $_postgleanoption ) $_postgleanoption = null } 004 ^jsonarrayinsert ( transient $$postgleanoptions $_displayvalue ) } 02z else 00E( $_nummatches > $_numwordsmatched ) 01Z{ $_postgleanoption = $_displayvalue $_numwordsmatched = $_nummatches ^delete ( $$postgleanoptions ) $$postgleanoptions = null } 004 } 004 } 004 } ^if 00a( ^4 ) 04U{ $_displaynumberindex = $_initialdisplaycountervalue ^sort ( alpha @19subject @18 ) ^loop ( -1 ) 03o { $_displaynumberindex += 1 $_labelfact = ^first ( @19fact ) $_choice = ^getalphafornumber ( $_displaynumberindex ) ^revisefact ( $_labelfact null null $_choice ) $_valuefact = ^first ( @18fact ) ^revisefact ( $_valuefact $_choice null null ) } } 004 ^if 00a( ^5 ) 00s{ ^return ( null ) } 004 ^if 00s( $displaycounter == 1 ) 00C{ ^return ( $_displayvalue ) } 004 ^if 00n( $_postgleandata ) 00W{ $$fromuserdata = 1 ^return ( $_postgleandata ) } 004 ^if 00p( $_postgleanoption ) 00Y{ $$fromuserdata = 1 ^return ( $_postgleanoption ) } 004 ^return ( null ) `
^addlabelatindex o 0 0 C( ^label ^index $_index $_label $_tmp ) $_index = ^1 $_label = ^0 @19 += ^createfact ( $_label displaylabel $_index ) $_tmp = ^createfact ( $_index displayvalue default ) `
^generate_choice o 0 0 I( ^array ^path ^zerofield ^isaction ^alternatepath ^ignoreinput ^valuepath ^sortlist ) ^flush_choice ( false ) $displaycounter = null @19 = null ^if 00a( ^2 ) 00B{ ^addlabelatindex ( ^2 0 ) } 004 $displaycounter = 0 ^generatechoicelist ( ^0 ^1 ^3 ^4 ^7 ^5 ^6 ) `
^showchoicelist o 0 0 C( ^ignoretillindex ^ignoreafterindex $_tmpmsg $_label $_choice $_displaynumberindex $_labelfact ) ^if 00D( $taskinfo.currentintendedaction ) 00t{ $displayglean = 1 } 004 @18 = ^query ( exact_v ? displayvalue ? ) @19 = ^query ( exact_v ? displaylabel ? ) ^if 00d( ! @19 ) 02${ $_tmpmsg = ^messagemap ( "^I don't see any available choices" "^I don't see any available choices." ) ^print ( $_tmpmsg ) ^sendvalidationsummary ( $_tmpmsg ) ^reuse ( ~no_task.cancel_work ) ^end ( INPUT ) } 004 @17 = null ^loop ( -1 ) 021 { $_label = ^next ( FACT @19object ) $_choice = ^getnumberforalpha ( $_label ) @17 += ^createfact ( sortorder sortorder $_choice FACTTRANSIENT ) } ^reset ( @19 ) ^sort ( @17object @19 @18 ) $_displaynumberindex = ^first ( @17object ) ^loop ( -1 ) 03Y { $_labelfact = ^first ( @19fact ) $_choice = $_labelfact.object ^if 00@( $_displaynumberindex > ^0 and $_displaynumberindex <= ^1 ) 01J{ $_label = $_labelfact.subject $_tmpmsg = ^"$_tmpmsg $_choice) $_label \n" ^addtofieldchoicesjson ( $_label ) } 004 $_displaynumberindex += 1 } ^flushoutput ( ) ^return ( $_tmpmsg ) `
^show_choice o 0 0 B( ^message $_tmpchoicelist $_tmpmsg ) ^notrace ( ^flush_menuread ( ) ) $_tmpchoicelist = ^showchoicelist ( -1 100000 ) $_tmpmsg = ^join ( ^0 \n $_tmpchoicelist ) ^return ( $_tmpmsg ) `
^display_choice o 0 0 G( ^array ^path ^zerofield ^message ^alternatepath ^valuepath $_junk $_tmpchoices ) $_junk = ^generate_choice ( ^0 ^1 ^2 null ^4 null ^5 ) $protectglean = 1 $_tmpchoices = ^show_choice ( ^3 ) ^return ( $_tmpchoices ) `
^addttimerepresentations o 0 0 B( ^iptoken ) ^if 00H( ^0 == pm or ^0 == p.m or ^0 == p.m. ) 01c{ $$ismenureadtime = true @16 += ^createfact ( userdata pm pm FACTTRANSIENT ) } 0bP else 00H( ^0 == am or ^0 == a.m or ^0 == a.m. ) 01c{ $$ismenureadtime = true @16 += ^createfact ( userdata am am FACTTRANSIENT ) } 09$ else 00w( $$ismenureadtime == true ) 09p{ _19 = ^burst ( count ^0 . ) ^if 00f( _19 > 1 ) 01p{ @10 = ^burst ( ^0 . ) $$tmphrs = ^first ( @10subject ) $$tmpmins = ^first ( @10subject ) } 030 else ( 1 ) 02X { _19 = ^burst ( count ^0 : ) ^if 00f( _19 > 1 ) 01p{ @10 = ^burst ( ^0 : ) $$tmphrs = ^first ( @10subject ) $$tmpmins = ^first ( @10subject ) } 00T else ( 1 ) 00D { $$tmphrs = ^0 $$tmpmins = 0 } 004 } 004 ^if 00l( $$tmphrs < 10 ) 017{ ^if 00w( ^length ( $$tmphrs ) < 2 ) 00z{ $$tmphrs = ^"0$$tmpHrs" } 004 } 004 ^if 00m( $$tmpmins < 10 ) 01a{ ^if 00x( ^length ( $$tmpmins ) < 2 ) 00B{ $$tmpmins = ^"0$$tmpMins" } 004 } 004 $$tmpvalue = ^"$$tmpHrs:$$tmpMins" @16 += ^createfact ( userdata $$tmpvalue $$tmpvalue FACTTRANSIENT ) } 004 `
^eraseuserdata o 0 0 A( ) ^notrace ( ^if 00W( ^query ( exact_s userdata ? ? ) and ^delete ( @0 ) ) 00b{ } 004 ) `
^detectwords o 0 0 C( ^ismenuresponse ^basesentence $_words $_position $_sentenceindex $_fact ) ^eraseuserdata ( ) $$ismenureadtime = null @16 = null ^if 00a( ^0 ) 02R{ @1 = ^query ( exact_s $gleaninfo.menuread ? ? ) ^loop ( -1 ) 01U { _7 = ^next ( fact @1all ) @16 += ^createfact ( userdata _8 _9 FACTTRANSIENT ) ^notrace ( ^addttimerepresentations ( _8 ) ) } } 05U else ( 1 ) 05E { $_words = $gleaninfo.toplevelread @0 = ^query ( exact_s $_words ? ? ) ^loop ( -1 ) 04l { _7 = ^first ( @0all ) @1 = ^query ( exact_s _9 ? ? ) ^loop ( -1 ) 03m { $_position = ^first ( @1object ) ^if 00a( ^1 ) 01V{ $_sentenceindex = ^getsentenceindexfromposition ( $_position ) ^if 00s( $_sentenceindex < ^1 ) 00q{ ^next ( LOOP ) } 004 } 004 @16 += ^createfact ( userdata $_position _8 FACTTRANSIENT ) } } } 004 $$ismenureadtime = null ^if 00l( $$cheatlocate ) 01Z{ ^log ( Facts to check against...\n ) ^loop ( @16 ) 00= { $_fact = ^next ( FACT @16fact ) ^log ( ^writefact ( $_fact ) \n ) } } 004 `
^saveintent o 0 0 B( $_matchdata $_mode $_data ) ^if 00w( $_matchdata.activityType ) 035{ ^if 00L( ^istransientjson ( $gleaninfo.intents ) ) 00u{ $_mode = TRANSIENT } 00K else ( 1 ) 00u { $_mode = PERMANENT } 004 $_data = ^jsoncopy ( $_mode $_matchdata ) ^jsonarrayinsert ( $_mode $gleaninfo.intents $_data ) } 004 `
^addalternate o 0 0 I( ^botname ^label ^value ^count ^mask ^menusize ^priority ^activitytype $_old $_alt ) ^if 00f( ^7 != 2 ) 03j{ ^if 00E( ^length ( $$alternatearray ) > 0 ) 02D{ $_old = $$alternatearray[0] ^if 00r( $_old.priority < ^6 ) 00~{ $$alternatearray = ^jsoncreate ( TRANSIENT array ) } 00Z else 00r( $_old.priority > ^6 ) 00p{ ^end ( CALL ) } 004 } 004 } 004 $_alt = ^jsoncreate ( transient object ) $_alt.count = ^3 $_alt.menusize = ^5 $_alt.priority = ^6 $_alt.mask = ^4 $_alt.botname = ^0 $_alt.value = ^2 $_alt.intent = ^pos ( lowercase ^1 ) ^logif ( $$cheatlocate "^... ... ... ... added alternative ^2 with priority ^6 menusize ^5 and count ^3 \n" ) ^jsonarrayinsert ( "TRANSIENT UNIQUE" $$alternatearray $_alt ) `
^storematch o 0 0 C( $_matchdata $_value $_len $_oldarray $_counter $_task $_taskname $_oldmatchdata $_size $_oldbot $_junk ) ^saveintent ( $_matchdata ) ^if 00E( $_matchdata.score >= $$bestscore ) 0f!{ ^if 00D( $_matchdata.score > $$bestscore ) 0dm{ $_len = ^length ( $$newarray ) ^if 00h( $_len > 0 ) 0a1{ $_oldarray = $$newarray $$newarray = ^jsoncreate ( TRANSIENT array ) ^logif ( $$cheatlocate "^... ... ... New best score, moving previous best to alternates, priority 4 ... \n" ) $_counter = 0 ^loop ( $_len ) 076 { $_task = $_oldarray[$_counter] $_counter += 1 $_taskname = $_task.name ^if 00p( $$intentmatchdata ) 03s{ $_oldmatchdata = $$intentmatchdata.$_taskname ^if 00B( $_oldmatchdata.priority == 10 ) 025{ ^logif ( $$cheatlocate "^... ... ... ... Keeping perfect match $_taskname \n" ) ^jsonarrayinsert ( TRANSIENT $$newarray $_task ) ^next ( LOOP ) } 004 } 004 $_size = ^burst ( count $_taskname ) @0 = ^jsonparent ( $_task ) $_oldbot = ^last ( @0subject ) ^addalternate ( $_oldbot.name $_taskname $_task $_size null $_size 10 1 ) } } 004 $$bestscore = $_matchdata.score ^if 00Q( $_matchdata.botname and $_matchdata.activity ) 01k{ $_junk = ^createfact ( bestMatchedIntent $_matchdata.botname $_matchdata.activity ) } 004 } 004 ^logif ( $$cheatlocate "^... ... ... ... added $_value for mask $_matchdata.mask \n" ) ^jsonarrayinsert ( TRANSIENT $$newarray $_value ) } 03X else ( 1 ) 03H { ^logif ( $$cheatlocate "^... ... ... Not the best score, perhaps adding as alternate, priority  10 ... \n" ) ^addalternate ( $_matchdata.botname $_matchdata.activity $_value $_matchdata.count $_matchdata.mask $_matchdata.count 10 $_matchdata.activityType ) } 004 `
^formattime o 0 0 D( ^hour ^minute ^second $_hour $_minute $_second ) $$tmpmsg = ^"" $_hour = ^0 $_minute = ^1 $_second = ^2 ^if 00E( $_hour and $_minute and $_second ) 02B{ $_hour = ^get_padded_left ( $_hour 0 2 ) $_minute = ^get_padded_left ( $_minute 0 2 ) $_second = ^get_padded_left ( $_second 0 2 ) $$tmpmsg = ^"\T$_hour\:$_minute\:$_second\Z" } 004 ^return ( $$tmpmsg ) `
^formatdate o 0 0 E( ^format ^year ^month ^date $_year $_month $_date ) $$tmpmsg = ^"" ^if 00o( ^1 and ^2 and ^3 ) 093{ $_year = ^1 $_month = ^2 $_date = ^3 $_month += 1 $_month = ^get_padded_left ( $_month 0 2 ) $_date = ^get_padded_left ( $_date 0 2 ) ^if 00o( ^0 == yyyy-MM-dd ) 00N{ $$tmpmsg = ^"$_year\-$_month\-$_date" } 06a else 00o( ^0 == yyyy/MM/dd ) 00L{ $$tmpmsg = ^"$_year/$_month/$_date" } 059 else 00o( ^0 == dd/MM/yyyy ) 00L{ $$tmpmsg = ^"$_date/$_month/$_year" } 048 else 00o( ^0 == dd-MM-yyyy ) 00N{ $$tmpmsg = ^"$_date\-$_month\-$_year" } 035 else 00o( ^0 == MM-dd-yyyy ) 00N{ $$tmpmsg = ^"$_month\-$_date\-$_year" } 022 else 00o( ^0 == MM/dd/yyyy ) 00L{ $$tmpmsg = ^"$_month/$_date/$_year" } 011 else 00m( ^0 == yyyyMMdd ) 00J{ $$tmpmsg = ^"$_year$_month$_date" } 004 } 004 ^return ( $$tmpmsg ) `
^datetotext o 0 0 C( ^format ^date $_date $_year $_month $_day $_order ) $_date = ^1 ^if 00m( ^0 == yyyyMMdd ) 01P{ $_year = ^extract ( $_date 0 4 ) $_month = ^extract ( $_date 4 6 ) $_day = ^extract ( $_date 6 8 ) $_order = month } 07L else 00I( ^0 == yyyy-MM-dd or ^0 == yyyy/MM/dd ) 01Q{ $_year = ^extract ( $_date 0 4 ) $_month = ^extract ( $_date 5 7 ) $_day = ^extract ( $_date 8 10 ) $_order = month } 05l else 00I( ^0 == mm-dd-yyyy or ^0 == MM/dd/yyyy ) 01Q{ $_month = ^extract ( $_date 0 2 ) $_day = ^extract ( $_date 3 5 ) $_year = ^extract ( $_date 6 10 ) $_order = month } 02* else 00I( ^0 == dd-mm-yyyy or ^0 == dd/mm/yyyy ) 01O{ $_day = ^extract ( $_date 0 2 ) $_month = ^extract ( $_date 3 5 ) $_year = ^extract ( $_date 6 10 ) $_order = day } 00K else ( 1 ) 00u { ^return ( $_date ) } 004 $_month -= 1 $_month = ^getmonthnamefromindex ( $_month ) ^if 00o( $_order == month ) 00J{ $_date = ^"$_month $_day, $_year" } 00Z else ( 1 ) 00J { $_date = ^"$_day $_month, $_year" } 004 ^return ( $_date ) `
^maketimeutc o 0 0 C( ^val ^format $$datetime $$hour $$minute $$second $$year $$month $$date ) $$datetime = ^0 _18 = ^burst ( $$datetime "T" ) _19 = ^burst ( _19 "Z" ) _5 = ^burst ( _19 ":" ) $$hour = _5 $$minute = _6 $$second = _7 $$remove_offset = ^burst ( count $$second + ) ^if 00s( $$remove_offset == 2 ) 013{ $$remove_offset = ^burst ( $$second + ) $$second = $$remove_offset } 02x else ( 1 ) 02h { $$remove_offset = ^burst ( count $$second - ) ^if 00s( $$remove_offset == 2 ) 013{ $$remove_offset = ^burst ( $$second - ) $$second = $$remove_offset } 004 } 004 _5 = ^burst ( _18 - ) $$year = _5 $$month = _6 $$date = _7 $$month -= 1 _18 = ^burst ( $utcoffset : ) _14 = ^burst ( count _18 + ) ^if 00g( _14 == 1 ) 00O{ _14 = ^burst ( _18 + ) $$operation = - } 00$ else ( 1 ) 00O { _14 = ^burst ( _18 - ) $$operation = + } 004 $$hour = ^compute ( $$hour $$operation _14 ) $$minute = ^compute ( $$minute $$operation _19 ) ^notrace ( ^respond ( ~date_overflow ) ) $$formatted_date = ^formatdate ( yyyy-MM-dd $$year $$month $$date ) $$formatted_time = ^formattime ( $$hour $$minute $$second ) $$datetime = ^"$$formatted_date$$formatted_time" ^return ( $$datetime ) `
^maketimelocal o 0 0 C( ^val ^format $$datetime $$year $$month $$day $_ampm ) $$datetime = ^0 ^if 00q( $$datetime == null ) 00s{ ^return ( NULL ) } 0dU else 00!( ^1 == YYYY-MM-DDThh:mm:ssZ or ^1 == YYYY-MM-DDThh:mm:ss ) 0c1{ _18 = ^burst ( $$datetime "T" ) _19 = ^burst ( _19 "Z" ) _5 = ^burst ( _19 ":" ) $$hour = _5 $$minute = _6 $$second = _7 _5 = ^burst ( _18 - ) $$year = _5 $$month = _6 $$date = _7 $$month -= 1 _18 = ^burst ( $utcoffset : ) _14 = ^burst ( count _18 + ) ^if 00g( _14 == 1 ) 00O{ _14 = ^burst ( _18 + ) $$operation = + } 00$ else ( 1 ) 00O { _14 = ^burst ( _18 - ) $$operation = - } 004 $$hour = ^compute ( $$hour $$operation _14 ) $$minute = ^compute ( $$minute $$operation _19 ) ^respond ( ~date_overflow ) $$month = ^getmonthnamefromindex ( $$month ) $_ampm = null ^if 00j( $$hour > 11 ) 01r{ $$tmp = $$hour - 12 ^if 00i( $$tmp == 0 ) 00m{ $$tmp = 12 } 004 $$hour = $$tmp $_ampm = PM } 00D else ( 1 ) 00n { $_ampm = AM } 004 $$hour = ^get_padded_left ( $$hour 0 2 ) $$minute = ^get_padded_left ( $$minute 0 2 ) $$datetime = ^"$$month $$date, $$year ($utcoffset) at $$hour\:$$minute $_ampm" } 00~ else ( 1 ) 00K { $$datetime = ^datetotext ( ^1 ^0 ) } 004 ^return ( $$datetime ) `
^verifyseparation o 0 0 C( ^label ^sentenceindex $$word $$menusize $$original $$tmp $$canonical $$conceptname $$mask $$sentenceindex $$wordindex $$count $$sentenceallowed $$matchindex $_posn ) @18 = ^burst ( ^0 ) ^loop ( -1 ) 0bb { $$word = ^first ( @18subject ) ^if 00A( ^isignorereadword ( $$word ) ) 00q{ ^next ( LOOP ) } 09Y else ( 1 ) 09I { $$menusize += 1 $$word = ^pos ( lowercase $$word ) $$original = $$word $$tmp = ^pos ( canonical $$word ) $$canonical = $$word ^if 00t( $$tmp != unknown-word ) 00v{ $$canonical = $$tmp } 004 @15 = null @15 += ^createfact ( titledata $$conceptname $$conceptname FACTTRANSIENT ) @15 += ^createfact ( titledata $$word $$word FACTTRANSIENT ) @15 += ^createfact ( titledata $$canonical $$canonical FACTTRANSIENT ) ^notrace ( @2 = ^intersectfacts ( @16object @15object ) ) ^if 00a( @2 ) 033{ ^loop ( -1 ) 02S { $_posn = ^first ( @2verb ) $$sentenceindex = ^getsentenceindexfromposition ( $_posn ) ^if 00t( $$sentenceindex != ^1 ) 00q{ ^next ( LOOP ) } 004 $$wordindex = ^getwordindexfromposition ( $_posn ) } } 004 } 004 } ^return ( $$count ) `
^findcommonsentenceindex o 0 0 C( $_labelsize $_data $_numsentences $_sentencecounts $_commonwords $_fact $_sentence $_sentenceindex $_word $_wordindexes $_index $_numwords $_wordindex $_mask $_sentencedata $_bestsentence ) $_numsentences = ^length ( $_data ) ^if 00r( $_numsentences == 0 ) 00q{ ^return ( -1 ) } 004 $_sentencecounts = ^jsoncreate ( transient object ) $_commonwords = 0 @8 = ^query ( exact_s $_data ? ? ) ^loop ( -1 ) 0ga { $_fact = ^first ( @8fact ) $_sentence = $_fact.object $_sentenceindex = $_fact.verb $_word = 1 ^loop ( $_labelsize ) 0ez { ^if 00p( $_sentence.$_word ) 0dZ{ $_wordindexes = $_sentence.$_word.wordindex $_index = 0 $_numwords = ^length ( $_wordindexes ) ^loop ( $_numwords ) 0c9 { $_wordindex = $_wordindexes[$_index] $_wordindex -= 1 $_mask = ^compute ( 2 power $_wordindex ) $_sentencedata = $_sentencecounts.$_sentence ^if 00o( ! $_sentencedata ) 02a{ $_sentencedata = ^jsoncreate ( transient object ) $_sentencedata.count = 1 $_sentencedata.mask = $_mask $_sentencecounts.$_sentence = $_sentencedata } 027 else ( 1 ) 01$ { ^if 00A( $_sentencedata.mask & $_mask ) 00b{ } 018 else ( 1 ) 00% { $_sentencedata.count += 1 $_sentencedata.mask |= $_mask } 004 } 004 ^if 00o( ! $_bestsentence ) 016{ $_bestsentence = $_sentenceindex $_commonwords = $_sentencedata.count } 041 else 00I( $_sentencedata.count > $_commonwords ) 016{ $_bestsentence = $_sentenceindex $_commonwords = $_sentencedata.count } 02l else 016( $_sentencedata.count = $_commonwords and $_sentenceindex < $_bestsentence ) 016{ $_bestsentence = $_sentenceindex $_commonwords = $_sentencedata.count } 004 $_index += 1 } } 004 $_word += 1 } } ^if 00o( ! $_bestsentence ) 00v{ $_bestsentence = -1 } 004 ^return ( $_bestsentence ) `
^findbestwordindex o 0 0 D( $_previouswordindex $_currentwords $_nextwords $_len $_lennext $_prevdiff $_bestwordindex $_closest $_index $_wordindex $_nextdiff $_nextindex $_nextwordindex $_totaldiff ) $_len = ^length ( $_currentwords ) ^if 00i( $_len == 1 ) 00F{ ^return ( $_currentwords[0] ) } 004 $_lennext = ^length ( $_nextwords ) $_prevdiff = 0 $_bestwordindex = 500 $_closest = 500 $_index = 0 ^loop ( $_len ) 0aU { $_wordindex = $_currentwords[$_index] ^if 00r( $_previouswordindex ) 01B{ $_prevdiff = $_wordindex - $_previouswordindex ^if 00m( $_prevdiff < 0 ) 00s{ $_prevdiff *= -1 } 004 } 004 $_nextdiff = 0 $_nextindex = 0 ^loop ( -1 ) 07z { ^if 00l( $_lennext > 0 ) 021{ $_nextwordindex = $_nextwords[$_nextindex] $_nextdiff = $_nextwordindex - $_wordindex ^if 00m( $_nextdiff < 0 ) 00s{ $_nextdiff *= -1 } 004 } 01* else 00t( ! $_previouswordindex ) 01w{ ^if 00B( $_wordindex < $_bestwordindex ) 00F{ $_bestwordindex = $_wordindex } 004 ^end ( LOOP ) } 004 $_totaldiff = $_prevdiff + $_nextdiff ^if 00P( $_totaldiff > 0 and $_totaldiff < $_closest ) 00#{ $_closest = $_totaldiff $_bestwordindex = $_wordindex } 004 $_nextindex += 1 ^if 00v( $_nextindex > $_lennext ) 00p{ ^end ( LOOP ) } 004 } $_index += 1 } ^return ( $_bestwordindex ) `
^cleanlabel o 0 0 C( $_label $_activitytype $_word $_cleanlabel ) @0 = ^tokenize ( WORD $_label ) ^loop ( -1 ) 038 { $_word = ^first ( @0subject ) ^if 00j( $_word == ? ) 00q{ ^next ( LOOP ) } 004 ^if 00r( $_activitytype == 3 ) 00Y{ $_word = ^substitute ( character $_word \$ "^" ) } 004 $_cleanlabel = ^join ( AUTOSPACE $_cleanlabel $_word ) } $_cleanlabel = ^pos ( lowercase $_cleanlabel ) ^return ( $_cleanlabel ) `
^findlabelmatchcount o 0 0 E( ^botname ^label ^activitytype $_matchdata $_tmp $_lcbotname $_lclabel $_labelsize $_ignorewords $_data $_matchwords $_firstword $_lclabelwordscount $_possessive $_word $_canon $_checkignore $_conceptname $_posn $_wordindex $_sentenceindex $_sentence $_inputword $_obj $_titleindex $_matchcounter $_matchexactcounter $_priority $_mask $_currentwords $_nextwords $_nextindex $_bestwordindex $_previouswordindex $_hasverb $_hasnoun $_firstwordmatch $_history ) $_tmp = ^2 $_lcbotname = ^pos ( lowercase ^0 ) $_lclabel = ^cleanlabel ( ^1 ^2 ) ^if 00a( ^2 ) 01h{ $_matchdata.botname = ^0 $_matchdata.activity = ^1 $_matchdata.activityType = ^2 } 004 $_matchdata.count = 0 $_matchdata.exactcount = 0 $_matchdata.labelsize = 0 $_matchdata.ignorewords = 0 $_matchdata.firstwordmatch = null $_matchdata.mask = 0 $_matchdata.priority = 0 $_labelsize = 0 $_ignorewords = 0 $_data = ^jsoncreate ( transient object ) @3 = null @18 = ^burst ( $_lclabel " " ) $_matchwords = null $_firstword = null $_lclabelwordscount = ^length ( @18 ) ^loop ( -1 ) 0DW { ^if 00k( $_possessive ) 00M{ $_word = $_possessive $_canon = null } 025 else ( 1 ) 01@ { $_word = ^first ( @18subject ) $_canon = ^pos ( canonical $_word ) ^if 00v( $_canon == unknown-word ) 00q{ $_canon = null } 004 } 004 ^if 00o( $_labelsize == 0 ) 00w{ $_firstword = $_word } 004 ^if 00v( $_lclabelwordscount > 1 ) 02S{ $_checkignore = 1 ^if 00A( ^2 == 3 and $_word ? ~qwords ) 00w{ $_checkignore = null } 004 ^if 00S( $_checkignore and ^isignorereadword ( $_word ) ) 00J{ $_ignorewords += 1 ^next ( LOOP ) } 004 } 004 ^if 00m( ! $_possessive ) 00&{ ^parsepossessive ( $_word ) $_word = _0 $_possessive = _1 } 00L else ( 1 ) 00v { $_possessive = null } 004 $_conceptname = ^join ( ~ bot- $_lcbotname - task - $_lclabel - $_word ) ^if 00$( ^query ( direct_so taskignoreword ? $_conceptname 1 ? @0 ) ) 00J{ $_ignorewords += 1 ^next ( LOOP ) } 004 @15 = null $_labelsize += 1 ^if 00B( ^length ( $_conceptname ) > 0 ) 02t{ ^logif ( $$cheatlocate "^... ... ... checking task word \"$_word\" using $_conceptname \n" ) @15 += ^createfact ( titledata $_conceptname $_conceptname FACTTRANSIENT ) } 01p else ( 1 ) 019 { ^logif ( $$cheatlocate "^... ... ... checking task word \"$_word\" \n" ) } 004 ^if 00n( ! ^2 or ^2 == 3 ) 00-{ @15 += ^createfact ( titledata $_word $_word FACTTRANSIENT ) } 004 ^if 00r( ^2 == 3 and $_canon ) 00={ @15 += ^createfact ( titledata $_canon $_canon FACTTRANSIENT ) } 004 ^notrace ( @2 = ^intersectfacts ( @16object @15object ) ) ^if 00a( @2 ) 0k7{ ^loop ( -1 ) 0jW { $_posn = ^first ( @2verb ) $_wordindex = ^getwordindexfromposition ( $_posn ) $_sentenceindex = ^getsentenceindexfromposition ( $_posn ) $_sentence = $_data.$_sentenceIndex ^if 00R( $_sentence.$_labelsize.inputwords.$_wordIndex ) 00q{ ^next ( LOOP ) } 004 $_inputword = $gleaninfo.inputwords.$_posn ^logif ( $$cheatlocate "^... ... ... ... match at $_posn with \"$_inputword\" \n" ) ^notrace ( ^if 00I( ! ^iswordavailable ( $_word $_posn ) ) 00q{ ^next ( LOOP ) } 004 ) ^if 012( $$botnameposition and ^iswordwithinrange ( $_posn $$botnameposition ) ) 00q{ ^next ( LOOP ) } 004 ^logif ( $$cheatlocate "^... ... ... ... ... and available \n" ) ^if 00k( ! $_sentence ) 01i{ $_sentence = ^jsoncreate ( transient object ) $_data.$_sentenceIndex = $_sentence } 004 ^if 00w( ! $_sentence.$_labelsize ) 02Y{ $_obj = ^jsoncreate ( transient object ) $_obj.labelword = $_word $_obj.inputwords = ^jsoncreate ( transient object ) $_obj.wordindex = ^jsoncreate ( transient array ) $_sentence.$_labelsize = $_obj } 004 $_sentence.$_labelsize.inputwords.$_wordIndex = $_inputword ^if 00t( $_inputword == $_word ) 03e{ ^if 00H( ! $_sentence.$_labelsize.foundexact ) 02v{ ^nofail ( RULE ^delete ( $_sentence.$_labelsize.wordindex ) ) $_sentence.$_labelsize.wordindex = ^jsoncreate ( transient array ) $_sentence.$_labelsize.foundexact = true } 004 } 011 else 00F( $_sentence.$_labelsize.foundexact ) 00q{ ^next ( LOOP ) } 004 ^jsonarrayinsert ( $_sentence.$_labelsize.wordindex $_wordindex ) } } 004 } $_matchdata.labelsize = $_labelsize ^if 00v( ^length ( $_data ) == 0 ) 00p{ ^end ( CALL ) } 004 $_sentenceindex = ^findcommonsentenceindex ( $_labelsize $_data ) ^logif ( $$cheatlocate "^... ... ... best sentence is $_sentenceindex \n" ) ^nofail ( RULE ^restoregleansentence ( $_sentenceindex ) ) $_titleindex = 1 $_matchcounter = 0 $_matchexactcounter = 0 $_priority = 2 $_sentence = $_data.$_sentenceIndex ^loop ( $_labelsize ) 0lp { ^if 00n( $_labelsize < 8 ) 00o{ $_mask <<= 8 } 004 ^if 00v( $_sentence.$_titleindex ) 0j!{ $_word = $_sentence.$_titleindex.labelword $_currentwords = $_sentence.$_titleindex.wordindex $_nextwords = null $_nextindex = $_titleindex ^loop ( -1 ) 02H { $_nextindex += 1 ^if 00x( $_nextindex > $_labelsize ) 00p{ ^end ( LOOP ) } 004 ^if 00u( $_sentence.$_nextIndex ) 00-{ $_nextwords = $_sentence.$_nextIndex.wordindex ^end ( LOOP ) } 004 } $_bestwordindex = ^findbestwordindex ( $_previouswordindex $_currentwords $_nextwords ) $_inputword = $_sentence.$_titleindex.inputwords.$_bestwordindex ^logif ( $$cheatlocate "^... ... ... ... for \"$_word\" using position $_bestwordindex ($_inputword) \n" ) ^if 00D( ^hasanyproperty ( $_word VERB ) ) 00s{ $_hasverb = true } 011 else 00D( ^hasanyproperty ( $_word NOUN ) ) 00s{ $_hasnoun = true } 004 ^if 010( ^2 == 1 and $_titleindex == 1 and $_bestwordindex > 0 and $_hasverb ) 02z{ ^setposition ( _0 $_bestwordindex $_bestwordindex ) ^if 00n( pattern @_0- be ) 00p{ ^end ( LOOP ) } 004 ^if 00F( pattern @_0+ *~4 [ happen occur ] ) 00p{ ^end ( LOOP ) } 004 } 004 $_matchwords = ^join ( AUTOSPACE $_matchwords $_word ) $_matchcounter += 1 ^if 00t( $_word == $_inputword ) 00A{ $_matchexactcounter += 1 } 004 ^if 00n( $_labelsize < 8 ) 00B{ $_mask |= $_bestwordindex } 014 else ( 1 ) 00! { $_mask = ^join ( AUTOSPACE $_mask $_bestwordindex ) } 004 ^if 00p( $_titleindex == 1 ) 01D{ $_firstwordmatch = $_firstword ^if 00F( $_firstwordmatch ? ~prioritywords ) 00r{ $_priority += 1 } 004 } 004 $_previouswordindex = $_bestwordindex } 004 $_titleindex += 1 } ^if 00q( $_matchcounter > 0 ) 07Z{ $_tmp = ^join ( ^0 - ^1 ) $_tmp = ^pos ( lowercase $_tmp ) $_history = ^join ( $_labelsize + $_matchcounter + $_matchwords ) $_tmp = ^createfact ( $_tmp historyinfo $_history ) ^if 00n( $_labelsize < 8 ) 00V{ $_tmp = $_sentenceindex << 56 $_mask |= $_tmp } 014 else ( 1 ) 00! { $_mask = ^join ( AUTOSPACE $_sentenceindex $_mask ) } 004 ^markmaybemask ( ^0 ^1 $_mask ) ^if 00h( $_hasnoun ) 00r{ $_priority += 2 } 004 ^if 00j( ! $_hasverb ) 00r{ $_priority -= 1 } 01C else 00L( $_matchcounter == 1 and $_labelsize > 1 ) 00V{ ^if 00f( ^2 == 1 ) 00r{ $_priority -= 1 } 004 } 004 } 004 $_matchdata.count = $_matchcounter $_matchdata.exactcount = $_matchexactcounter $_matchdata.ignorewords = $_ignorewords $_matchdata.mask = $_mask $_matchdata.firstwordmatch = $_firstwordmatch $_matchdata.priority = $_priority $_matchdata.details = $_data $_matchdata.hasNoun = $_hasnoun $_matchdata.hasVerb = $_hasverb `
^calculatewordcredit o 0 0 B( $_wordposition $_a $_m $_q $_wordcredit ) $_wordposition -= $$wordoffset $_a = $_wordposition - 1 $_m = $_a % 4 $_q = $_a - $_m $_q /= 4 $_q += 1 $_m /= 4 $_q += $_m $_wordcredit = 1000 / $_q ^return ( $_wordcredit ) `
^calculatetasktypebonus o 0 0 C( $_action $_sentenceindex $_tasktypebonus ) $_tasktypebonus = 0 ^if 00Z( $gleaninfo.alert and $gleaninfo.alert.$_sentenceIndex ) 00^{ ^if 00l( $_action == 2 ) 00w{ $_tasktypebonus = 50 } 004 } 02s else 00l( $_action == 3 ) 01f{ ^if 00H( $gleaninfo.question.$_sentenceIndex ) 00w{ $_tasktypebonus = 50 } 004 } 00~ else 00l( $_action == 1 ) 00w{ $_tasktypebonus = 50 } 004 ^return ( $_tasktypebonus ) `
^scoremlexactmatch o 0 0 C( $_matchdata $_value $_basescore $_score $_wordmatch $_exactwords $_wordscore $_matchbonus $_mlbonus $_sentence $_sentenceindex $_mask $_wordmask $_sentenceindexscore $_sentencebonus $_wordposition $_positionbonus $_tasktypebonus $_action $_pattern ) $_matchdata.scoreBreakdown = ^jsoncreate ( transient object ) $_basescore = 1000 + 800 + 200 $_score = $_basescore $_matchdata.scoreBreakdown.coverage = 1000 $_matchdata.scoreBreakdown.spreadBonus = 800 $_matchdata.scoreBreakdown.orderBonus = 200 $_wordmatch = $_matchdata.labelsize * 250 $_score += $_wordmatch $_matchdata.scoreBreakdown.wordMatch = $_wordmatch $_exactwords = $_matchdata.labelsize * 30 $_score += $_exactwords $_matchdata.scoreBreakdown.exactWords = $_exactwords $_wordscore = $_wordmatch + $_exactwords $_matchbonus = $$matchbonus ^if 00m( ! $_matchbonus ) 00s{ $_matchbonus = 0 } 004 $_mlbonus = $_matchdata.labelsize * 2000 $_score += $_mlbonus $_matchdata.scoreBreakdown.mlBonus = $_mlbonus $_score += $_matchbonus $_matchdata.scoreBreakdown.matchBonus = $_matchbonus $_sentence = ^pos ( lowercase $_matchdata.sentence ) $_sentenceindex = 0 ^loop ( -1 ) 0a~ { ^restoregleansentence ( $_sentenceindex ) ^if 00t( ^match ( $_sentence ) ) 09x{ $_mask = ^matches ( ) $_wordmask = $_mask $_mask = ^join ( AUTOSPACE $_sentenceindex $_mask ) $_sentenceindexscore = $_sentenceindex + 1 $_sentencebonus = 4000 / $_sentenceindexscore $_score += $_sentencebonus $_matchdata.scoreBreakdown.sentenceBonus = $_sentencebonus @1 = ^burst ( $_wordmask ) ^loop ( -1 ) 01u { $_wordposition = ^first ( @1subject ) $_positionbonus += ^calculatewordcredit ( $_wordposition ) } $_score += $_positionbonus $_matchdata.scoreBreakdown.positionBonus = $_positionbonus $_tasktypebonus = ^calculatetasktypebonus ( $_action $_sentenceindex ) $_score += $_tasktypebonus $_matchdata.scoreBreakdown.tasktypeBonus = $_tasktypebonus $_matchdata.mask = $_mask ^end ( LOOP ) } 004 $_sentenceindex += 1 } $_matchdata.score = $_score $_matchdata.pattern = $_pattern $_matchdata.count = null $_matchdata.exactcount = null $_matchdata.ignorewords = null $_matchdata.firstwordmatch = null $_matchdata.priority = 10 ^storematch ( $_matchdata $_value ) ^markmaybemask ( $_matchdata.botname $_matchdata.activity $_mask ) ^if 00z( $taskmatch or $$cheatlocate ) 01y{ ^log ( "^... ... ... task matched via ML from $_sentence with mask $_mask and score $_score \n" ) } 004 ^logif ( $$cheatscore "^... ... $_matchdata.activity : $_wordscore \+ $_basescore \+ $_sentencebonus \+ $_positionbonus \+ $_tasktypebonus \+ $_matchbonus \+ $_mlbonus \= $_score\n" ) `
^findtaskbypattern o 0 0 C( $_matchdata $_value $_patterns $_sentenceindex $_counter $_numpatterns $_pattern $_mask $_unavailable $_wordindex $_wordmask $_basescore $_score $_wordmatch $_exactwords $_wordscore $_matchbonus $_mlbonus $_sentenceindexscore $_sentencebonus $_wordposition $_positionbonus $_tasktypebonus $_action ) $_patterns = $_value.patterns ^if 00z( ^length ( $_patterns ) == 0 ) 00q{ ^fail ( CALL ) } 004 $_sentenceindex = 0 ^loop ( -1 ) 0Cz { ^restoregleansentence ( $_sentenceindex ) $_counter = 0 $_numpatterns = ^length ( $_patterns ) ^loop ( $_numpatterns ) 0AB { $_pattern = $_patterns[$_counter] $_counter += 1 ^if 00F( ^jsonkind ( $_pattern ) == object ) 00D{ $_pattern = $_pattern.value } 004 ^logif ( $$cheatlocate "^... ... ... checking pattern $_pattern \n" ) ^if 00G( $_pattern and ^match ( $_pattern ) ) 0x5{ $_mask = ^matches ( ) $_unavailable = null @0 = ^burst ( $_mask ) ^loop ( -1 ) 02i { $_wordindex = ^first ( @0subject ) ^if 013( ! ^iswordavailableinsentence ( word $_sentenceindex $_wordindex true ) ) 00H{ $_unavailable = 1 ^end ( LOOP ) } 004 } ^if 00l( $_unavailable ) 00q{ ^next ( LOOP ) } 004 $_wordmask = $_mask $_mask = ^join ( AUTOSPACE $_sentenceindex $_mask ) $_matchdata.scoreBreakdown = ^jsoncreate ( transient object ) $_basescore = 1000 + 800 + 200 $_score = $_basescore $_matchdata.scoreBreakdown.coverage = 1000 $_matchdata.scoreBreakdown.spreadBonus = 800 $_matchdata.scoreBreakdown.orderBonus = 200 $_wordmatch = $_matchdata.labelsize * 250 $_score += $_wordmatch $_matchdata.scoreBreakdown.wordMatch = $_wordmatch $_exactwords = $_matchdata.labelsize * 30 $_score += $_exactwords $_matchdata.scoreBreakdown.exactWords = $_exactwords $_wordscore = $_wordmatch + $_exactwords $_matchbonus = $$matchbonus ^if 00m( ! $_matchbonus ) 00s{ $_matchbonus = 0 } 004 $_mlbonus = 0 ^if 00v( $_matchdata.mlScore > 0 ) 00Z{ $_mlbonus = $_matchdata.mlScore $_mlbonus *= 2000 } 004 $_sentenceindexscore = $_sentenceindex + 1 $_sentencebonus = 4000 / $_sentenceindexscore $_score += $_sentencebonus $_matchdata.scoreBreakdown.sentenceBonus = $_sentencebonus @1 = ^burst ( $_wordmask ) ^loop ( -1 ) 01u { $_wordposition = ^first ( @1subject ) $_positionbonus += ^calculatewordcredit ( $_wordposition ) } $_score += $_positionbonus $_matchdata.scoreBreakdown.positionBonus = $_positionbonus $_tasktypebonus = ^calculatetasktypebonus ( $_action $_sentenceindex ) $_score += $_tasktypebonus $_matchdata.scoreBreakdown.tasktypeBonus = $_tasktypebonus $_score += $_matchbonus $_matchdata.scoreBreakdown.matchBonus = $_matchbonus $_score += $_mlbonus $_matchdata.scoreBreakdown.mlBonus = $_mlbonus $_matchdata.mask = $_mask $_matchdata.score = $_score $_matchdata.pattern = $_pattern $_matchdata.count = null $_matchdata.exactcount = null $_matchdata.ignorewords = null $_matchdata.firstwordmatch = null $_matchdata.priority = 10 ^storematch ( $_matchdata $_value ) ^markmaybemask ( $_matchdata.botname $_matchdata.activity $_mask ) ^if 00z( $taskmatch or $$cheatlocate ) 01t{ ^log ( "^... ... ... task pattern $_pattern matched with mask $_mask and score $_score \n" ) } 004 ^logif ( $$cheatscore "^... ... $_matchdata.activity : $_wordscore \+ $_basescore \+ $_sentencebonus \+ $_positionbonus \+ $_tasktypebonus \+ $_matchbonus \+ $_mlbonus \= $_score\n" ) ^end ( CALL ) } 004 } $_sentenceindex += 1 } ^fail ( CALL ) `
^isauthorizeduseroftask o 0 0 B( ^value $$users ) ^nofail ( RULE $$users = null $$users = ^jsonpath ( ".users" ^0 ) ) ^if 00h( ! $$users ) 00p{ ^end ( CALL ) } 004 ^if 00K( ^query ( direct_so $$users ? $userid ) ) 00s{ ^return ( true ) } 004 ^fail ( CALL ) `
^processlabel o 0 0 G( ^botname $_label ^value ^activitytype ^threshold $_docsmatching $_matchdata $_count $_exactcount $_labelsize $_ignorewords $_mask $_firstwordmatch $_priority $_proportion $_score $_exactwords $_coverage $_sentencebonus $_positionbonus $_spreadbonus $_orderbonus $_actionbonus $_matchbonus $_phrasejoin $_mlbonus $_wordmatch $_sentenceindex $_sentenceindexscore $_wordmask $_ignore $_gaps $_inorder $_wordposition $_lastposition $_firstposition $_previousposition $_maxspread $_usablecount $_difference $_tasktypebonus ) ^if 00Q( ^3 == 1 and ! ^isauthorizeduseroftask ( ^2 ) ) 00p{ ^end ( CALL ) } 004 ^logif ( $$cheatlocate "^... ... $_label \n" ) $_matchdata = ^createoruseobject ( $$intentmatchdata $_label ) $_matchdata.count = 0 ^if 00m( $_docsmatching ) 010{ ^notrace ( ^findlabelmatchcount ( ^0 $_label ^3 $_matchdata ) ) } 004 $_count = $_matchdata.count $_exactcount = $_matchdata.exactcount $_labelsize = $_matchdata.labelsize $_ignorewords = $_matchdata.ignorewords $_mask = $_matchdata.mask $_firstwordmatch = $_matchdata.firstwordmatch $_priority = $_matchdata.priority $_matchdata.score = 0 ^if 00o( $_labelsize == 0 ) 00p{ ^end ( CALL ) } 004 ^if 00M( ^3 and $$intentmatchdata.$_label.mlScore ) 00%{ $_matchdata.mlScore = $$intentmatchdata.$_label.mlScore } 004 ^if 00C( $taskmatch and ! $$cheatlocate ) 02W{ ^log ( "^... $_label" ) ^if 00j( $_labelsize ) 01Y{ ^log ( "^ : $_count of $_labelsize matched with mask $_mask, ignoring $_ignorewords, threshold: ^4, priority: $_priority" ) } 004 ^log ( "^\n" ) } 004 ^logif ( $$cheatlocate "^... ... ... $_count of $_labelsize matched with mask $_mask ignoring $_ignorewords \n" ) ^if 00w( $_matchdata.mlScore > 95 ) 00!{ ^scoremlexactmatch ( $_matchdata ^2 ) ^end ( CALL ) } 004 ^if 01n( $_docsmatching and ^3 and $_count != $_labelsize and ^findtaskbypattern ( $_matchdata ^2 ) ) 00p{ ^end ( CALL ) } 004 ^if 00N( $_count == 0 and $_matchdata.mlScore <= 0 ) 015{ $_matchdata.botname = null $_matchdata.activity = null ^end ( CALL ) } 004 $_proportion = ^compute ( $_count / $_labelsize ) ^if 00Z( ^4 and $_proportion < ^4 and $_matchdata.mlScore <= 0 ) 099{ ^if 00@( $$alternatearray and $$bestscore == 0 and $_priority > 0 ) 07b{ ^if 00S( $_matchdata.count == 1 and $_matchdata.hasVerb ) 00b{ } 06a else ( 1 ) 05& { ^if 00r( ^isrecentbot ( ^0 ) ) 00r{ $_priority += 1 } 004 ^if 00C( $taskmatch and ! $$cheatlocate ) 01f{ ^log ( "^... ... Considering as alternate with final priority $_priority \n" ) } 004 ^logif ( $$cheatlocate "^... ... ... Possibly adding as alternate, final priority $_priority \n" ) ^addalternate ( ^0 $_label ^2 $_count $_mask $_labelsize $_priority ^3 ) $_matchdata.alternatePriority = $_priority ^saveintent ( $_matchdata ) } 004 } 004 $_matchdata.botname = null $_matchdata.activity = null ^end ( CALL ) } 004 $_matchdata.scoreBreakdown = ^jsoncreate ( transient object ) $_score = 0 $_exactwords = 0 $_coverage = 0 $_sentencebonus = 0 $_positionbonus = 0 $_spreadbonus = 0 $_orderbonus = 0 $_actionbonus = 0 $_matchbonus = $$matchbonus ^if 00m( ! $_matchbonus ) 00s{ $_matchbonus = 0 } 004 $_phrasejoin = 0 $_mlbonus = 0 ^if 00v( $_matchdata.mlScore > 0 ) 00Z{ $_mlbonus = $_matchdata.mlScore $_mlbonus *= 2000 } 004 $_wordmatch = $_count * 250 $_score += $_wordmatch $_matchdata.scoreBreakdown.wordMatch = $_wordmatch $_exactwords = $_exactcount * 30 $_score += $_exactwords $_matchdata.scoreBreakdown.exactWords = $_exactwords $_coverage = $_count * 1000 $_coverage /= $_labelsize $_score += $_coverage $_matchdata.scoreBreakdown.coverage = $_coverage ^if 00n( $_labelsize < 8 ) 00G{ $_sentenceindex = $_mask >> 56 } 00^ else ( 1 ) 00Q { $_sentenceindex = ^burst ( ONCE $_mask ) } 004 ^nofail ( RULE ^restoregleansentence ( $_sentenceindex ) ) $_sentenceindexscore = $_sentenceindex + 1 ^if 00j( $_count > 0 ) 00V{ $_sentencebonus = 4000 / $_sentenceindexscore } 004 $_score += $_sentencebonus $_matchdata.scoreBreakdown.sentenceBonus = $_sentencebonus ^if 00n( $_labelsize < 8 ) 00v{ $_wordmask = $_mask } 017 else ( 1 ) 00$ { @1 = ^burst ( $_mask ) $_ignore = ^first ( @1subject ) } 004 $_gaps = $_count - 1 $_inorder = $_gaps ^loop ( $_labelsize ) 085 { ^if 00n( $_labelsize < 8 ) 00~{ $_wordposition = $_wordmask & 255 $_wordmask >>= 8 } 00# else ( 1 ) 00N { $_wordposition = ^first ( @1subject ) } 004 ^if 00q( $_wordposition > 0 ) 05G{ $_positionbonus += ^calculatewordcredit ( $_wordposition ) ^if 00X( ! $_lastposition or $_wordposition > $_lastposition ) 00H{ $_lastposition = $_wordposition } 004 ^if 00Z( ! $_firstposition or $_wordposition < $_firstposition ) 00I{ $_firstposition = $_wordposition } 01p else ( 1 ) 019 { ^if 00H( $_wordposition > $_previousposition ) 00q{ $_inorder -= 1 } 004 } 004 $_previousposition = $_wordposition } 004 } $_positionbonus /= $_labelsize $_score += $_positionbonus $_matchdata.scoreBreakdown.positionBonus = $_positionbonus ^if 00i( $_gaps > 0 ) 01e{ $_orderbonus = 200 * $_inorder $_orderbonus /= $_gaps $_score += $_orderbonus } 004 $_matchdata.scoreBreakdown.orderBonus = $_orderbonus ^if 00D( $_labelsize > 1 and $_count > 1 ) 0cw{ $_maxspread = 800 $_usablecount = $_count $_difference = $_lastposition - $_firstposition + 1 ^if 00u( $_difference < $_count ) 00E{ $_usablecount = $_difference } 004 ^if 00y( $_difference > $_labelsize ) 05z{ ^loop ( -1 ) 04a { ^if 00F( $_firstposition >= $_lastposition ) 00p{ ^end ( LOOP ) } 004 ^setposition ( _0 $_firstposition $_firstposition ) ^if 00w( pattern @_0+ ~phrasejoin ) 00t{ $_phrasejoin += 1 } 01n else 00Y( pattern @_0+ _ *1 ^eval ( ^isignorereadword ( _0 ) ) ) 00t{ $_difference -= 1 } 004 $_firstposition += 1 } ^if 00y( $_difference < $_labelsize ) 00C{ $_difference = $_labelsize } 004 } 004 ^if 00z( $_usablecount < $_labelsize ) 01O{ $_difference += $_labelsize $_difference -= $_usablecount $_maxspread *= $_usablecount $_maxspread /= $_labelsize } 004 $_spreadbonus = $_maxspread * $_labelsize $_spreadbonus /= $_difference $_score += $_spreadbonus $_phrasejoin *= 100 $_score -= $_phrasejoin } 004 $_matchdata.scoreBreakdown.spreadBonus = $_spreadbonus $_matchdata.scoreBreakdown.phraseJoin = $_phrasejoin * -1 $_tasktypebonus = ^calculatetasktypebonus ( ^3 $_sentenceindex ) $_score += $_tasktypebonus $_matchdata.scoreBreakdown.tasktypeBonus = $_tasktypebonus $_score += $_matchbonus $_score += $_mlbonus $_matchdata.scoreBreakdown.matchBonus = $_matchbonus $_matchdata.scoreBreakdown.mlBonus = $_mlbonus $_matchdata.score = $_score ^if 00z( $taskmatch or $$cheatlocate ) 039{ ^log ( "^... ... ... scoring: $_wordmatch \+ $_exactwords \+ $_coverage \+ $_sentencebonus \+ $_positionbonus \+ $_spreadbonus \+ $_orderbonus \+ $_tasktypebonus \+ $_matchbonus \+ $_mlbonus \- $_phrasejoin \= $_score\n" ) } 004 ^logif ( $$cheatscore "^... ... $_label : $_wordmatch \+ $_exactwords \+ $_coverage \+ $_sentencebonus \+ $_positionbonus \+ $_spreadbonus \+ $_orderbonus \+ $_tasktypebonus \+ $_matchbonus \+ $_mlbonus \- $_phrasejoin \= $_score\n" ) ^logif ( $$cheatlocate "^... ... ... Possibly storing exact match \n" ) ^storematch ( $_matchdata ^2 ) $_matchdata.botname = null $_matchdata.activity = null `
^erasetitledata o 0 0 A( ) ^notrace ( ^if 00X( ^query ( exact_s titledata ? ? ) and ^delete ( @0 ) ) 00b{ } 004 ) `
^findmatchingfields o 0 0 F( ^docsmatching ^botname ^activitytype ^array ^threshold $_label $_value ) $$newarray = ^3 @4 = ^query ( exact_v ? displaylabel ? ) @5 = ^query ( exact_v ? displayvalue ? ) ^loop ( -1 ) 04a { ^notrace ( ^erasetitledata ( ) ) $_label = ^last ( @4subject ) $_value = ^last ( @5object ) ^if 00n( ^1 == $tracebot ) 01q{ ^eval ( :trace full ) ^processlabel ( ^1 $_label $_value ^2 ^4 ^0 ) ^eval ( :trace none ) } 01b else ( 1 ) 00* { ^notrace ( ^processlabel ( ^1 $_label $_value ^2 ^4 ^0 ) ) } 004 } ^return ( $$newarray ) `
^matchfieldname o 0 0 C( ^ismenuresponse ^hideambiguitymsg $$newarray $$tmpmodified $$count ) ^notrace ( ^detectwords ( ^0 null ) ) $$newarray = ^jsoncreate ( TRANSIENT array ) $$bestscore = 0 ^notrace ( $$newarray = ^findmatchingfields ( true $botname null $$newarray null ) ) ^if 00z( ^length ( $$newarray ) == 1 ) 00={ @0 = ^query ( exact_sv $$newarray 0 ? 1 ) ^return ( @0object ) } 05N else 00j( $$blockuser ) 00b{ } 05e else 00y( ^length ( $$newarray ) > 1 ) 048{ $$tmpmodified = ^"That was not unique enough" $$substitutefields = ^"" $$substitutefields = ^"$$substituteFields Try again." $$tmpmodified = ^"$$tmpModified $$substituteFields" ^if 00c( ! ^1 ) 01c{ $$tmpmodified = ^messagemap ( "^That was not unique enough" $$tmpmodified ) } 004 ^return ( null ) } 00G else ( 1 ) 00q { ^fail ( RULE ) } 004 `
^getresponsetag o 0 0 A( $_responsetag ) $_responsetag = ^getrule ( TAG ~ ) _0 = ^burst ( $_responsetag . ) $_responsetag = ^join ( _0 . _1 ) ^return ( $_responsetag ) `
^respondchoiceforalphainput o 0 0 B( $_testonly $_retvalue $_retvalueoriginal $_retvalueindex ) $_retvalue = null $_retvalueoriginal = null $_retvalueindex = null ^if 00z( pattern < _ ~alphanumbers > ) 02z{ $_retvalue = _0 $_retvalueoriginal = ^original ( _0 ) $_retvalueoriginal = ^pos ( lowercase $_retvalueoriginal ) $_retvalueindex = ^find ( ~alphanumbers $_retvalueoriginal ) } 004 ^if 00i( $_retvalue ) 04W{ ^if 00$( $_retvalueindex < $displaycounter and $_retvalueindex >= 0 ) 03b{ ^nofail ( RULE ^query ( exact_sv $_retvalueoriginal displayvalue ? 1 ) ) $_retvalue = @0object ^if 00k( ! $_testonly ) 01v{ ^flush_menuread ( ) ^markusedmatch ( $currentsentenceid _0 ) ^nofail ( RULE ^unmark ( * _0 ) ) } 004 } 00J else ( 1 ) 00t { $_retvalue = null } 004 } 004 ^return ( $_retvalue ) `
^respondchoicefornumberinput o 0 0 B( $_testonly $_retvalue ) $_retvalue = null ^if 00X( pattern < _ ~number > =4_0<=$displaycounter =4_0>=0 ) 03E{ ^if 00u( ^original ( _0 ) == _0 ) 02*{ ^nofail ( RULE ^query ( exact_sv _0 displayvalue ? 1 ) ) $_retvalue = @0object ^if 00k( ! $_testonly ) 01v{ ^flush_menuread ( ) ^markusedmatch ( $currentsentenceid _0 ) ^nofail ( RULE ^unmark ( * _0 ) ) } 004 } 004 } 004 ^return ( $_retvalue ) `
^respondchoiceforstringinput o 0 0 A( $_retvalue $_userinputfrommenuchoice $_indexcounter $_foundlabel $_alpha $_label $_alt ) $_retvalue = null ^if 00j( pattern _ * ) 09g{ $_userinputfrommenuchoice = ^original ( _0 ) $_indexcounter = 1 $_foundlabel = null ^loop ( $displaycounter ) 05C { $_alpha = ^getalphafornumber ( $_indexcounter ) $_label = ^query ( exact_vo ? displaylabel $_alpha 1 ? @0subject ) $_label = ^cleanlabel ( $_label null ) ^if 00f( $_label ) 02~{ ^if 00&( ^findtext ( $_label $_userinputfrommenuchoice 0 insensitive ) ) 01R{ $_alt = ^jsoncreate ( transient object ) $_alt.value = $_alpha ^jsonarrayinsert ( transient $$alternatearray $_alt ) } 004 } 004 $_indexcounter += 1 } ^if 00F( ^length ( $$alternatearray ) == 1 ) 01B{ $_alt = $$alternatearray[0] $_retvalue = ^query ( exact_sv $_alt.value displayvalue ? 1 ? @0object ) } 004 } 004 ^return ( $_retvalue ) `
^respondchoice o 0 0 D( $_responsetag $_testonly $_hideambiguitymsg $_retvalue $_newalt $_result $_alpha $_label $_notunique $_alt $_value $_tmpmodified ) $_retvalue = null ^if 00q( ! $$alternatearray ) 010{ $_newalt = 1 $$alternatearray = ^jsoncreate ( TRANSIENT array ) } 004 $_result = ^result ( $_retvalue = ^matchfieldname ( true $_hideambiguitymsg ) ) ^if 00t( $_result == NOPROBLEM ) 06F{ ^flush_menuread ( ) ^if 00i( $_retvalue ) 05l{ ^if 00g( $_newalt ) 00z{ $$alternatearray = null } 004 ^if 00k( ! $_testonly ) 03W{ ^if 00w( ^jsonkind ( $_retvalue ) ) 02t{ $_alpha = ^query ( exact_vo ? displayvalue $_retvalue 1 ? @0subject ) $_label = ^query ( exact_vo ? displaylabel $_alpha 1 ? @0subject ) ^markused ( $botname $_label ) } 00Z else ( 1 ) 00J { ^markused ( $botname $_retvalue ) } 004 } 004 ^return ( $_retvalue ) } 00K else ( 1 ) 00u { $_notunique = true } 004 } 004 ^if 00S( $_newalt and ^length ( $$alternatearray ) == 1 ) 02*{ $_alt = $$alternatearray[0] $_value = $_alt.value ^if 00k( ! $_testonly ) 00Y{ ^flush_menuread ( ) ^markusedmask ( $_alt.mask ) } 004 ^if 00g( $_newalt ) 00z{ $$alternatearray = null } 004 ^return ( $_value ) } 004 $_retvalue = ^respondchoiceforstringinput ( ) ^if 00i( $_retvalue ) 02G{ ^if 00g( $_newalt ) 00z{ $$alternatearray = null } 004 ^if 00k( ! $_testonly ) 014{ ^flush_menuread ( ) ^markusedrange ( $currentsentenceid 1 %length ) } 004 ^return ( $_retvalue ) } 004 ^if 00j( $_notunique ) 02j{ ^if 00k( ! $_testonly ) 01X{ ^markusedrange ( $currentsentenceid 1 %length ) ^if 00l( $_responsetag ) 00O{ ^reuse ( $_responsetag ) ^end ( RULE ) } 004 } 004 } 004 ^if 00Z( pattern < _ ~number > ^length ( $$alternatearray )==0 ) 05m{ ^if 00g( $_newalt ) 00z{ $$alternatearray = null } 004 ^if 00k( ! $_testonly ) 047{ ^flush_menuread ( ) ^markusedmatch ( $currentsentenceid _0 ) $_tmpmodified = ^messagemap ( "^Wrong number" "^Wrong number. Please enter a legal choice." ) ^sendvalidationsummary ( $_tmpmodified ) ^print ( $_tmpmodified ) ^if 00l( $_responsetag ) 00O{ ^reuse ( $_responsetag ) ^end ( RULE ) } 004 } 004 } 0gS else 00-( pattern !$taskinfo.required [ ~no none ignore skip =9%length=0 ] ) 037{ ^if 00g( $_newalt ) 00z{ $$alternatearray = null } 004 ^if 00k( ! $_testonly ) 01%{ ^flush_menuread ( ) $taskinfo.field.amend = null ^markusedrange ( $currentsentenceid 1 %length ) ^acceptvalue ( $xkey $k-novalue ) } 004 } 0cJ else 00m( pattern change ) 04O{ ^if 00g( $_newalt ) 00z{ $$alternatearray = null } 004 ^if 00k( ! $_testonly ) 03z{ ^markusedrange ( $currentsentenceid 1 %length ) ^notrace ( ^reset_lead ( ) ) $_tmpmodified = ^messagemap ( "^What do you want me to do now" "^OK. What do you want me to do now?" ) ^sendquestionsummary ( $_tmpmodified ) $_tmpmodified ^fail ( TOPIC ) } 004 } 07H else 00O( pattern !? ^length ( $$alternatearray )==0 ) 06X{ ^if 00g( $_newalt ) 00z{ $$alternatearray = null } 004 ^if 00k( ! $_testonly ) 05I{ ^flush_menuread ( ) ^markusedrange ( $currentsentenceid 1 %length ) ^if 00s( ! $_hideambiguitymsg ) 038{ $_tmpmodified = ^messagemap ( "^I didn't recognize your choice" "^I didn't recognize your choice.  Try again. If you've changed your mind, type discard." ) ^sendvalidationsummary ( $_tmpmodified ) ^print ( $_tmpmodified ) } 004 ^if 00l( $_responsetag ) 00O{ ^reuse ( $_responsetag ) ^end ( RULE ) } 004 } 004 } 004 ^return ( null ) `
^respond_choice o 0 0 D( $_testonly $_hideambiguitymsg $_noautoresponse $_retvalue $_responsetag ) $_retvalue = null ^if 00q( ! $_noautoresponse ) 00L{ $_responsetag = ^getresponsetag ( ) } 004 $_retvalue = ^respondchoiceforalphainput ( $_testonly ) ^if 00k( ! $_retvalue ) 02t{ $_retvalue = ^respondchoicefornumberinput ( $_testonly ) ^if 00k( ! $_retvalue ) 01c{ $_retvalue = ^respondchoice ( $_responsetag $_testonly $_hideambiguitymsg ) } 004 } 004 ^return ( $_retvalue ) `
^start_intent o 0 0 B( ^topic ) $botinfo.action = ^0 ^gambit ( $botinfo.action ) `
^isnullpattern o 0 0 B( $_pattern $_len ) $_pattern = ^trimwhitespace ( $_pattern ) $_len = ^length ( $_pattern ) $_len -= 2 $_pattern = ^extract ( $_pattern 1 $_len ) $_pattern = ^trimwhitespace ( $_pattern ) ^if 00y( ^length ( $_pattern ) == 0 ) 00s{ ^return ( true ) } 02m else 00m( $_pattern == * ) 00s{ ^return ( true ) } 01G else 00n( $_pattern == *1 ) 00s{ ^return ( true ) } 00Z else 00o( $_pattern == *~1 ) 00s{ ^return ( true ) } 004 ^fail ( CALL ) `
^isallpattern o 0 0 B( $_pattern $_len ) $_pattern = ^trimwhitespace ( $_pattern ) $_len = ^length ( $_pattern ) $_len -= 2 $_pattern = ^extract ( $_pattern 1 $_len ) $_pattern = ^trimwhitespace ( $_pattern ) ^if 00o( $_pattern == \_* ) 00s{ ^return ( true ) } 01K else 00p( $_pattern == \_*1 ) 00s{ ^return ( true ) } 00! else 00q( $_pattern == \_*~1 ) 00s{ ^return ( true ) } 004 ^fail ( CALL ) `
^testrejoinders o 0 0 B( $_rejoinderrule $_id $_baserule $_item $_rule $_pattern $_output $_choice ) $$rejoindermatch = null $$testingrejoinders = true ^if 00p( ! $_rejoinderrule ) 00p{ ^end ( CALL ) } 004 @0 = ^burst ( $_rejoinderrule . ) $_id = ^last ( @0subject ) $_baserule = ^first ( @0subject ) ^loop ( -1 ) 016 { $_item = ^first ( @0subject ) $_baserule = ^join ( $_baserule . $_item ) } ^loop ( -1 ) 08a { $_rule = ^join ( $_baserule . $_id ) $_pattern = ^getrule ( pattern $_rule ) $_pattern = ^stripquotes ( $_pattern ) ^if 00A( ^isnullpattern ( $_pattern ) ) 03E{ $_output = ^getrule ( output $_rule ) $_output = ^join ( x $_output ) ^if 00X( ^findtext ( $_output respond_choice 0 insensitive ) ) 01K{ $_choice = ^respond_choice ( true true ) ^if 00g( $_choice ) 00N{ $$rejoindermatch = true ^end ( LOOP ) } 004 } 004 } 02p else 00z( ^isallpattern ( $_pattern ) ) 00N{ $$rejoindermatch = true ^end ( LOOP ) } 01b else 00s( ^match ( $_pattern ) ) 00N{ $$rejoindermatch = true ^end ( LOOP ) } 004 $_id += 1 } $$testingrejoinders = null `
^consider_authorization o 0 0 A( $$tmpmodified ) ^if 00r( $taskinfo.checkauth ) 03*{ $$tmpmodified = ^messagemap ( "^I'm sorry. Your <botname> access credentials have not been set up yet. You need to get authorized first." "^I'm sorry. Your $botname access credentials have not been set up yet. You need to get authorized first." ) ^cannot_do_request ( $$tmpmodified ) } 004 `
^composeformdata o 0 0 A( $_fieldcount $_count $_customdata $_keyname $_key $_keyvalue $_type $_fieldtype $_tmplatlong $_tmplatitude $_obj $_datetitle $_array $_tmp $_nested $_len ) $_fieldcount = ^length ( $taskinfo.fields ) $_count = 0 $_customdata = ^jsoncreate ( object ) ^loop ( $_fieldcount ) 0Qc { $taskinfo.field = ^jsonpath ( "[$_count]" $taskinfo.fields ) $_count += 1 $_keyname = ^getfieldkey ( $taskinfo.field ) $_key = $_keyname $_keyvalue = $_key $_key = $taskinfo.fieldkeys.$_key $_keyvalue = $taskinfo.fieldvalues.$_keyvalue ^if 00r( $_key != $k-novalue ) 0MB{ $_type = ^getfieldtype ( $taskinfo.field ) $_fieldtype = ^getfieldfieldtype ( $taskinfo.field ) ^if 026( $_fieldtype == textbox or $_fieldtype == email or $_fieldtype == password or $_fieldtype == url or $_fieldtype == textarea or $_fieldtype == default ) 01E{ ^if 00r( $_key and $_keyname ) 00+{ ^insertjsontypedvalue ( $_customdata $_keyname $_key $_type ) } 004 } 0Hy else 00*( $_fieldtype == location and $_keyvalue and $_key and $_keyname ) 04*{ $_tmplatlong = null $_tmplatitude = null $_obj = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_obj title $_key string ) ^if 00G( ^jsonkind ( $_keyvalue ) == object ) 00Y{ $_obj.value = ^jsoncopy ( transient $_keyvalue ) } 018 else ( 1 ) 00% { ^insertjsontypedvalue ( $_obj value $_keyvalue string ) } 004 ^jsonobjectinsert ( $_customdata $_keyname $_obj ) } 0BD else 00P( $_fieldtype == date and $_key and $_keyname ) 04w{ $_datetitle = $_key ^if 00B( ^length ( $_datetitle ) <= 10 ) 00*{ $$tmp = $_key $_datetitle = ^join ( $$tmp T00:00:00.000Z ) } 004 $_obj = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_obj title $_datetitle string ) ^insertjsontypedvalue ( $_obj value $_key $_type ) ^jsonobjectinsert ( $_customdata $_keyname $_obj ) } 0wq else 00*( $_fieldtype == datetime and $_key and $_keyname and $_keyvalue ) 02O{ $_obj = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_obj title $_key string ) ^insertjsontypedvalue ( $_obj value $_keyvalue $_type ) ^jsonobjectinsert ( $_customdata $_keyname $_obj ) } 0sP else 01%( $_fieldtype == dynamicDropDown or $_fieldtype == staticDropDown or $_fieldtype == dynamicDropDownCB or $_fieldtype == staticDropdownCB ) 03w{ ^if 00G( $_keyvalue and $_key and $_keyname ) 02O{ $_obj = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_obj title $_key string ) ^insertjsontypedvalue ( $_obj value $_keyvalue $_type ) ^jsonobjectinsert ( $_customdata $_keyname $_obj ) } 004 } 0nm else 00w( $_fieldtype == typeahead ) 0el{ ^if 00o( $_type == number ) 061{ ^if 00=( $botname == asana or $botname == Bitbucket or $botname == Bugzilla ) 03w{ ^if 00G( $_keyvalue and $_key and $_keyname ) 02O{ $_obj = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_obj title $_key string ) ^insertjsontypedvalue ( $_obj value $_keyvalue $_type ) ^jsonobjectinsert ( $_customdata $_keyname $_obj ) } 004 } 01y else 00r( $_key and $_keyname ) 00+{ ^insertjsontypedvalue ( $_customdata $_keyname $_key $_type ) } 004 } 07Y else 00G( $_keyvalue and $_key and $_keyname ) 079{ $_obj = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_obj title $_key string ) ^if 00n( $_type == array ) 03X{ $_array = ^jsoncreate ( array ) ^if 00E( $taskinfo.field.arrayElementType ) 00R{ $_type = $taskinfo.field.arrayElementType } 004 ^insertjsontypedvalue ( $_obj value $_keyvalue $_type ) ^jsonarrayinsert ( $_array $_obj ) ^jsonobjectinsert ( $_customdata $_keyname $_array ) } 01X else ( 1 ) 01H { ^insertjsontypedvalue ( $_obj value $_keyvalue $_type ) ^jsonobjectinsert ( $_customdata $_keyname $_obj ) } 004 } 004 } 08D else 00!( $_fieldtype == nestedform and $_type == array and $_key ) 03n{ $_array = ^jsoncreate ( array ) @0 = ^query ( exact_s $_key ? ? ) ^loop ( -1 ) 01u { $_tmp = ^last ( @0object ) $_nested = ^jsonparse ( $_tmp ) ^jsonarrayinsert ( $_array $_nested ) } ^jsonobjectinsert ( $_customdata $_keyname $_array ) } 04n else 00V( $_fieldtype == file and $_type == array and $_key ) 03w{ $_tmp = ^jsoncreate ( TRANSIENT array ) $_count = 0 $_len = ^length ( $_key ) ^loop ( $_len ) 01q { $_obj = ^jsonpath ( "[$_count]" $_key ) ^jsonarrayinsert ( $_tmp $_obj.fileId ) $_count += 1 } ^jsonobjectinsert ( $_customdata $_keyname $_tmp ) } 004 } 004 } ^return ( $_customdata ) `
^get_coordinates o 0 0 B( ^location $_location $_results $_locs $_instanceurl $_tmp ) $_location = ^substitute ( character ^0 "_" "%20" ) $_location = ^substitute ( character ^0 " " "+" ) ^loop ( -1 ) 00^ { $_location = ^substitute ( character $_location ++ + FAIL ) } ^if 00k( ! $_location ) 00s{ ^return ( null ) } 004 $_results = ^getcacheitem ( geocode $_location ) ^if 00h( $_results ) 00S{ $_locs = ^jsoncopy ( transient $_results ) } 06h else ( 1 ) 061 { $_instanceurl = ^"http://maps.google.com/maps/api/geocode/json?address=$_location" $_tmp = ^invoke_json ( transient get $_instanceurl null "^get coordinates" get_coordinates maps.google.com ) $_locs = ^create_element_array ( transient $_tmp ".results" "{formatted_address: $$item.formatted_address, location: { latitude: $$item.geometry.location.lat, longitude:$$item.geometry.location.lng}}" ) ^savecacheitem ( geocode $_location $_locs ) } 004 ^return ( $_locs ) `
^parsedefaultfrequencyofupdate o 0 0 B( ^defaultfrequency $$tmp ) $taskinfo.alertfrequencyminutes = null $taskinfo.alertfrequencyhours = null $taskinfo.alerthour = null $taskinfo.alertminute = null _19 = ^burst ( count ^0 ) ^if 00g( _19 == 5 ) 0d^{ @18 = ^burst ( ^0 ) $$tmp = ^first ( @18subject ) _19 = ^burst ( count $$tmp / ) ^if 00g( _19 == 2 ) 02V{ @10 = ^burst ( $$tmp / ) $taskinfo.alertfrequencyminutes = ^first ( @10subject ) ^if 00I( $taskinfo.alertfrequencyminutes == * ) 00%{ $taskinfo.alertfrequencyminutes = ^first ( @10subject ) } 004 } 00V else ( 1 ) 00F { $taskinfo.alertminute = $$tmp } 004 $$tmp = ^first ( @18subject ) _19 = ^burst ( count $$tmp / ) ^if 00g( _19 == 2 ) 02P{ @10 = ^burst ( $$tmp / ) $taskinfo.alertfrequencyhours = ^first ( @10subject ) ^if 00G( $taskinfo.alertfrequencyhours == * ) 00#{ $taskinfo.alertfrequencyhours = ^first ( @10subject ) } 004 } 00T else ( 1 ) 00D { $taskinfo.alerthour = $$tmp } 004 $$tmp = ^first ( @18subject ) $$tmp = ^first ( @18subject ) $$tmp = ^first ( @18subject ) _19 = ^burst ( count $$tmp , ) ^if 00g( _19 == 1 ) 00~{ $taskinfo.alertdays = 1 | 2 | 4 | 8 | 16 | 32 | 64 } 01@ else 00g( _19 == 5 ) 00Q{ $taskinfo.alertdays = 1 | 2 | 4 | 8 | 16 } 00$ else 00g( _19 == 2 ) 00F{ $taskinfo.alertdays = 32 | 64 } 004 } 004 ^if 00s( $botinfo.isEditAlert ) 0bM{ ^if 00k( ! $utcoffset ) 00v{ $utcoffset = +00:00 } 004 _18 = ^burst ( $utcoffset : ) _14 = ^burst ( count _18 + ) ^if 00g( _14 == 1 ) 00O{ _14 = ^burst ( _18 + ) $$operation = + } 00$ else ( 1 ) 00O { _14 = ^burst ( _18 - ) $$operation = - } 004 ^if 00y( $taskinfo.alertminute != * ) 07R{ $taskinfo.alertminute = ^compute ( $taskinfo.alertminute $$operation _19 ) $taskinfo.alerthour = ^compute ( $taskinfo.alerthour $$operation _14 ) ^if 00x( $taskinfo.alertminute < 0 ) 01o{ $taskinfo.alertminute = ^compute ( 0 - $taskinfo.alertminute ) $taskinfo.alerthour -= 1 } 004 ^if 00z( $taskinfo.alertminute >= 60 ) 01p{ $taskinfo.alertminute = ^compute ( $taskinfo.alertminute - 60 ) $taskinfo.alerthour += 1 } 004 ^if 00v( $taskinfo.alerthour < 0 ) 00B{ $taskinfo.alerthour += 24 } 004 ^if 00x( $taskinfo.alerthour >= 24 ) 00B{ $taskinfo.alerthour -= 24 } 004 } 004 } 004 `
^converttomilitarytime o 0 0 B( $_timestring $_result $_hours $_minutes ) $_result = ^jsoncreate ( TRANSIENT array ) _10 = ^burst ( $_timestring " " ) _14 = ^burst ( _10 ":" ) $_hours = _14 $_minutes = _15 ^if 00z( _11 == "p.m" or _11 == "pm" ) 00Z{ ^if 00l( $_hours != 12 ) 00p{ $_hours += 12 } 004 } 00S else 00l( $_hours == 12 ) 00o{ $_hours = 00 } 004 ^if 00k( $_hours > 24 ) 00q{ ^fail ( CALL ) } 004 ^jsonarrayinsert ( $_result $_hours ) ^jsonarrayinsert ( $_result $_minutes ) ^jsonarrayinsert ( $_result "^$_hours$_minutes" ) ^return ( $_result ) `
^isvalidchoicechosen o 0 0 D( ^choicechosen ^choicefrom ^path $$tmp $$tmpcounter $$label ) $$tmpcounter = 0 ^loop ( -1 ) 02B { ^query ( exact_sv ^1 $$tmpcounter ? 1 ? @1 ) $$label = "" ^nofail ( RULE $$label = ^jsonpath ( ^2 @1object ) ) ^if 00l( $$label == ^0 ) 00p{ ^return ( 1 ) } 004 $$tmpcounter += 1 } ^fail ( CALL ) `
^getfrequencyscheduleoptions o 0 0 C( ^orderid ^instanceid $_instanceurl $_tmp ) $_instanceurl = ^"$protocol://$server/market/orders/^0/instances/^1?q=scheduleOptions" ^if 00f( $teamid ) 015{ $_instanceurl = ^"$_instanceurl&teamId=$teamId&topicId=$roomTopicId" } 01t else 00p( $taskinfo.topicid ) 00*{ $_instanceurl = ^"$_instanceurl&topicId=$taskinfo.topicid" } 004 $_tmp = ^invoke_json ( permanent get $_instanceurl null "^get schedule options for frequency of update" GetFrequencyScheduleOptions ) ^return ( $_tmp ) `
^getandparsefrequencyscheduleoptions o 0 0 C( ^orderid ^instanceid $_tmp ) ^nofail ( RULE ^delete ( $taskinfo.frequencyOfUpdates ) ) $taskinfo.frequencyOfUpdates = ^getfrequencyscheduleoptions ( ^0 ^1 ) $_tmp = $taskinfo.frequencyOfUpdates.default ^parsedefaultfrequencyofupdate ( $_tmp ) `
^activate_alert o 0 0 E( ^bot ^orderid ^instanceid ^topicid $_root $_bykora $_data $_instanceurl $_tmp ) $$tmpmsg = null $_root = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_root topicId ^3 string ) ^if 00n( ! $nonkorabotid ) 00r{ $_bykora = true } 00I else ( 1 ) 00s { $_bykora = false } 004 ^insertjsontypedvalue ( $_root byKora $_bykora boolean ) $_data = ^jsonwrite ( $_root ) $_instanceurl = ^"$protocol://$server/market/orders/^1/instances/^2/activate?fromNLP=true" ^if 00f( $teamid ) 015{ $_instanceurl = ^"$_instanceurl&teamId=$teamId&topicId=$roomTopicId" } 01t else 00p( $taskinfo.topicid ) 00*{ $_instanceurl = ^"$_instanceurl&topicId=$taskinfo.topicid" } 004 ^if 00u( ! $botinfo.isEditAlert ) 01z{ $_tmp = ^invoke_json ( transient put $_instanceurl $_data "^to activate an alert" activate_alert ) } 01h else ( 1 ) 011 { $$tmpmsg = ^messagemap ( "^Edit successful" "^Edit successful" ) } 004 ^return ( $$tmpmsg ) `
^alert_frequency o 0 0 B( ^which $_tmpmsg $_formattedalertminute $_tmpmsg1 $_settime $_tmphours ) $_tmpmsg = ^"" ^if 00y( $taskinfo.alertdays == 127 ) 00z{ $_tmpmsg = ^"every day" } 08^ else 00x( $taskinfo.alertdays == 31 ) 00y{ $_tmpmsg = ^"weekdays" } 07? else 00x( $taskinfo.alertdays == 96 ) 00C{ $_tmpmsg = ^"weekend days" } 06* else ( 1 ) 06S { ^if 00v( $taskinfo.alertdays & 1 ) 00x{ $_tmpmsg = ^"Monday," } 004 ^if 00v( $taskinfo.alertdays & 2 ) 00z{ $_tmpmsg = ^" Tuesday," } 004 ^if 00v( $taskinfo.alertdays & 4 ) 00B{ $_tmpmsg = ^" Wednesday," } 004 ^if 00v( $taskinfo.alertdays & 8 ) 00A{ $_tmpmsg = ^" Thursday," } 004 ^if 00w( $taskinfo.alertdays & 16 ) 00y{ $_tmpmsg = ^" Friday," } 004 ^if 00w( $taskinfo.alertdays & 32 ) 00A{ $_tmpmsg = ^" Saturday," } 004 ^if 00w( $taskinfo.alertdays & 64 ) 00y{ $_tmpmsg = ^" Sunday," } 004 } 004 ^if 00y( $taskinfo.alertminute == 0 ) 00G{ $_formattedalertminute = ^"00" } 012 else ( 1 ) 00Z { $_formattedalertminute = ^"$taskinfo.alertminute" } 004 $_tmpmsg1 = ^"" ^if 00h( ^0 == day ) 00b{ } 0d9 else 00T( $taskinfo.alerthour and $taskinfo.alerthour > 0 ) 06E{ ^if 00w( $taskinfo.alerthour < 12 ) 01C{ $_settime = ^join ( $taskinfo.alerthour : $_formattedalertminute " " am ) $_tmpmsg1 = ^"at $_settime" } 04y else 00x( $taskinfo.alerthour == 12 ) 01C{ $_settime = ^join ( $taskinfo.alerthour : $_formattedalertminute " " pm ) $_tmpmsg1 = ^"at $_settime" } 02x else 00w( $taskinfo.alerthour > 12 ) 01%{ $_tmphours = $taskinfo.alerthour - 12 $_settime = ^join ( $_tmphours : $_formattedalertminute " " pm ) $_tmpmsg1 = ^"at $_settime" } 004 } 05X else 011( $taskinfo.alertfrequencyhours or $taskinfo.alertfrequencyminutes > 0 ) 04N{ ^if 00B( $taskinfo.alertfrequencyhours ) 02v{ $_tmpmsg1 = ^"every $taskinfo.alertfrequencyhours hours" ^if 00G( $taskinfo.alertfrequencyhours == 1 ) 00%{ $_tmpmsg1 = ^"every $taskinfo.alertfrequencyhours hour" } 004 } 01J else 00D( $taskinfo.alertfrequencyminutes ) 00-{ $_tmpmsg1 = ^"every $taskinfo.alertfrequencyminutes minutes" } 004 } 004 $_tmpmsg = ^"$_tmpmsg $_tmpmsg1" ^return ( $_tmpmsg ) `
^joinday o 0 0 B( ^value ) ^if 00e( $$tmp2 ) 00D{ $$tmp2 = ^join ( $$tmp2 , ) } 004 $$tmp2 = ^join ( $$tmp2 ^0 ) $$tmpdaysofweekcount += 1 `
^format_frequency o 0 0 A( $$tmp0 $$tmp1 $$tmp2 $$tmpdaysofweekcount $$tmpmod $$tmphr ) ^if 00k( ! $utcoffset ) 00v{ $utcoffset = +00:00 } 004 _18 = ^burst ( $utcoffset : ) _14 = ^burst ( count _18 + ) ^if 00g( _14 == 1 ) 00O{ _14 = ^burst ( _18 + ) $$operation = - } 00$ else ( 1 ) 00O { _14 = ^burst ( _18 - ) $$operation = + } 004 ^if 00t( $taskinfo.alertminute ) 04L{ ^if 00y( $taskinfo.alertminute != * ) 00?{ $$tmp0 = ^compute ( $taskinfo.alertminute $$operation _19 ) } 00W else ( 1 ) 00G { $$tmp0 = $taskinfo.alertminute } 004 ^if 00i( $$tmp0 < 0 ) 00A{ $$tmp0 *= -1 $$tmp1 -= 1 } 004 ^if 00j( $$tmp0 > 59 ) 01h{ $$tmpmod = $$tmp0 % 60 $$tmp0 -= $$tmpmod $$tmp1 = $$tmp0 / 60 $$tmp0 = $$tmpmod } 004 } 04v else 00D( $taskinfo.alertfrequencyminutes ) 03W{ ^if 00I( $taskinfo.alertfrequencyminutes > 59 ) 025{ $$tmpmod = $taskinfo.alertfrequencyminutes % 60 $$tmp0 = $taskinfo.alertfrequencyminutes - $$tmpmod $$tmp1 = $$tmp0 / 60 $$tmp0 = ^"*/$$tmpmod" } 00+ else ( 1 ) 00V { $$tmp0 = ^"*/$taskinfo.alertfrequencyminutes" } 004 } 004 ^if 00r( $taskinfo.alerthour ) 04H{ ^if 00w( $taskinfo.alerthour != * ) 00*{ $$tmp1 += ^compute ( $taskinfo.alerthour $$operation _14 ) } 00U else ( 1 ) 00E { $$tmp1 = $taskinfo.alerthour } 004 ^if 00i( $$tmp1 < 0 ) 00o{ $$tmp1 += 24 } 004 ^if 00j( $$tmp1 > 23 ) 00R{ $$tmpmod = $$tmp1 % 24 $$tmp1 -= $$tmpmod } 004 ^if 00j( $$tmp1 != * ) 00t{ $$tmp1 += $$tmphr } 004 } 06o else 00B( $taskinfo.alertfrequencyhours ) 05g{ ^if 00e( $$tmp1 ) 03*{ ^if 00i( $$tmp1 > 0 ) 01P{ $tmp1 += $taskinfo.alertfrequencyhours ^if 00j( $$tmp1 > 23 ) 00R{ $$tmpmod = $$tmp1 % 24 $$tmp1 -= $$tmpmod } 004 } 00$ else ( 1 ) 00O { $$tmp1 = $taskinfo.alertfrequencyhours } 004 $$tmp2 = $taskinfo.alertfrequencyhours $$tmp1 = ^"*/$$tmp2" $$tmp2 = null } 00? else ( 1 ) 00T { $$tmp1 = ^"*/$taskinfo.alertfrequencyhours" } 004 } 00F else ( 1 ) 00p { $$tmp1 = ^"*" } 004 ^if 00e( $$tmp1 ) 00U{ ^if 00g( ! $$tmp0 ) 00p{ $$tmp0 = ^"0" } 004 } 004 $$tmp2 = null $$tmpdaysofweekcount = 0 ^if 00v( $taskinfo.alertdays & 1 ) 00q{ ^joinday ( 1 ) } 004 ^if 00v( $taskinfo.alertdays & 2 ) 00q{ ^joinday ( 2 ) } 004 ^if 00v( $taskinfo.alertdays & 4 ) 00q{ ^joinday ( 3 ) } 004 ^if 00v( $taskinfo.alertdays & 8 ) 00q{ ^joinday ( 4 ) } 004 ^if 00w( $taskinfo.alertdays & 16 ) 00q{ ^joinday ( 5 ) } 004 ^if 00w( $taskinfo.alertdays & 32 ) 00q{ ^joinday ( 6 ) } 004 ^if 00w( $taskinfo.alertdays & 64 ) 00q{ ^joinday ( 7 ) } 004 $$tmpmsg = ^"" ^if 00x( $$tmpdaysofweekcount == 7 ) 00N{ $$tmpmsg = ^"\"$$tmp0 $$tmp1 * * *\"" } 00* else ( 1 ) 00S { $$tmpmsg = ^"\"$$tmp0 $$tmp1 * * $$tmp2\"" } 004 ^return ( $$tmpmsg ) `
^get_alert_filters o 0 0 D( ^bot ^orderid ^instanceid $_instanceurl ) ^if 00r( ! $taskinfo.filters ) 08V{ $_instanceurl = ^"$protocol://$server/market/orders/^1/instances/^2/getFilters" ^if 00f( $teamid ) 015{ $_instanceurl = ^"$_instanceurl?teamId=$teamId&topicId=$roomTopicId" } 01t else 00p( $taskinfo.topicid ) 00*{ $_instanceurl = ^"$_instanceurl?topicId=$taskinfo.topicid" } 004 $taskinfo.jsonfilters = ^invoke_json ( permanent get $_instanceurl null "^to get possible filter fields/ids for an alert instance" get_alert_filters ) $taskinfo.filters = ^create_element_array ( permanent $taskinfo.jsonfilters ".definition" "{_id: $$item._id, name: $$item.name , rhsInputType: $$item.rhsInputType, supportedOperations: $$item.supportedOperations}" ) } 004 `
^set_alert_timing o 0 0 C( ^orderid ^instanceid $_alertfrequency $_root $_payload $_data $_instanceurl $_tmp ) $_alertfrequency = ^format_frequency ( ) $_root = ^jsoncreate ( object ) $_root.type = schedule $_payload = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_payload repeatInterval $_alertfrequency string ) $_root.payload = $_payload $_data = ^jsonwrite ( $_root ) $_instanceurl = ^"$protocol://$server/market/orders/^0/instances/^1" $_tmp = ^invoke_json ( transient put $_instanceurl $_data "^to set timing of your alert" set_alert_timing ) `
^setalertchannelinfo o 0 0 D( ^orderid ^instanceid ^channelinfo $_root $_payload $_channelinfo $_channels $_data $_instanceurl $_tmp ) $_root = ^jsoncreate ( object ) $_root.type = channels $_payload = ^jsoncreate ( object ) ^if 00i( ^2 == null ) 07v{ $_channelinfo = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_channelinfo topicId $taskinfo.topicid string ) ^insertjsontypedvalue ( $_channelinfo streamId $botinfo.botid string ) ^insertjsontypedvalue ( $_channelinfo namespaceId $userid string ) ^insertjsontypedvalue ( $_channelinfo to $userid string ) ^insertjsontypedvalue ( $_channelinfo from $botinfo.botid string ) ^insertjsontypedvalue ( $_channelinfo type kore string ) $_channels = ^jsoncreate ( array ) ^jsonarrayinsert ( $_channels $_channelinfo ) $_payload.channels = $_channels } 017 else ( 1 ) 00$ { ^insertjsontypedvalue ( $_payload channels ^2 string ) } 004 $_root.payload = $_payload $_data = ^jsonwrite ( $_root ) $_instanceurl = ^"$protocol://$server/market/orders/^0/instances/^1" $_tmp = ^invoke_json ( transient put $_instanceurl $_data "^to set channel information for your alert" SetAlertChannelInfo ) `
^set_alert_mute o 0 0 D( ^orderid ^instanceid ^status $_root $_payload $_data $_instanceurl $_tmp ) $_root = ^jsoncreate ( object ) $_root.type = notification $_payload = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_payload enable ^2 boolean ) $_root.payload = $_payload $_data = ^jsonwrite ( $_root ) $_instanceurl = ^"$protocol://$server/market/orders/^0/instances/^1" $_tmp = ^invoke_json ( transient put $_instanceurl $_data "^to set mute of your alert" set_alert_mute ) `
^set_alert_filter o 0 0 D( ^orderid ^instanceid ^filters $_root $_payload $_data $_instanceurl $_tmp ) $_root = ^jsoncreate ( object ) $_root.type = filters $_payload = ^jsoncreate ( array ) ^jsonarrayinsert ( $_payload ^2 ) $_root.payload = $_payload $_data = ^jsonwrite ( $_root ) $_instanceurl = ^"$protocol://$server/market/orders/^0/instances/^1" $_tmp = ^invoke_json ( transient put $_instanceurl $_data "^to set mute of your alert" set_alert_filter ) `
^set_alert_fields o 0 0 C( ^orderid ^instanceid $_payload $_root $_data $_instanceurl $_tmp ) ^if 00E( ^length ( $taskinfo.fields ) > 0 ) 04B{ $_payload = ^composeformdata ( ) $_root = ^jsoncreate ( object ) $_root.type = alertfields $_root.payload = $_payload $_data = ^jsonwrite ( $_root ) $_instanceurl = ^"$protocol://$server/market/orders/^0/instances/^1" $_tmp = ^invoke_json ( transient put $_instanceurl $_data "^to set fields of your alert" set_alert_fields ) } 004 `
^set_alert_name o 0 0 E( ^orderid ^instanceid ^name ^description $_root $_payload $_data $_instanceurl $_tmp ) $_root = ^jsoncreate ( object ) $_root.type = alertname $_payload = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_payload name ^2 string ) ^insertjsontypedvalue ( $_payload description ^3 string ) $_root.payload = $_payload $_data = ^jsonwrite ( $_root ) $_instanceurl = ^"$protocol://$server/market/orders/^0/instances/^1" $_tmp = ^invoke_json ( transient put $_instanceurl $_data "^to set name of your alert" set_alert_name ) `
^get_workflow_ids o 0 0 A( $_tmp ) $_tmp = ^"$protocol://$server/users/$userid/workflows" $_tmp = ^invoke_json ( transient get $_tmp null "^to get workflows" get_workflow_ids ) $taskinfo.workflows = ^create_element_array ( permanent $_tmp ".topics" "{topicId: $$item.topicId, topicName: $$item.topicName}" ) `
^email_instructions o 0 0 D( ^orderid ^instanceid ^email $_instanceurl $_tmp ) $_instanceurl = ^"$protocol://$server/market/orders/^0/instances/^1/sendMail?email=^2" $_tmp = ^invoke_json ( transient post $_instanceurl null "^email instructions" email_instructions ) `
^get_closest_every o 0 0 A( $$tmp $$tmpevery $$fieldcount $$diff $$tempinput $$tmp1 $$num $$unit $_field ) $$tmp = $taskinfo.frequencyOfUpdates.intervals $$tmpevery = $$tmp.Every $$fieldcount = ^length ( $$tmpevery ) $$count = 0 $closestvalue = null $$diff = null $$tempinput = _0 $$tmp1 = null ^if 00$( _1 == "hour" or _1 == "hours" or _1 == "hr" or _1 == "hrs" ) 00x{ $$tempinput = _0 * 60 } 004 ^loop ( $$fieldcount ) 07v { $_field = ^jsonpath ( "[$$count]" $$tmpevery ) $$count += 1 _10 = ^burst ( $_field " " ) ^if 00*( _11 == "hour" or _11 == "hours" or _11 == "hr" or _11 == "hrs" ) 00R{ $$t = _10 * 60 $$tmp1 = $$tempinput - $$t } 00S else ( 1 ) 00C { $$tmp1 = $$tempinput - _10 } 004 ^if 00i( $$tmp1 < 0 ) 00o{ $$tmp1 *= -1 } 004 ^if 00e( $$diff ) 01L{ ^if 00n( $$tmp1 < $$diff ) 019{ $$diff = $$tmp1 $$num = _10 $$unit = _11 $closestvalue = ^"$$num $$unit" } 004 } 01p else ( 1 ) 019 { $$diff = $$tmp1 $$num = _10 $$unit = _11 $closestvalue = ^"$$num $$unit" } 004 } ^return ( $closestvalue ) `
^isvalidattime o 0 0 A( $_currentat $_fieldlength $_counter $_attime $_convertedtime $_hours $_minutes ) $_currentat = $taskinfo.frequencyOfUpdates.intervals.At $_fieldlength = ^length ( $_currentat ) $_counter = 0 $closestvalue = null ^loop ( $_fieldlength ) 07F { $_attime = $_currentat[$_counter] $_convertedtime = ^converttomilitarytime ( $_attime ) $_hours = $_convertedtime[0] $_minutes = $_convertedtime[1] ^if 00+( ^length ( $_hours ) == 2 and ^length ( $taskinfo.alerthour ) == 1 ) 00#{ $taskinfo.alerthour = ^join ( 0 $taskinfo.alerthour ) } 004 ^if 010( ^length ( $_minutes ) == 2 and ^length ( $taskinfo.tmpminute ) == 1 ) 00#{ $taskinfo.tmpminute = ^join ( 0 $taskinfo.tmpminute ) } 004 ^if 012( $_hours == $taskinfo.alerthour and $_minutes == $taskinfo.alertminute ) 00s{ ^return ( true ) } 004 $_counter += 1 } ^return ( false ) `
^get_closest_at o 0 0 A( $_intervalsat $_intervalsatlength $_attimerequested $_bestscoreindex $_counter $_taskinforesult $_result $_attime $_currentscore ) $_intervalsat = $taskinfo.frequencyOfUpdates.intervals.At $_intervalsatlength = ^length ( $_intervalsat ) $_attimerequested = ^join ( $taskinfo.alerthour $taskinfo.alertminute ) $_bestscoreindex = 0 $_counter = 0 $_taskinforesult = null $_result = null ^loop ( $_intervalsatlength ) 04Z { $_attime = $_intervalsat[$_counter] $_attime = ^converttomilitarytime ( $_attime ) $_attime = $_attime[2] $_currentscore = 0 ^if 00A( $_attime > $_attimerequested ) 00V{ $_currentscore = $_attime - $_attimerequested } 00+ else ( 1 ) 00V { $_currentscore = $_attimerequested - $_attime } 004 ^createfact ( $_counter score $_currentscore ) $_counter += 1 } @10 = ^query ( exact_v ? score ? ? ) ^sort ( @10object ) $_bestscoreindex = ^nth ( @10subject 1 ) $_result = $_intervalsat[$_bestscoreindex] $_taskinforesult = ^converttomilitarytime ( $_result ) $taskinfo.alerthour = $_taskinforesult[0] $taskinfo.alertminute = $_taskinforesult[1] ^delete ( @10 ) ^return ( $_result ) `
^buildfrequencychoicelist o 0 0 B( $_frequencylist $_choicelist $_choiceelement $_junk $_current $_arraylength $_ele ) $taskinfo.defaultFrequencyValue = ^alert_frequency ( all ) $taskinfo.defaultelement = ^"Use the default setting ( $taskinfo.defaultFrequencyValue )" ^if 00x( $botinfo.isEditAlert == 1 ) 01q{ $taskinfo.defaultelement = ^"Use the current setting ( $taskinfo.defaultFrequencyValue )" } 004 $_choicelist = ^jsoncreate ( PERMANENT array ) $_choiceelement = ^jsoncreate ( PERMANENT object ) $_choiceelement.label = $taskinfo.defaultelement $_junk = ^jsonarrayinsert ( PERMANENT $_choicelist $_choiceelement ) $_current = 0 $_arraylength = ^length ( $_frequencylist ) ^loop ( $_arraylength ) 02W { $_ele = $_frequencylist[$_current] $_choiceelement = ^jsoncreate ( PERMANENT object ) $_choiceelement.label = $_ele $_junk = ^jsonarrayinsert ( PERMANENT $_choicelist $_choiceelement ) $_current += 1 } $_choicelist = ^note_permanent_facts ( $_choicelist ) ^return ( $_choicelist ) `
^lookupfrequencychoice o 0 0 C( $_choicelist $_selected $_listlength $_count $_element ) $_listlength = ^length ( $_choicelist ) $_count = 0 ^loop ( $_listlength ) 04k { $_element = $_choicelist[$_count].label ^if 00v( $_element == $_selected ) 00x{ ^return ( $_element ) } 02J else 00V( $_element == "daily" and $_selected == "everyday" ) 00x{ ^return ( $_element ) } 01p else 00W( $_element == "daily" and $_selected == "every day" ) 00x{ ^return ( $_element ) } 004 $_count += 1 } ^return ( null ) `
^korereminder o 0 0 C( ^delay ^reminder $_koreurl $_text $_root $_korepayload $_headers $_tmp $_koreheader ) $_koreurl = ^"$protocol://$server/users/$userId/remind?isKora=true" $_text = ^"in ^0 seconds to ^1" $_root = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_root text $_text string ) ^insertjsontypedvalue ( $_root timezone $oobtimezone string ) $_korepayload = ^jsonwrite ( $_root ) $_headers = ^gethttpheaders ( $server $authorization ) ^nofail ( RULE $_tmp = null $_tmp = ^jsonopen ( transient post $_koreurl $_korepayload $_headers ) ) ^print ( 32 "^ \n Reminder: \n url: $_koreurl \n pload: $_korepayload \n head: $_koreheader \n time: %timenumbers \ndelay: ^0 message: ^1 \n \n " ) ^jsonwrite ( $_tmp ) `
^createaction o 0 0 C( ^botid ^action $_root $_channelinfo $_channels $_customdata $_response ) $_root = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_root actionId $taskinfo.taskid string ) ^insertjsontypedvalue ( $_root actionVersion $taskinfo.taskversion string ) ^insertjsontypedvalue ( $_root actionInstanceId $taskinfo.taskinstanceid string ) ^if 00t( $$channelinfo == null ) 07s{ $_channelinfo = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_channelinfo topicId $taskinfo.topicid string ) ^insertjsontypedvalue ( $_channelinfo streamId $botinfo.botid string ) ^insertjsontypedvalue ( $_channelinfo namespaceId $userid string ) ^insertjsontypedvalue ( $_channelinfo to $userid string ) ^insertjsontypedvalue ( $_channelinfo from $botinfo.botid string ) ^insertjsontypedvalue ( $_channelinfo type kore string ) $_channels = ^jsoncreate ( array ) ^jsonarrayinsert ( $_channels $_channelinfo ) $_root.channels = $_channels } 01f else ( 1 ) 00= { ^insertjsontypedvalue ( $_root channels $$channelinfo string ) } 004 ^if 00n( ! $nonkorabotid ) 00r{ $$bykora = true } 00I else ( 1 ) 00s { $$bykora = false } 004 ^insertjsontypedvalue ( $_root byKora $$bykora boolean ) $_customdata = ^composeformdata ( ) $_root.customData = $_customdata $_response = ^jsonwrite ( $_root ) ^return ( $_response ) `
^process_action o 0 0 C( ^botid ^action $$data $_url $_tmp ) ^if 00E( $botinfo.action == ~generic_task ) 056{ $$data = ^createaction ( ^0 ^1 ) ^if 00f( $teamid ) 01m{ $_url = ^"$protocol://$server/teams/$teamId/topics/$roomTopicId/actions?fromNLP=true" } 01K else ( 1 ) 01u { $_url = ^"$protocol://$server/users/$userid/workflows/$taskinfo.topicid/actions?fromNLP=true" } 004 $_tmp = ^invoke_json ( transient post $_url $$data "^to process your $botname request" process_action ) } 00G else ( 1 ) 00q { ^fail ( RULE ) } 004 `
^get_search_by_name o 0 0 G( ^orderid ^instanceid ^fieldinfo ^text ^filters ^silent $_keyname $_fields $_key $_root $_postinfo $_instanceurl $_tmp ) $_keyname = ^getfieldlowercasetitle ( ^2 ) ^parse_dynamicdropdowninfo ( $_keyname ^2 ^4 ) $_fields = ^jsoncreate ( object ) ^if 00a( ^3 ) 00v{ $_fields.query = ^3 } 004 ^if 00z( ^length ( $$dependson ) > 0 ) 02p{ $_keyname = $$dependson[0] $_key = $_keyname ^if 00z( $taskinfo.fieldvalues.$_key ) 015{ ^jsonobjectinsert ( $_fields $_keyname $taskinfo.fieldvalues.$_key ) } 004 } 004 $_root = ^jsoncreate ( object ) ^if 00i( $$endpoint ) 00E{ $_root.endPoint = $$endpoint } 004 ^if 00g( $_fields ) 00A{ $_root.fields = $_fields } 004 ^if 00n( $$payloadfields ) 00O{ $_root.payloadFields = $$payloadfields } 004 ^if 00l( $$keyforlabel ) 00K{ $_root.keyForLabel = $$keyforlabel } 004 ^if 00l( $$keyforvalue ) 00K{ $_root.keyForValue = $$keyforvalue } 004 ^if 00m( $$responsepath ) 00M{ $_root.responsePath = $$responsepath } 004 $_postinfo = ^jsonwrite ( $_root ) $_instanceurl = ^"$protocol://$server/market/orders/^0/instances/^1/fetch" $_tmp = ^invoke_json ( transient post $_instanceurl $_postinfo "^to find instances of your request" get_search_by_name null null ^5 ) ^return ( $_tmp ) `
^standardizename o 0 0 B( ^name $$name ) $$name = ^pos ( lowercase $$name ) ^return ( $$name ) `
^getbotnameproperty o 0 0 B( ^bot $_property ) ^if 00y( ^extract ( ^0 0 3 ) == st- ) 00s{ $_property = _id } 00J else ( 1 ) 00t { $_property = name } 004 ^return ( $_property ) `
^publicbotdata o 0 0 A( ) ^if 00r( $publicbotdata.bots ) 00H{ ^return ( $publicbotdata.bots ) } 00S else ( 1 ) 00C { ^return ( $publicbotdata ) } 004 `
^getbotobject o 0 0 B( ^bot $_property $_item $_container $_publicbots $_bot ) ^notrace ( $_property = ^getbotnameproperty ( ^0 ) @0 = ^jsonparentfromproperty ( $_property ^0 ) ^loop ( -1 ) 02@ { $_item = ^last ( @0fact ) $_container = $_item.subject $_publicbots = ^publicbotdata ( ) ^if 00$( $_container == $_publicbots or $_container == $privatebots ) 00L{ $_bot = $_item.object ^end ( LOOP ) } 004 } ) ^return ( $_bot ) `
^isbotinarray o 0 0 C( ^array ^bot $_property ) $_property = ^getbotnameproperty ( ^1 ) @0 = ^jsonparentfrompropertyinarray ( ^0 $_property ^1 ) ^if 00g( @0object ) 00s{ ^return ( true ) } 004 ^fail ( CALL ) `
^ispublicbotbyname o 0 0 B( ^botname $_result $_botname ) $_result = false $_botname = ^0 ^if 00G( pattern =b$_botname?~k-public-bots ) 00r{ $_result = true } 004 ^return ( $_result ) `
^isprivatebotbyname o 0 0 B( ^botname $_result $_botname ) $_result = false $_botname = ^0 ^if 00H( pattern =b$_botname?~k-private-bots ) 00r{ $_result = true } 004 ^return ( $_result ) `
^isenterprisebotbyname o 0 0 B( ^botname $_result $_botname ) $_result = false $_botname = ^0 ^if 00K( pattern =b$_botname?~k-enterprise-bots ) 00r{ $_result = true } 004 ^return ( $_result ) `
^isenterpriseconsumerbotbyname o 0 0 B( ^botname $_result $_botname ) $_result = false $_botname = ^0 ^if 00S( pattern =b$_botname?~k-enterpriseconsumer-bots ) 00r{ $_result = true } 004 ^return ( $_result ) `
^ispublicbotbyid o 0 0 B( ^bot $_botdata ) $_botdata = ^publicbotdata ( ) ^if 00C( ^isbotinarray ( $_botdata ^0 ) ) 00s{ ^return ( true ) } 004 ^fail ( CALL ) `
^isprivatebot o 0 0 B( ^bot ) ^if 00F( ^isbotinarray ( $privatebots ^0 ) ) 00s{ ^return ( true ) } 004 ^fail ( CALL ) `
^isnonfunctioningbot o 0 0 B( $_botobject ) ^if 02n( ^length ( $_botobject.actions ) == 0 and ^length ( $_botobject.alerts ) == 0 and ^length ( $_botobject.dialogs ) == 0 and ^length ( $_botobject.knowledgeTasks ) == 0 ) 00s{ ^return ( true ) } 004 ^fail ( CALL ) `
^linkedprivatebot o 0 0 B( $_bot $_privatebot ) ^if 00d( $_bot ) 017{ $_privatebot = ^query ( exact_vo ? publicbot $_bot._id 1 ? @0subject ) } 004 ^return ( $_privatebot ) `
^isbotlinkedtouniversal o 0 0 B( $_botname $_botcount $_count ) ^if 00l( $universalbot ) 02V{ $_botcount = ^length ( $universalbot.publishedBots ) $_count = 0 ^loop ( $_botcount ) 01z { ^if 00V( $_botname == $universalbot.publishedBots[$_count] ) 00s{ ^return ( true ) } 004 $_count += 1 } } 004 ^fail ( CALL ) `
^getbotdatabyname o 0 0 B( ^name $_botdata ) $_botdata = ^getbotobject ( ^0 ) ^return ( $_botdata ) `
^isdevelopmentactivity o 0 0 B( ^activityname ) ^if 00H( ^findtext ( ^0 "^\@development" 0 ) ) 00s{ ^return ( true ) } 004 ^fail ( CALL ) `
^getactivitytype o 0 0 C( ^botname ^activityname $_botdata $_privatebot ) $_botdata = ^getbotobject ( ^0 ) ^if 00j( ! $_botdata ) 00q{ ^fail ( RULE ) } 004 ^if 00B( ^isdevelopmentactivity ( ^1 ) ) 01H{ $_privatebot = ^linkedprivatebot ( $_botdata ) ^if 00k( $_privatebot ) 00A{ $_botdata = $_privatebot } 004 } 004 @0 = ^query ( botactivity $_botdata name ^1 ) ^if 00p( @0subject != null ) 032{ ^if 00C( @0subject == $_botdata.actions ) 00u{ ^return ( action ) } 01+ else 00B( @0subject == $_botdata.alerts ) 00t{ ^return ( alert ) } 012 else 00C( @0subject == $_botdata.dialogs ) 00u{ ^return ( dialog ) } 004 } 004 ^return ( null ) `
^getactivity o 0 0 C( ^botname ^activityname $_botdata $_privatebot ) $_botdata = ^getbotobject ( ^0 ) ^if 00j( ! $_botdata ) 00q{ ^fail ( RULE ) } 004 ^if 00B( ^isdevelopmentactivity ( ^1 ) ) 01H{ $_privatebot = ^linkedprivatebot ( $_botdata ) ^if 00k( $_privatebot ) 00A{ $_botdata = $_privatebot } 004 } 004 @0 = ^query ( botactivity $_botdata name ^1 ) ^if 00g( @0object ) 00w{ ^return ( @0object ) } 004 ^return ( null ) `
^getactivitybyid o 0 0 B( ^activityid $_property $_object ) $_property = _id ^if 00y( ^extract ( ^0 0 3 ) == dg- ) 00y{ $_property = dialog_id } 004 $_object = ^query ( exact_vo ? $_property ^0 1 ? @0subject ) ^if 00g( $_object ) 00w{ ^return ( $_object ) } 004 ^return ( null ) `
^createbotinfo o 0 0 C( ^botid ^botname $_botdata ) ^if 00g( $botinfo ) 00w{ ^delete ( $botinfo ) } 004 $botinfo = ^jsoncreate ( permanent object ) $botinfo.botid = ^0 $botinfo.botname = ^1 $_botdata = ^getbotobject ( ^0 ) $botinfo.interruptsEnabled = $_botdata.interruptsEnabled `
^setbotidandname o 0 0 B( $_botdata ) $botid = $_botdata._id $botname = $_botdata.name ^createbotinfo ( $botid $botname ) `
^getbotidfromname o 0 0 B( ^botname $_botdata ) $_botdata = ^getbotdatabyname ( ^0 ) ^return ( $_botdata._id ) `
^getbotnamefromid o 0 0 B( ^botid $_botdata ) $_botdata = ^getbotobject ( ^0 ) ^return ( $_botdata.name ) `
^getlistofactivitiesoftype o 0 0 C( $_botobject $_type $_activities $_privatebot $_array ) @10 = null $_activities = $_botobject.$_type ^if 00k( $_activities ) 02y{ ^if 00w( $_type == knowledgeTasks ) 00R{ @10 = ^query ( exact_s $_activities ? ? ) } 01d else ( 1 ) 00- { @10 = ^jsonpropertiesforobjectsinarray ( $_activities name ) } 004 } 004 $_privatebot = ^linkedprivatebot ( $_botobject ) ^if 00k( $_privatebot ) 03-{ $_activities = $_privatebot.$_type ^if 00k( $_activities ) 032{ ^if 00w( $_type == knowledgeTasks ) 01k{ @10 += ^query ( exact_s $_activities ? ? ) @9 = ^unduplicate ( @10object ) @10 = @9 } 01e else ( 1 ) 00+ { @10 += ^jsonpropertiesforobjectsinarray ( $_activities name ) } 004 } 004 } 004 ^if 00w( $_type == knowledgeTasks ) 00S{ $_array = ^makearrayfromset ( @10 object ) } 00? else ( 1 ) 00T { $_array = ^makearrayfromset ( @10 subject ) } 004 ^if 00X( $developmenttasks == 1 and $_type != knowledgeTasks ) 02h{ @14 = ^jsonparentfrompropertyinarray ( $_array inDevelopment true ) @15 = ^uniquefacts ( @10subject @14object ) $_array = ^makearrayfromset ( @15 subject ) } 004 ^return ( $_array ) `
^getlistofactionsforbot o 0 0 B( ^bot $_botdata ) ^if 00y( ^jsonkind ( ^0 ) == object ) 00q{ $_botdata = ^0 } 00Y else ( 1 ) 00I { $_botdata = ^getbotobject ( ^0 ) } 004 ^return ( ^getlistofactivitiesoftype ( $_botdata actions ) ) `
^getlistofdialogsandactionsforbot o 0 0 B( ^bot $_botdata $_actions $_dialogs ) ^if 00y( ^jsonkind ( ^0 ) == object ) 00q{ $_botdata = ^0 } 00Y else ( 1 ) 00I { $_botdata = ^getbotobject ( ^0 ) } 004 $_actions = ^getlistofactivitiesoftype ( $_botdata actions ) $_dialogs = ^getlistofactivitiesoftype ( $_botdata dialogs ) ^return ( ^appendarray ( $_actions $_dialogs ) ) `
^getlistofalertsforbot o 0 0 B( ^bot $_botdata ) ^if 00y( ^jsonkind ( ^0 ) == object ) 00q{ $_botdata = ^0 } 00Y else ( 1 ) 00I { $_botdata = ^getbotobject ( ^0 ) } 004 ^return ( ^getlistofactivitiesoftype ( $_botdata alerts ) ) `
^getlistofdialogsforbot o 0 0 B( ^bot $_botdata ) ^if 00y( ^jsonkind ( ^0 ) == object ) 00q{ $_botdata = ^0 } 00Y else ( 1 ) 00I { $_botdata = ^getbotobject ( ^0 ) } 004 ^return ( ^getlistofactivitiesoftype ( $_botdata dialogs ) ) `
^getlistoffaqsforbot o 0 0 B( ^bot $_botdata ) ^if 00y( ^jsonkind ( ^0 ) == object ) 00q{ $_botdata = ^0 } 00Y else ( 1 ) 00I { $_botdata = ^getbotobject ( ^0 ) } 004 ^return ( ^getlistofactivitiesoftype ( $_botdata knowledgeTasks ) ) `
^getactivitynamesforbot o 0 0 B( $_bot $_botdata $_activities $_dialogs $_alerts $_list ) ^if 00B( ^jsonkind ( $_bot ) == object ) 00t{ $_botdata = $_bot } 00! else ( 1 ) 00L { $_botdata = ^getbotobject ( $_bot ) } 004 $_activities = ^getlistofactivitiesoftype ( $_botdata actions ) $_dialogs = ^getlistofactivitiesoftype ( $_botdata dialogs ) $_activities = ^appendarray ( $_activities $_dialogs ) $_alerts = ^getlistofactivitiesoftype ( $_botdata alerts ) $_activities = ^appendarray ( $_activities $_alerts ) @5 = ^jsonpropertiesforobjectsinarray ( $_activities name ) $_list = ^makearrayfromset ( @5 object ) ^return ( $_list ) `
^getactivityfields o 0 0 C( ^botname ^activityname $_activity ) $_activity = ^getactivity ( ^0 ^1 ) ^if 00k( ! $_activity ) 00s{ ^return ( null ) } 004 ^return ( $_activity.fields ) `
^getbotconfirm o 0 0 B( ^botname $_botdata $_confirm ) $_botdata = ^getbotdatabyname ( ^0 ) $_confirm = $_botdata.confirm ^if 00j( ! $_confirm ) 00t{ $_confirm = false } 004 ^return ( $_confirm ) `
^getactivityconfirm o 0 0 C( ^botname ^activityname $_activity $_confirm ) $_activity = ^getactivity ( ^0 ^1 ) ^if 00k( ! $_activity ) 00s{ ^return ( null ) } 004 $_confirm = $_activity.confirm ^if 00j( ! $_confirm ) 00J{ $_confirm = ^getbotconfirm ( ^0 ) } 004 ^if 00j( ! $_confirm ) 00s{ $_confirm = true } 004 ^return ( $_confirm ) `
^getactivitytaskid o 0 0 C( ^botname ^taskname $_activity $_tmpmodified ) $_activity = ^getactivity ( ^0 ^1 ) ^if 00i( $_activity ) 00C{ ^return ( $_activity._id ) } 03F else ( 1 ) 03p { $$actionname = ^1 $_tmpmodified = ^messagemap ( "^I can't find <action-name> available as an activity for <bot-name>" "^I was unable to find <action-name> available as an activity for <bot-name>." ) ^print ( $_tmpmodified ) ^fail ( RULE ) } 004 `
^getresidentfield o 0 0 D( ^botname ^activityname ^fieldobject $$nfield $$oldname $$title $_fields ) ^nofail ( RULE $_fields = ^getactivityfields ( ^0 ^1 ) @0 = ^query ( exact_s $_fields ? ? ) ^loop ( -1 ) 02t { $$nfield = ^first ( @0object ) $$oldname = ^jsonpath ( ".title" ^2 ) $$title = ^getfieldtitle ( $$nfield ) ^if 00s( $$title == $$oldname ) 00w{ ^return ( $$nfield ) } 004 } ) ^return ( null ) `
^getresidentfieldinfo o 0 0 C( ^botname ^activityname $$junk $$activityobject $$counter $_fields $_field ) $$activityobject = ^getactivityfields ( ^0 ^1 ) ^if 00w( $$activityobject == null ) 00s{ ^return ( null ) } 004 $_fields = $$activityobject.fields $$counter = 0 ^loop ( -1 ) 02l { @0 = ^query ( exact_sv $_fields $$counter ? 1 ) $$counter += 1 $_field = @0object ^if 00K( ^query ( exactsvo $_field title ^1 1 ) ) 00v{ ^return ( $_field ) } 004 } ^return ( null ) `
^removespecificfields o 0 0 C( ^fields ^fieldtyperemoved $$array $$fieldtype $$fieldcount $_field ) $$fieldcount = ^length ( ^0 ) $$count = $$fieldcount - 1 ^loop ( $$fieldcount ) 02x { $_field = ^jsonpath ( "[$$count]" ^0 ) $$fieldtype = ^getfieldfieldtype ( $_field ) ^if 00p( $$fieldtype == ^1 ) 00N{ ^jsonarraydelete ( INDEX ^0 $$count ) } 004 $$count -= 1 } `
^isbotnameinstalled o 0 0 B( ^botname ) ^if 00L( ^query ( exact_so $installedbots ? ^0 ) ) 00s{ ^return ( true ) } 00G else ( 1 ) 00q { ^fail ( CALL ) } 004 `
^isbotnameaccessible o 0 0 B( ^botname $_accessiblebots ) $_accessiblebots = ^getaccessiblebots ( ) ^if 00N( ^query ( exact_so $_accessiblebots ? ^0 ) ) 00s{ ^return ( true ) } 00G else ( 1 ) 00q { ^fail ( CALL ) } 004 `
^botinstalled o 0 0 B( ^botid $_botname ) ^if 00o( ! $installedbots ) 00t{ ^return ( false ) } 004 $_botname = ^getbotnamefromid ( ^0 ) ^if 00j( ! $_botname ) 00t{ ^return ( false ) } 004 ^if 00U( ^query ( exact_so $installedbots ? $_botname 1 ) ) 00s{ ^return ( true ) } 00J else ( 1 ) 00t { ^return ( false ) } 004 `
^generatebotchoices o 0 0 C( ^tasks ^count $_start $_list ) ^if 00c( ! ^0 ) 00s{ ^return ( null ) } 004 $_start = ^1 ^1 += ^length ( ^0 ) ^generatechoicelist ( ^0 "^\^taskDisplayName" null null true true "^\^taskId" ) $_list = ^showchoicelist ( $_start ^1 ) ^return ( $_list ) `
^createfieldsconcept o 0 0 C( $_botname $_lctaskname $_allfieldsconcept ) $_allfieldsconcept = ^join ( ~ bot- $_botname -task- $_lctaskname -fields ) $_allfieldsconcept = ^pos ( lowercase $_allfieldsconcept ) ^return ( $_allfieldsconcept ) `
^addfieldsynonyms o 0 0 F( ^lcbotname ^lctaskname ^synonyms ^lcfieldname $_cache $_allfieldsconcept $_concept $_array $_synonym $_tmp ) ^if 00z( ! ^2 or ^length ( ^2 ) == 0 ) 00p{ ^end ( CALL ) } 004 $_allfieldsconcept = ^createfieldsconcept ( ^0 ^1 ) $_concept = ^join ( ~ bot- ^0 -task- ^1 -field- ^3 ) $_array = ^query ( exact_sv ^2 ^3 ? 1 ? @0object ) ^if 00w( ^length ( $_array ) == 0 ) 00q{ ^next ( LOOP ) } 004 @2 = ^query ( direct_s $_array ? ? ) ^loop ( -1 ) 053 { $_synonym = ^first ( @2object ) $_synonym = ^pos ( lowercase $_synonym ) ^if 00F( ! ^isignorereadword ( $_synonym ) ) 03r{ $_tmp = ^createfact ( $_synonym member $_concept ) ^if 00f( $_cache ) 00K{ ^jsonarrayinsert ( $_cache $_tmp ) } 004 $_tmp = ^createfact ( $_synonym member $_allfieldsconcept ) ^if 00f( $_cache ) 00K{ ^jsonarrayinsert ( $_cache $_tmp ) } 004 } 004 } `
^createbasicfield o 0 0 F( $_botname $_lctaskname $_fieldname $_fieldpatterns $_cache $_concept $_tmp $_allfieldsconcept ) $_fieldname = ^pos ( lowercase $_fieldname ) $_concept = ^join ( ~ bot- $_botname - task- $_lctaskname - field - $_fieldname ) $_tmp = ^createfact ( $_fieldname member $_concept ) ^if 00f( $_cache ) 00&{ ^jsonarrayinsert ( "PERMANENT AUTODELETE" $_cache $_tmp ) } 004 $_allfieldsconcept = ^createfieldsconcept ( $_botname $_lctaskname ) $_tmp = ^createfact ( $_fieldname member $_allfieldsconcept ) ^if 00f( $_cache ) 00&{ ^jsonarrayinsert ( "PERMANENT AUTODELETE" $_cache $_tmp ) } 004 ^addproperty ( $_fieldname PATTERN_WORD ) ^if 00n( $_fieldpatterns ) 02c{ $_tmp = ^createfact ( $_concept fieldpattern $_fieldpatterns ) ^if 00f( $_cache ) 00&{ ^jsonarrayinsert ( "PERMANENT AUTODELETE" $_cache $_tmp ) } 004 } 004 `
^addfieldconcepts o 0 0 D( ^lcbotname ^lctaskname ^activityobject $_activity $_fields $_allfieldsconcept $_synonyms $_counter $_fieldobject $_fieldname $_fieldpatterns $_original $_canon ) $_activity = ^2 $_fields = $_activity.fields ^if 00i( ! $_fields ) 00p{ ^end ( CALL ) } 004 $_allfieldsconcept = ^createfieldsconcept ( ^0 ^1 ) $_synonyms = $_activity.fieldSynonyms $_counter = 0 ^loop ( -1 ) 0bn { ^query ( exact_sv $_fields $_counter ? 1 ? @1 ) $_counter += 1 $_fieldobject = @1object $_fieldname = $_fieldobject.title $_fieldname = ^pos ( lowercase $_fieldname ) $_fieldpatterns = $_fieldobject.fieldpatterns ^createbasicfield ( ^0 ^1 $_fieldname $_fieldpatterns null ) @2 = ^burst ( $_fieldname " " ) ^loop ( -1 ) 06f { $_original = ^first ( @2subject ) ^if 00x( $_original == $_fieldname ) 00p{ ^end ( LOOP ) } 004 $_canon = ^pos ( canonical $_original ) ^if 00v( $_canon == unknown-word ) 00+{ $_canon = $_original ^addproperty ( $_original PATTERN_WORD ) } 004 ^if 00#( ! ^properties ( $_canon ) or ^properties ( $_canon ) == 0 ) 00E{ ^rememberword ( $_original ) } 004 ^if 00D( ! ^isignorereadword ( $_canon ) ) 00Z{ ^createfact ( $_canon member $_allfieldsconcept ) } 004 } ^addfieldsynonyms ( ^0 ^1 $_synonyms $_fieldname null ) } `
^deletefieldconcepts o 0 0 D( ^lcbotname ^lctaskname ^activityobject $_activity $_fields $_allfieldsconcept $_counter $_fieldobject $_fieldname $_concept $_original ) $_activity = ^2 $_fields = $_activity.fields $_allfieldsconcept = ^createfieldsconcept ( ^0 ^1 ) ^if 00=( ^query ( exact_vo ? member $_allfieldsconcept ) and ^delete ( @0 ) ) 00b{ } 004 $_counter = 0 ^loop ( -1 ) 07G { ^query ( exact_sv $_fields $_counter ? 1 ? @1 ) $_counter += 1 $_fieldobject = @1object $_fieldname = $_fieldobject.title $_fieldname = ^pos ( lowercase $_fieldname ) $_concept = ^join ( ~ bot- ^0 -task- ^1 -field- $_fieldname ) ^if 00#( ^query ( exact_vo ? member $_concept ) and ^delete ( @0 ) ) 00b{ } 004 ^if 00+( ^query ( exact_sv $_concept fieldpattern ? 1 ) and ^delete ( @0 ) ) 00b{ } 004 @2 = ^burst ( $_fieldname " " ) ^loop ( -1 ) 01G { $_original = ^first ( @2subject ) ^if 00x( $_original != $_fieldname ) 00C{ ^forgetword ( $_original ) } 004 } } `
^addpatternconcepts o 0 0 E( $_lcbotname $_lctaskname $_activityobject $_protect $_patterns $_counter $_patternconcept $_taskconcept $_numpatterns $_pattern $_original $_concept $_canon $_fact ) $_patterns = $_activityobject.patterns $_counter = 0 $_patternconcept = ^join ( ~ bot- $_lcbotname -task- $_lctaskname -patterns ) $_taskconcept = ^join ( ~ bot- $_lcbotname - task - $_lctaskname ) $_numpatterns = ^length ( $_patterns ) ^loop ( $_numpatterns ) 0dj { $_pattern = $_patterns[$_counter] ^if 00F( ^jsonkind ( $_pattern ) == object ) 00D{ $_pattern = $_pattern.value } 004 $_pattern = ^substitute ( character $_pattern \( "" ) $_pattern = ^substitute ( character $_pattern \) "" ) $_pattern = ^pos ( lowercase $_pattern ) $_counter += 1 @1 = ^burst ( $_pattern " " ) ^loop ( -1 ) 08Z { $_original = ^first ( @1subject ) ^if 00O( ^hasanyproperty ( $_original PUNCTUATION ) ) 00q{ ^next ( LOOP ) } 004 ^parsepossessive ( $_original ) $_original = _0 $_concept = ^join ( $_taskconcept - $_original ) ^if 00U( ^query ( exact_svo $_original member $_concept ) ) 00q{ ^next ( LOOP ) } 004 $_canon = ^pos ( canonical $_original ) ^if 00v( $_canon == unknown-word ) 00Q{ ^addproperty ( $_original PATTERN_WORD ) } 004 ^if 00Z( ^hasanyproperty ( $_original PATTERN_WORD NOUN VERB ) ) 02e{ $_fact = ^createfact ( $_original member $_patternconcept ) ^if 00h( $_protect ) 00-{ ^jsonarrayinsert ( "PERMANENT AUTODELETE" $_protect $_fact ) } 004 } 004 } } `
^deletepatternconcepts o 0 0 D( $_lcbotname $_lctaskname $_activityobject $_patternconcept ) $_patternconcept = ^join ( ~ bot- $_lcbotname -task- $_lctaskname -patterns ) ^if 00-( ^query ( exact_vo ? member $_patternconcept ) and ^delete ( @0 ) ) 00b{ } 004 `
^deleteignorewords o 0 0 D( ^lcbotname ^lctaskname ^activityobject $_activity $_ignore $_index $_ignoreword $_concept ) $_activity = ^2 $_ignore = $_activity.ignoreWords ^if 00L( ! $_ignore or ^length ( $_ignore ) == 0 ) 00p{ ^end ( CALL ) } 004 $_index = 0 ^loop ( -1 ) 039 { ^query ( direct_sv $_ignore $_index ? 1 ) $_ignoreword = @0object $_index += 1 $_concept = ^join ( ~ bot- ^0 - task - ^1 - $_ignoreword ) ^if 00+( ^query ( exact_so taskignoreword ? $_concept ) and ^delete ( @0 ) ) 00b{ } 004 } `
^defineignorewords o 0 0 D( ^lcbotname ^lctaskname ^activityobject $_activity $_ignore $_index $_ignoreword $_concept ) $_activity = ^2 $_ignore = $_activity.ignoreWords ^if 00L( ! $_ignore or ^length ( $_ignore ) == 0 ) 00p{ ^end ( CALL ) } 004 $_index = 0 ^loop ( -1 ) 02Q { ^query ( direct_sv $_ignore $_index ? 1 ) $_ignoreword = @0object $_index += 1 $_concept = ^join ( ~ bot- ^0 - task - ^1 - $_ignoreword ) ^createfact ( taskignoreword taskignoreword $_concept ) } `
^deleteactionvocabulary o 0 0 C( ^lcbotname ^array $_activityobject $_lctaskname $_original $_possessive $_concept $_possconcept ) @17 = ^query ( exact_s ^1 ? ? ) ^loop ( -1 ) 0cz { $_activityobject = ^first ( @17object ) $_lctaskname = $_activityobject.name $_lctaskname = ^pos ( lowercase $_lctaskname ) ^deleteignorewords ( ^0 $_lctaskname $_activityobject ) @2 = ^burst ( $_lctaskname " " ) ^loop ( -1 ) 07W { $_original = ^first ( @2subject ) ^parsepossessive ( $_original ) $_original = _0 $_possessive = _1 $_concept = ^join ( ~ bot- ^0 - task - $_lctaskname - $_original ) ^if 00F( ^extract ( $_original 0 1 ) == \@ ) 00M{ $_original = ^join ( \\ $_original ) } 004 ^forgetword ( $_original ) ^if 00+( ^query ( exact_vo ? member $_concept -1 ? @1 ) and ^delete ( @1 ) ) 00b{ } 004 ^if 00k( $_possessive ) 02q{ $_possconcept = ^join ( ~ bot- ^0 - task - $_lctaskname - $_possessive ) ^if 012( ^query ( exact_vo ? member $_possconcept -1 ? @1 ) and ^delete ( @1 ) ) 00b{ } 004 } 004 } ^deletepatternconcepts ( ^0 $_lctaskname $_activityobject ) ^deletefieldconcepts ( ^0 $_lctaskname $_activityobject ) } `
^deletedialogvocabulary o 0 0 C( ^lcbotname ^array $_dialogobject $_lcdialogname $_original $_possessive $_concept $_possconcept ) @17 = ^query ( exact_s ^1 ? ? ) ^loop ( -1 ) 0bY { $_dialogobject = ^first ( @17object ) $_lcdialogname = $_dialogobject.name $_lcdialogname = ^pos ( lowercase $_lcdialogname ) ^deleteignorewords ( ^0 $_lcdialogname $_dialogobject ) @2 = ^burst ( $_lcdialogname " " ) ^loop ( -1 ) 07~ { $_original = ^first ( @2subject ) ^parsepossessive ( $_original ) $_original = _0 $_possessive = _1 $_concept = ^join ( ~ bot- ^0 - task - $_lcdialogname - $_original ) ^if 00F( ^extract ( $_original 0 1 ) == \@ ) 00M{ $_original = ^join ( \\ $_original ) } 004 ^forgetword ( $_original ) ^if 00+( ^query ( exact_vo ? member $_concept -1 ? @1 ) and ^delete ( @1 ) ) 00b{ } 004 ^if 00k( $_possessive ) 02s{ $_possconcept = ^join ( ~ bot- ^0 - task - $_lcdialogname - $_possessive ) ^if 012( ^query ( exact_vo ? member $_possconcept -1 ? @1 ) and ^delete ( @1 ) ) 00b{ } 004 } 004 } ^deletepatternconcepts ( ^0 $_lcdialogname $_dialogobject ) } ^if 00$( ^query ( exact_sv ^0 dialog ? -1 ? @1 ) and ^delete ( @1 ) ) 00b{ } 004 `
^generatedialogobjectvocabulary o 0 0 E( $_lcbotname $_dialogobject ^suffix ^protect $_intent $_tmp $_lcdialogname $_original $_dialogword $_possessive $_canon $_concept $_possconcept $_synof ) $_intent = $_dialogobject.name ^if 00i( ! $_intent ) 00I{ $_intent = $_dialogobject.intent } 004 ^if 00a( ^2 ) 01E{ $_intent = ^join ( $_intent "^ ^2" ) $_dialogobject.name = $_intent $_dialogobject.inDevelopment = true } 004 ^if 00v( ! $_dialogobject.intent ) 00T{ $_dialogobject.intent = $_dialogobject.name } 004 $_tmp = ^createfact ( $_lcbotname dialog $_intent ) ^if 00a( ^3 ) 00@{ ^jsonarrayinsert ( "PERMANENT AUTODELETE" ^3 $_tmp ) } 004 $_lcdialogname = ^pos ( lowercase $_intent ) @2 = ^burst ( $_lcdialogname " " ) ^loop ( -1 ) 0mf { $_original = ^first ( @2subject ) $_dialogword = $_original ^parsepossessive ( $_original ) $_original = _0 $_possessive = _1 $_canon = ^pos ( canonical $_original ) ^if 00v( $_canon == unknown-word ) 00+{ $_canon = $_original ^addproperty ( $_original PATTERN_WORD ) } 004 $_concept = ^join ( ~ bot- $_lcbotname - task - $_lcdialogname - $_original ) ^if 00#( ! ^properties ( $_canon ) or ^properties ( $_canon ) == 0 ) 01W{ ^if 00a( ^3 ) 00U{ ^jsonarrayinsert ( PERMANENT ^3 $_original ) } 00U else ( 1 ) 00E { ^rememberword ( $_original ) } 004 } 004 ^if 00D( ! ^isignorereadword ( $_canon ) ) 07G{ $_tmp = ^createfact ( $_canon member $_concept ) ^if 00a( ^3 ) 00@{ ^jsonarrayinsert ( "PERMANENT AUTODELETE" ^3 $_tmp ) } 004 ^if 00t( $_original != $_canon ) 01${ $_tmp = ^createfact ( $_original member $_concept ) ^if 00a( ^3 ) 00@{ ^jsonarrayinsert ( "PERMANENT AUTODELETE" ^3 $_tmp ) } 004 } 004 ^if 00k( $_possessive ) 036{ $_possconcept = ^join ( ~ bot- $_lcbotname - task - $_lcdialogname - $_possessive ) $_tmp = ^createfact ( $_possessive member $_possconcept ) ^if 00a( ^3 ) 00@{ ^jsonarrayinsert ( "PERMANENT AUTODELETE" ^3 $_tmp ) } 004 } 004 } 004 $_dialogword = ^pos ( lowercase $_dialogword ) $_dialogword = ^join ( $_lcbotname - $_dialogword ) $_tmp = ^join ( $_canon "," $_dialogword ) @0 = ^burst ( $_tmp "," ) ^loop ( -1 ) 04c { $_synof = ^first ( @0subject ) ^if 00C( ^extract ( $_synof 0 1 ) != \@ ) 036{ @1 = ^query ( direct_vo ? synmatch $_synof ) ^loop ( -1 ) 02c { $_tmp = ^first ( @1subject ) $_tmp = ^createfact ( $_tmp member $_concept ) ^if 00a( ^3 ) 00@{ ^jsonarrayinsert ( "PERMANENT AUTODELETE" ^3 $_tmp ) } 004 } } 004 } } ^addpatternconcepts ( $_lcbotname $_lcdialogname $_dialogobject ^3 ) `
^generatedialogvocabulary o 0 0 E( ^lcbotname ^array ^suffix ^protect $_dialogobject ) ^if 00c( ! ^1 ) 00p{ ^end ( CALL ) } 004 @17 = ^query ( exact_s ^1 ? ? ) ^loop ( -1 ) 01v { $_dialogobject = ^first ( @17object ) ^generatedialogobjectvocabulary ( ^0 $_dialogobject ^2 ^3 ) } `
^generateactionvocabulary o 0 0 D( $_lcbotname $_tasksarray $_suffix $_activityobject $_lctaskname $_original $_taskword $_possessive $_canon $_concept $_tmp $_possconcept $_synof ) ^if 00m( ! $_tasksarray ) 00p{ ^end ( CALL ) } 004 @17 = ^query ( exact_s $_tasksarray ? ? ) ^loop ( -1 ) 0oY { $_activityobject = ^first ( @17object ) ^if 00g( $_suffix ) 01H{ $_activityobject.name = ^join ( $_activityobject.name "^ $_suffix" ) $_activityobject.inDevelopment = true } 004 $_lctaskname = $_activityobject.name $_lctaskname = ^pos ( lowercase $_lctaskname ) ^notrace ( ^defineignorewords ( $_lcbotname $_lctaskname $_activityobject ) ) @2 = ^burst ( $_lctaskname " " ) ^loop ( -1 ) 0hU { $_original = ^first ( @2subject ) $_taskword = $_original ^parsepossessive ( $_original ) $_original = _0 $_possessive = _1 $_canon = ^pos ( canonical $_original ) ^if 00v( $_canon == unknown-word ) 00+{ $_canon = $_original ^addproperty ( $_original PATTERN_WORD ) } 004 $_concept = ^join ( ~ bot- $_lcbotname - task - $_lctaskname - $_original ) ^if 00V( ^query ( direct_so taskignoreword ? $_concept 1 ) ) 00q{ ^next ( LOOP ) } 004 ^if 00#( ! ^properties ( $_canon ) or ^properties ( $_canon ) == 0 ) 00E{ ^rememberword ( $_original ) } 004 ^if 00D( ! ^isignorereadword ( $_canon ) ) 04v{ $_tmp = ^createfact ( $_canon member $_concept ) ^if 00t( $_original != $_canon ) 00!{ $_tmp = ^createfact ( $_original member $_concept ) } 004 ^if 00k( $_possessive ) 021{ $_possconcept = ^join ( ~ bot- $_lcbotname - task - $_lctaskname - $_possessive ) $_tmp = ^createfact ( $_possessive member $_possconcept ) } 004 } 004 $_taskword = ^pos ( lowercase $_taskword ) $_taskword = ^join ( $_lcbotname - $_taskword ) $_tmp = ^join ( $_canon "," $_taskword ) @0 = ^burst ( $_tmp "," ) ^loop ( -1 ) 039 { $_synof = ^first ( @0subject ) ^if 00C( ^extract ( $_synof 0 1 ) != \@ ) 023{ @1 = ^query ( direct_vo ? synmatch $_synof ) ^loop ( -1 ) 019 { $_tmp = ^first ( @1subject ) $_tmp = ^createfact ( $_tmp member $_concept ) } } 004 } } ^addpatternconcepts ( $_lcbotname $_lctaskname $_activityobject null ) ^addfieldconcepts ( $_lcbotname $_lctaskname $_activityobject ) } `
^addbottasks o 0 0 D( $_lcbotname $_tasksarray $_type $_tasksuffix $_array ) $_tasksuffix = \@development @5 = ^jsonpropertiesforobjectsinarray ( $_tasksarray name ) @2 = ^jsonparentfrompropertyinarray ( $_tasksarray state published ) @6 = ^jsonpropertiesforobjectsinset ( @2 name ) $_array = ^makearrayfromset ( @6 subject ) ^if 00p( $_type == dialogs ) 00?{ ^generatedialogvocabulary ( $_lcbotname $_array null null ) } 017 else ( 1 ) 00$ { ^generateactionvocabulary ( $_lcbotname $_array null ) } 004 @7 = ^uniquefacts ( @5 @6subject ) @8 = ^intersectfacts ( @7 @6object ) $_array = ^makearrayfromset ( @8 subject ) ^if 00p( $_type == dialogs ) 014{ ^generatedialogvocabulary ( $_lcbotname $_array $_tasksuffix null ) } 01f else ( 1 ) 00= { ^generateactionvocabulary ( $_lcbotname $_array $_tasksuffix ) } 004 @9 = ^uniquefacts ( @7 @8subject ) $_array = ^makearrayfromset ( @9 subject ) ^if 00q( ^length ( @6 ) > 0 ) 02T{ ^if 00p( $_type == dialogs ) 014{ ^generatedialogvocabulary ( $_lcbotname $_array $_tasksuffix null ) } 01f else ( 1 ) 00= { ^generateactionvocabulary ( $_lcbotname $_array $_tasksuffix ) } 004 } 02T else ( 1 ) 02D { ^if 00p( $_type == dialogs ) 00?{ ^generatedialogvocabulary ( $_lcbotname $_array null null ) } 017 else ( 1 ) 00$ { ^generateactionvocabulary ( $_lcbotname $_array null ) } 004 } 004 `
^addtasksynonyms o 0 0 C( $_lcbotname $_synonyms $_object $_word $_synof $_choices $_syn $_canon $_tmp ) @1 = ^query ( exact_s $_synonyms ? ? ) ^loop ( -1 ) 06Y { $_object = ^first ( @1object ) $_word = $_object.word $_word = ^pos ( lowercase $_word ) $_word = ^substitute ( character $_word " i " " I " ) $_synof = ^join ( $_lcbotname - $_word ) $_choices = $_object.choices @2 = ^query ( exact_s $_choices ? ? ) ^loop ( -1 ) 03d { $_syn = ^first ( @2object ) $_syn = ^pos ( lowercase $_syn ) $_syn = ^substitute ( character $_syn " i " " I " ) $_canon = $_syn ^addproperty ( $_canon PATTERN_WORD ) $_tmp = ^createfact ( $_canon synmatch $_synof FACTTRANSIENT ) } } `
^addbottoconcept o 0 0 C( ^bottype ^botname $_bottype $_botname $_junk ) $_bottype = ^join ( ~ k- ^0 -bots ) $_botname = ^1 $_junk = ^createfact ( $_botname member $_bottype ) `
^persistbotinformation o 0 0 C( $_bottype $_botobject $_botname $_lcbotname $_tmp $_word ) $_botname = $_botobject.name $_lcbotname = ^pos ( lowercase $_botname ) ^if 00I( ^isnonfunctioningbot ( $_botobject ) ) 00N{ ^delete ( $_botobject ) ^end ( CALL ) } 004 ^if 00s( $_botobject.synonyms ) 00#{ ^addtasksynonyms ( $_lcbotname $_botobject.synonyms ) } 004 $_tmp = ^createfact ( $_botname cheatpublicbots $_botname ) ^addbottoconcept ( $_bottype $_botname ) ^notrace ( @19 = ^burst ( $_botname " " ) ^loop ( -1 ) 01q { $_word = ^first ( @19subject ) ^rememberword ( $_word ) ^addproperty ( $_word PATTERN_WORD ) } ^if 00r( $_bottype == public ) 04F{ ^if 00r( $_botobject.actions ) 013{ ^generateactionvocabulary ( $_lcbotname $_botobject.actions null ) } 004 ^if 00q( $_botobject.alerts ) 012{ ^generateactionvocabulary ( $_lcbotname $_botobject.alerts null ) } 004 ^if 00r( $_botobject.dialogs ) 018{ ^generatedialogvocabulary ( $_lcbotname $_botobject.dialogs null null ) } 004 } 046 else ( 1 ) 03# { ^if 00r( $_botobject.actions ) 00Y{ ^addbottasks ( $_lcbotname $_botobject.actions ) } 004 ^if 00q( $_botobject.alerts ) 00X{ ^addbottasks ( $_lcbotname $_botobject.alerts ) } 004 ^if 00r( $_botobject.dialogs ) 00^{ ^addbottasks ( $_lcbotname $_botobject.dialogs dialogs ) } 004 } 004 ) `
^mergebotinformation o 0 0 B( $_botobject $_botdata $_publicbotid $_botname $_lcbotname $_tasksuffix ) ^if 01m( ^jsonparentfrompropertyinarray ( $_botobject.actions state published ) and ^delete ( @0 ) ) 00b{ } 004 ^if 01l( ^jsonparentfrompropertyinarray ( $_botobject.alerts state published ) and ^delete ( @0 ) ) 00b{ } 004 ^if 01m( ^jsonparentfrompropertyinarray ( $_botobject.dialogs state published ) and ^delete ( @0 ) ) 00b{ } 004 ^if 00I( ^isnonfunctioningbot ( $_botobject ) ) 00N{ ^delete ( $_botobject ) ^end ( CALL ) } 004 $_botdata = ^publicbotdata ( ) @0 = ^jsonparentfrompropertyinarray ( $_botdata _id $_botobject._id ) $_publicbotid = @0object $_botname = $_botobject.name $_lcbotname = ^pos ( lowercase $_botname ) ^addtasksynonyms ( $_lcbotname $_publicbotid.synonyms ) $_botobject._id = null $_botobject.name = null $_botobject.confirm = null $_botobject.isNLEnabled = null $_botobject.synonyms = null $_botobject.publicbot = $_publicbotid._id $_tasksuffix = \@development ^generateactionvocabulary ( $_lcbotname $_botobject.actions $_tasksuffix ) ^generateactionvocabulary ( $_lcbotname $_botobject.alerts $_tasksuffix ) ^generatedialogvocabulary ( $_lcbotname $_botobject.dialogs $_tasksuffix null ) `
^persistbotsinformation o 0 0 C( $_botstype $_botlist $_len $_index $_botobject ) ^if 00j( ! $_botlist ) 00p{ ^end ( CALL ) } 004 $_len = ^length ( $_botlist ) $_index = $_len ^loop ( $_len ) 03D { $_index -= 1 $_botobject = $_botlist[$_index] ^if 01a( ^extract ( $_botobject 0 4 ) != jo-x and ^ispublicbotbyid ( $_botobject._id ) ) 00M{ ^mergebotinformation ( $_botobject ) } 012 else ( 1 ) 00Z { ^persistbotinformation ( $_botstype $_botobject ) } 004 } `
^deletebotsfromconcept o 0 0 C( ^bottype ^bots $_bottype $_botobject $_botname $_lcbotname $_word $_botid ) $_bottype = ^join ( ~ k- ^0 -bots ) @10 = ^query ( exact_s ^1 ? ? ) ^loop ( -1 ) 0b# { $_botobject = ^first ( @10object ) $_botname = $_botobject.name ^if 00h( $_botname ) 062{ $_lcbotname = ^pos ( lowercase $_botname ) ^if 01a( ^query ( exact_svo $_botname cheatpublicbots $_botname 1 ) and ^delete ( @0 ) ) 00b{ } 004 ^if 00+( ^query ( exact_svo $_botname member ~k-bot 1 ) and ^delete ( @0 ) ) 00b{ } 004 ^if 011( ^query ( exact_svo $_botname member $_bottype 1 ) and ^delete ( @0 ) ) 00b{ } 004 ^notrace ( @19 = ^burst ( $_botname " " ) ^loop ( -1 ) 00~ { $_word = ^first ( @19subject ) ^forgetword ( $_word ) } ) } 01M else ( 1 ) 01w { $_botid = ^getbotobject ( $_botobject.publicbot ) $_lcbotname = ^pos ( lowercase $_botid.name ) } 004 ^notrace ( ^if 00j( $_lcbotname ) 02E{ ^deleteactionvocabulary ( $_lcbotname $_botobject.actions ) ^deleteactionvocabulary ( $_lcbotname $_botobject.alerts ) ^deletedialogvocabulary ( $_lcbotname $_botobject.dialogs ) } 004 ) } `
^getuserfirstname o 0 0 A( $_headers $_url $_tmp ) $_headers = ^gethttpheaders ( $server $authorization ) $_url = ^"$protocol://$server/users/profile?userId=$userid" ^nofail ( RULE $_tmp = null $_tmp = ^jsonopen ( transient get $_url null $_headers ) ) ^return ( $_tmp.personalInfo.firstName ) `
^getuserinstalledbots o 0 0 A( $_headers $_instanceurl $_msg ) $_headers = ^gethttpheaders ( $server $authorization ) ^if 00m( $installedbots ) 01L{ ^if 00=( ^query ( exact_s $installedbots ? ? -1 ? @10 ) and ^delete ( @10 ) ) 00b{ } 004 $installedbots = null } 004 $_instanceurl = ^"$protocol://$server/market/streamsnew?isKora=true&installedBot=true" ^if 00l( $$channelinfo ) 00${ $_instanceurl = ^"$_instanceurl&channel=$$channelInfo" } 004 $installedbots = ^jsonopen ( permanent get $_instanceurl null $_headers ) $_msg = ^jsonerror ( $installedbots ) ^if 00d( $_msg ) 01I{ ^addjsonfailure ( get $_instanceurl $_msg ) ^delete ( $installedbots ) $installedbots = null ^fail ( CALL ) } 016 else 00D( ^length ( $installedbots ) == 0 ) 00x{ $installedbots = null } 004 `
^deleteprivatebots o 0 0 A( ) ^deletebotsfromconcept ( private $privatebots ) ^nofail ( RULE ^delete ( $privatebots ) ) $privatebots = null `
^callprivateandenterprisebotdataapi o 0 0 B( $_payloadjson $_headers $_instanceurl $_msg ) ^nofail ( RULE ^deleteprivatebots ( ) ) $_headers = ^gethttpheaders ( $server $authorization ) $_instanceurl = ^"$protocol://$server/market/streamsnew/mystreams?isKora=true&newPayload=true" ^if 00l( $$channelinfo ) 00${ $_instanceurl = ^"$_instanceurl&channel=$$channelInfo" } 004 $privatebots = ^jsonopen ( permanent post $_instanceurl $_payloadjson $_headers ) $_msg = ^jsonerror ( $installedbots ) ^if 00d( $_msg ) 01F{ ^addjsonfailure ( post $_instanceurl $_msg ) ^delete ( $privatebots ) $privatebots = null ^fail ( CALL ) } 043 else 00B( ^length ( $privatebots ) == 0 ) 00v{ $privatebots = null } 035 else ( 1 ) 02@ { ^notrace ( ^persistbotsinformation ( private $privatebots ) ) ^if 00s( $$privatebotsversion ) 00S{ $privatebotsversion = $$privatebotsversion } 00X else ( 1 ) 00H { $privatebotsversion = %fulltime } 004 } 004 `
^preparebotslistforfetchingbotsdata o 0 0 B( $_botslist $_payload $_streamnames $_botobject $_botname ) $_payload = ^jsoncreate ( TRANSIENT object ) $_streamnames = ^jsoncreate ( TRANSIENT array ) ^if 00i( $_botslist ) 03W{ @4 = ^query ( exact_s $_botslist ? ? ) ^loop ( -1 ) 02* { $_botobject = ^last ( @4object ) ^if 00x( ^jsonkind ( $_botobject ) ) 00E{ $_botname = $_botobject.name } 00P else ( 1 ) 00z { $_botname = $_botobject } 004 ^jsonarrayinsert ( TRANSIENT $_streamnames $_botname ) } } 004 $_payload.streamNames = $_streamnames ^return ( $_payload ) `
^getuserprivateandenterprisebotdata o 0 0 B( $_all $_payload $_payloadjson ) ^if 00d( $_all ) 01B{ $_payload = ^jsoncreate ( TRANSIENT object ) $_payload.streamNames = ^jsoncreate ( TRANSIENT array ) } 03k else ( 1 ) 034 { $_payload = ^preparebotslistforfetchingbotsdata ( $privatebots ) ^if 00&( $nonkorabotname and ! ^isprivatebotbyname ( $nonkorabotname ) ) 015{ ^jsonarrayinsert ( TRANSIENT $_payload.streamNames $nonkorabotname ) } 004 } 004 $_payloadjson = ^jsonwrite ( $_payload ) ^callprivateandenterprisebotdataapi ( $_payloadjson ) $_payload = null `
^getmissingbotdata o 0 0 B( $_botname $_payload $_payloadjson ) ^if 00V( $_botname and ! ^isprivatebotbyname ( $_botname ) ) 03q{ $_payload = ^preparebotslistforfetchingbotsdata ( $privatebots ) ^jsonarrayinsert ( TRANSIENT $_payload.streamNames $_botname ) $_payloadjson = ^jsonwrite ( $_payload ) ^callprivateandenterprisebotdataapi ( $_payloadjson ) $_payload = null } 004 `
^getmissingbotsdataforbotslist o 0 0 C( $_botslist $_listcount $_index $_botname $_payload $_fetchbots $_payloadjson ) ^if 00l( ! $_listcount ) 00M{ $_listcount = ^length ( $_botslist ) } 004 $_index = 0 ^loop ( $_listcount ) 04o { $_botname = $_botslist[$_index] $_index += 1 ^if 00H( ! ^isprivatebotbyname ( $_botname ) ) 02={ ^if 00j( ! $_payload ) 011{ $_payload = ^preparebotslistforfetchingbotsdata ( $privatebots ) } 004 ^if 00h( $_payload ) 00={ ^jsonarrayinsert ( TRANSIENT $_payload.streamNames $_botname ) } 004 $_fetchbots = true } 004 } ^if 00j( $_fetchbots ) 01M{ $_payloadjson = ^jsonwrite ( $_payload ) ^callprivateandenterprisebotdataapi ( $_payloadjson ) $_payload = null } 004 `
^get_bots_by_name o 0 0 C( ^name ^type $$name $$tmp $$junk $$count $$botids ) $$name = ^substitute ( character ^0 "_" "%20" ) $$name = ^substitute ( character ^0 " " "%20" ) $$instanceurl = ^"$protocol://$server/market/search?q=$$name&type=^1&namespace=public" ^if 00l( $$channelinfo ) 00${ $$instanceurl = ^"$$instanceurl&channel=$$channelInfo" } 004 $$tmp = ^invoke_json ( transient get $$instanceurl null "^to get a ^0 bot" get_bots_by_name ) $$junk = $$tmp.streams $$count = ^length ( $$junk ) ^if 00k( $$count != 0 ) 02c{ $$botids = ^create_element_array ( transient $$tmp ".streams" "{_id: $$item._id, name: $$item.name, actions: $$item.actions, alerts: $$item.alerts}" ) } 004 ^return ( $$botids ) `
^fetchkoragenericresponses o 0 0 A( $_url $_headers ) $_url = ^"$protocol://$server/streams/koraGenericResp" $_headers = ^gethttpheaders ( $server null ) ^nofail ( RULE $genericmessages = null $genericmessages = ^jsonopen ( permanent get $_url null $_headers ) ) ^if 00q( ! $genericmessages ) 00!{ $genericmessages = ^jsoncreate ( permanent object ) } 004 `
^botauthorized o 0 0 B( ^topicid $$tmp $$isauthorized ) $$isauthorized = null ^if 00k( $namespaceid ) 039{ $$tmppath = teams $$tmpid = $namespaceid _19 = ^burst ( count $namespaceid - ) ^if 00g( _19 >= 2 ) 01N{ @10 = ^burst ( $namespaceid - ) $$tmp = ^first ( @10subject ) ^if 00i( $$tmp == u ) 00t{ $$tmppath = users } 004 } 004 } 00! else ( 1 ) 00L { $$tmppath = users $$tmpid = $userid } 004 $$url = ^"$protocol://$server/$$tmpPath/$$tmpId/workflows/^0" $$tmp = ^invoke_json ( transient get $$url null "^to check if the bot requires authorization" BotAuthorized ) $$isauthorized = $$tmp.isConnected ^return ( $$isauthorized ) `
^install_bot o 0 0 B( ^botid $_payload $_root $_request $_topicid ) $_payload = null ^if 00l( $$channelinfo ) 01#{ $_root = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_root channels $$channelinfo string ) $_payload = ^jsonwrite ( $_root ) } 004 $_request = ^invoke_json ( transient post "^$protocol://$server/market/streams/^0/install?namespaceId=$userid" $_payload "^to install a bot with id ^0" install_bot ) ^notrace ( ^if 00z( ! ^getuserinstalledbots ( ) ) 00K{ $whenlastdone = 0 $_request = null } 004 ) ^if 00h( $_request ) 00~{ $$justinstalled = ^0 $_topicid = $_request.topicId } 004 ^return ( $_topicid ) `
^get_streaminfo_for_bot o 0 0 B( ^botid $_cacheitem $_topicid $_instanceurl $_tmp $_tmpmodified ) ^if 00k( $roomtopicid ) 00A{ ^return ( $roomtopicid ) } 004 ^if 00n( $channeltopicid ) 00D{ ^return ( $channeltopicid ) } 004 $_cacheitem = ^0 ^if 00l( $$channelinfo ) 00!{ $_cacheitem = ^join ( $_cacheitem _ $$channelinfo ) } 004 $_topicid = ^getcacheitem ( topics $_cacheitem ) ^if 00h( $_topicid ) 00x{ ^return ( $_topicid ) } 004 $_instanceurl = ^"$protocol://$server/market/streams/^0?namespace=public" ^if 00l( $$channelinfo ) 00${ $_instanceurl = ^"$_instanceurl&channel=$$channelInfo" } 004 $_tmp = ^invoke_json ( transient get $_instanceurl null "^to get stream details for ^0 bot" get_streaminfo_for_bot ) ^if 00y( $_tmp.isInstalled == false ) 04*{ $_topicid = ^install_bot ( ^0 ) ^if 00j( ! $_topicid ) 044{ $_tmpmodified = ^messagemap ( "^You don't have the <botname> bot installed. What do you want to do now?" "^You don't have the $botname bot installed. What do you want to do now?" ) ^sendstatementsummary ( $_tmpmodified ) ^nofail ( RULE ^delete ( $_tmp ) ) ^cannot_do_request ( $_tmpmodified ) } 004 } 00R else ( 1 ) 00B { $_topicid = $_tmp.topicId } 004 ^nofail ( RULE ^delete ( $_tmp ) ) ^savecacheitem ( topics $_cacheitem $_topicid onreload ) ^return ( $_topicid ) `
^get_authorization o 0 0 E( ^orderid ^instanceid ^name ^taskinfo $_taskinfo $_urlcheck $_tmp $_filters ) $_taskinfo = ^3 $_urlcheck = ^"$protocol://$server/market/orders/^0/instances/^1/check" ^if 00f( $teamid ) 00S{ $_urlcheck = ^"$_urlcheck?$teamId=$teamId" } 004 $_tmp = ^invoke_json ( transient get $_urlcheck null "^to get your ^2 authorization" get_authorization ) $_taskinfo.authsetup = $_tmp.auth.setup ^if 00@( $_tmp.auth.required == true and $_tmp.auth.setup != true ) 00D{ $_taskinfo.checkauth = true } 00T else ( 1 ) 00D { $_taskinfo.checkauth = null } 004 $_filters = $_tmp.filters ^if 00h( $_filters ) 00Y{ $_taskinfo.filtersavailable = $_filters.required } 00! else ( 1 ) 00L { $_taskinfo.filtersavailable = false } 004 ^if 00B( ! $_taskinfo.filtersavailable ) 00L{ $_taskinfo.filtersavailable = false } 004 `
^use_auth_data o 0 0 B( ^accounts $_accounts $_acc ) $_accounts = ^0 $taskinfo.currentaccountid = $_accounts.currentAccount ^if 00A( ! $taskinfo.currentaccountid ) 00%{ $taskinfo.currentaccountid = $_accounts.lastUsedAccount } 004 $taskinfo.xAuthorizedAccounts = ^jsoncopy ( permanent $_accounts.existingAccounts ) ^if 00y( $taskinfo.currentaccountid ) 01-{ @0 = ^jsonparentfromproperty ( streamAccountId $taskinfo.currentaccountid ) $_acc = @0object $taskinfo.currentaccountname = $_acc.label } 00S else ( 1 ) 00C { $taskinfo.authsetup = null } 004 `
^get_instance_auth o 0 0 D( ^orderid ^instanceid ^topicid $_cacheitem $_accounts $_instanceurl $_tmp ) $_cacheitem = ^1 ^if 00f( $teamid ) 00-{ $_cacheitem = ^join ( $_cacheitem _ $teamid _ $roomtopicid ) } 00^ else ( 1 ) 00Q { $_cacheitem = ^join ( $_cacheitem _ ^2 ) } 004 $_accounts = ^getcacheitem ( instanceaccounts $_cacheitem ) ^if 00^( ! $_accounts or ^length ( $_accounts.existingAccounts ) == 0 ) 09t{ $_instanceurl = ^"$protocol://$server/market/orders/^0/instances/^1?q=auth" ^if 00f( $teamid ) 015{ $_instanceurl = ^"$_instanceurl&teamId=$teamId&topicId=$roomTopicId" } 00= else 00a( ^2 ) 00T{ $_instanceurl = ^"$_instanceurl&topicId=^2" } 004 $_tmp = ^invoke_json ( transient get $_instanceurl null "^to get auth for the instance of an order" get_instance_auth ) $_accounts = ^jsoncreate ( transient object ) ^if 00K( ^length ( $_tmp.existingAccounts ) > 0 ) 037{ $_accounts.currentAccount = $_tmp.currentAccount $_accounts.lastUsedAccount = $_tmp.lastUsedAccount $_accounts.existingAccounts = $_tmp.existingAccounts ^savecacheitem ( instanceaccounts $_cacheitem $_accounts onreload ) } 004 } 004 ^use_auth_data ( $_accounts ) `
^set_instance_auth o 0 0 D( ^orderid ^instanceid ^authid $_instanceurl $_cacheitem $_accounts ) $_instanceurl = ^"$protocol://$server/market/orders/^0/instances/^1/setauth?accountId=^2" $_cacheitem = ^1 ^if 00f( $teamid ) 01${ $_instanceurl = ^"$_instanceurl&teamId=$teamId&topicId=$roomTopicId" $_cacheitem = ^join ( $_cacheitem _ $teamid _ $roomtopicid ) } 02a else 00p( $taskinfo.topicid ) 01P{ $_instanceurl = ^"$_instanceurl&topicId=$taskinfo.topicid" $_cacheitem = ^join ( $_cacheitem _ $taskinfo.topicid ) } 004 $_accounts = ^invoke_json ( transient put $_instanceurl { } "^to set auth for the instance of an order" set_instance_auth ) ^savecacheitem ( instanceaccounts $_cacheitem $_accounts onreload ) ^use_auth_data ( $_accounts ) `
^get_order_id o 0 0 D( ^name ^id ^kind $_cacheitem $_orderid $_root $_payload $_orderurl $_tmp ) $_cacheitem = ^1 ^if 00f( $teamid ) 00-{ $_cacheitem = ^join ( $_cacheitem _ $teamid _ $roomtopicid ) } 004 $_orderid = ^getcacheitem ( orders $_cacheitem ) ^if 00h( $_orderid ) 00x{ ^return ( $_orderid ) } 004 $_root = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_root resourceType ^2 string ) ^insertjsontypedvalue ( $_root resourceId ^1 string ) $_payload = ^jsonwrite ( $_root ) $_orderurl = ^"$protocol://$server/market/orders?namespace=namespace-public" ^if 00f( $teamid ) 00={ $_orderurl = ^"$_orderurl&teamId=$teamId&topicId=$roomTopicId" } 004 $_tmp = ^invoke_json ( transient post $_orderurl $_payload "^to get a ^2 order id for your ^0 bot" get_order_id ) $_orderid = $_tmp.id ^savecacheitem ( orders $_cacheitem $_orderid onreload ) ^return ( $_orderid ) `
^get_instance_data o 0 0 C( ^orderid ^instanceid $_instanceurl $_tmp ) $_instanceurl = ^"$protocol://$server/market/orders/^0/instances/^1" $_tmp = ^invoke_json ( transient get $_instanceurl null "^to get data for the instance of an order" get_instance_data ) ^return ( $_tmp ) `
^get_order_instance o 0 0 C( ^orderid ^topicid $_instanceurl $_tmp ) $_instanceurl = ^"$protocol://$server/market/orders/^0/instances" ^if 00f( $teamid ) 015{ $_instanceurl = ^"$_instanceurl?teamId=$teamId&topicId=$roomTopicId" } 00= else 00a( ^1 ) 00T{ $_instanceurl = ^"$_instanceurl?topicId=^1" } 004 $_tmp = ^invoke_json ( transient post $_instanceurl "{}" "^to get an instance id for your next alert/action" get_instance_id ) ^return ( $_tmp ) `
^get_instance o 0 0 E( ^instanceid ^orderid ^topicid ^kind $_instanceid $_instance $_tmp $_cacheitem $_auth ) $_instanceid = ^0 ^if 00k( $_instanceid ) 02l{ $_instance = ^getcacheitem ( instancedata $_instanceid ) ^if 00i( $_instance ) 00y{ ^return ( $_instance ) } 004 $_tmp = ^get_instance_data ( ^1 $_instanceid ) } 029 else ( 1 ) 01^ { $_tmp = ^get_order_instance ( ^1 ^2 ) ^if 00j( ^3 != alert ) 00?{ ^savecacheitem ( instances $_cacheitem $_tmp._id onreload ) } 004 } 004 $_instance = ^jsoncreate ( transient object ) $_instance._id = $_tmp._id $_instance.type = $_tmp.type $_instance.actionVersion = $_tmp.actionVersion $_auth = $_tmp.setupInfo.auth $_instance.authrequired = $_auth.required ^if 00D( $_instance.authrequired == true ) 00C{ $_instance.idp = $_tmp.idp } 004 $_instance.authsetup = $_auth.setup ^if 00-( $_instance.authrequired == true and $_instance.authsetup != true ) 00D{ $_instance.checkauth = true } 004 ^savecacheitem ( instancedata $_instance._id $_instance onreload ) ^return ( $_instance ) `
^get_instance_fields o 0 0 C( ^orderid ^instanceid $_instanceurl $_fieldtoberemoved ) $_instanceurl = ^"$protocol://$server/market/orders/^0/instances/^1/getFieldInfo" ^if 00f( $teamid ) 00Y{ $_instanceurl = ^"$_instanceurl?$teamId=$teamId" } 004 $taskinfo.fields = ^invoke_json ( permanent get $_instanceurl null "^to set fields for your next action" get_instance_fields ) $_fieldtoberemoved = label ^removespecificfields ( $taskinfo.fields $_fieldtoberemoved ) ^erasefields ( ) `
^get_dialog_id o 0 0 C( ^botname ^activity $_dialogs $_count $_size $_dialog $_activityname ) $_dialogs = ^getlistofdialogsforbot ( ^0 ) $_count = 0 $_size = ^length ( $_dialogs ) ^loop ( $_size ) 045 { $_dialog = $_dialogs[$_count] ^if 00l( $_dialog.name ) 00G{ $_activityname = $_dialog.name } 011 else 00n( $_dialog.intent ) 00I{ $_activityname = $_dialog.intent } 004 ^if 00s( $_activityname == ^1 ) 018{ ^if 00q( $_dialog.dialog_id ) 00G{ ^return ( $_dialog.dialog_id ) } 004 } 004 $_count += 1 } ^return ( null ) `
^prepare_bot o 0 0 G( ^botname ^botid ^kind ^activity ^which ^instanceid $_botname $_isdialog $_activity $_instance $_webhook ) ^if 00h( $taskinfo ) 00n{ ^return ( ) } 004 $taskinfo = ^jsoncreate ( PERMANENT object ) $_botname = ^pos ( lowercase ^0 ) ^if 00P( ^query ( direct_svo $_botname dialog ^3 1 ) ) 00q{ $_isdialog = 1 } 004 ^if 01k( $$oob.attachments and ^length ( $$oob.attachments ) > 0 and $$oob.attachments[0].fileId ) 00R{ $taskinfo.attachments = $$oob.attachments } 004 ^if 00i( $_isdialog ) 02&{ $taskinfo.currentintendedaction = ^3 ^notrace ( $taskinfo.dialogId = ^get_dialog_id ( ^0 ^3 ) ) $taskinfo.fieldkeys = ^jsoncreate ( PERMANENT object ) $taskinfo.fieldvalues = ^jsoncreate ( PERMANENT object ) } 0i~ else ( 1 ) 0iK { $taskinfo.fieldkeys = ^jsoncreate ( PERMANENT object ) $taskinfo.fieldvalues = ^jsoncreate ( PERMANENT object ) $originalinput = null ^notrace ( $_activity = ^getactivity ( ^0 ^3 ) ) $taskinfo.taskid = $_activity._id ^insertjsontypedvalue ( $taskinfo taskversion $_activity.version string ) $taskinfo.currentintendedaction = ^3 $taskinfo.topicid = ^get_streaminfo_for_bot ( ^1 ) $taskinfo.botorderid = ^get_order_id ( ^0 $_activity._id ^2 ) $_instance = ^get_instance ( ^5 $taskinfo.botorderid $taskinfo.topicid ^2 ) $taskinfo.taskinstanceid = $_instance._id $taskinfo.authrequired = $_instance.authrequired ^if 00C( $taskinfo.authrequired == true ) 00G{ $taskinfo.idp = $_instance.idp } 004 $taskinfo.authsetup = $_instance.authsetup $taskinfo.taskversion = $_instance.actionVersion ^jsonobjectinsert ( PERMANENT $taskinfo taskKind ^2 ) ^if 00s( $_instance.checkauth ) 00S{ $taskinfo.checkauth = $_instance.checkauth } 004 ^if 00j( ^2 == alert ) 01i{ ^get_authorization ( $taskinfo.botorderid $taskinfo.taskinstanceid ^0 $taskinfo ) } 004 ^if 00y( $_instance.type == webhook ) 00H{ $_webhook = $taskinfo.authsetup } 03d else ( 1 ) 02- { ^if 00C( $taskinfo.authrequired == true ) 01n{ ^get_instance_auth ( $taskinfo.botorderid $taskinfo.taskinstanceid $taskinfo.topicid ) } 004 ^get_instance_fields ( $taskinfo.botorderid $taskinfo.taskinstanceid ) } 004 $taskinfo.webhook = $_webhook } 004 $taskinfo.skipoptional = $skipoptional $$currentintendedaction = null `
^prepare_bot_for_edit_alert o 0 0 G( ^botname ^botid ^kind ^activity ^which ^instanceid ) ^prepare_bot ( ^0 ^1 ^2 ^3 ^4 ^5 ) `
^fetchmodifiedmessagesforbot o 0 0 B( ^botid $_tmpurl $_headers ) ^if 00B( ^0 == $$fetchmodifiedmessages ) 00p{ ^end ( CALL ) } 004 ^if 00X( $modifiedmessages and ^delete ( $modifiedmessages ) ) 00b{ } 004 $modifiedmessages = null ^if 00c( ! ^0 ) 00p{ ^end ( CALL ) } 004 $_tmpurl = ^"$protocol://$server/streams/koraGenericResp?streamId=^0" $_headers = ^gethttpheaders ( $server null ) $modifiedmessages = ^jsonopen ( permanent get $_tmpurl null $_headers ) $$fetchmodifiedmessages = ^0 `
^intentmatchresults o 0 0 D( $_botdata $_task $_via ) ^if 00p( $_botdata.botname ) 01s{ $$intentmatch.results.bot = $_botdata.botname $$intentmatch.results.botid = $_botdata.botid } 01D else ( 1 ) 01n { $$intentmatch.results.bot = $_botdata.name $$intentmatch.results.botid = $_botdata._id } 004 $$intentmatch.results.task = $_task $$intentmatch.results.intentIdentifiedVia = $_via `
^cachebottaskresults o 0 0 D( $_botname $_results $_alternates ) ^if 00q( ! $$bottaskresults ) 00!{ $$bottaskresults = ^jsoncreate ( transient object ) } 004 $$bottaskresults.$_botname = $_results $$bottaskresults._alternates = $_alternates `
^getthreshold o 0 0 F( $_bot $_botdata $_mode $_type $_default $_index $_count $_confidencelevel $_threshold ) ^if 00j( ! $_botdata ) 00%{ ^notrace ( $_botdata = ^getbotdatabyname ( $botname ) ) } 004 $_index = 0 $_count = ^length ( $_botdata.confidenceConfigs ) ^loop ( $_count ) 05E { $_confidencelevel = $_botdata.confidenceConfigs[$_index] ^if 00p( $_confidencelevel ) 048{ ^if 00E( $_confidencelevel.mode == $_mode ) 03s{ ^if 00l( $_type == min ) 00U{ $_threshold = $_confidencelevel.minThreshold } 021 else 00l( $_type == max ) 00U{ $_threshold = $_confidencelevel.maxThreshold } 00& else ( 1 ) 00R { $_threshold = $_confidencelevel.threshold } 004 ^end ( LOOP ) } 004 } 004 $_index += 1 } ^if 00l( ! $_threshold ) 00z{ $_threshold = $_default } 004 ^return ( $_threshold ) `
^getfaq o 0 0 D( ^bot ^inputsentence ^timeout $_payload $_data $_headers $_response $_upperthreshold $_lowerthreshold $_len $_index $_faq $_matchdata $_faqs $_bestscore $_range ) ^if 00r( ^length ( ^1 ) == 0 ) 00s{ ^return ( null ) } 004 ^if 00t( ! $machinelearningapi ) 00s{ ^return ( null ) } 004 ^logif ( $taskmatch "^... checking FAQ : ^1 ... \n" ) $_payload = ^jsoncreate ( object ) $_payload.query = ^1 $_payload.botname = ^0 $_payload.responsecount = 3 $_data = ^jsonwrite ( $_payload ) $_headers = ^gethttpheaders ( $faqapi $authorization ) ^nofail ( RULE $_response = ^jsonopen ( transient POST $faqapi $_data $_headers ^2 ) ) ^if 00O( ! $_response or ! ^jsonkind ( $_response ) ) 024{ ^if 00A( $$cheatfaqbot and $_response ) 00A{ $$faqresult = $_response } 004 ^logif ( $taskmatch "^... ... nothing found \n" ) ^return ( null ) } 004 $_upperthreshold = ^getthreshold ( ^0 null faq max 80 ) $_lowerthreshold = ^getthreshold ( ^0 null faq min 60 ) @17 = null $_len = ^length ( $_response.response ) $_index = 0 ^loop ( $_len ) 0a4 { $_faq = $_response.response[$_index] $_index += 1 ^if 00o( $_faq.Score <= 0 ) 00q{ ^next ( LOOP ) } 004 $_faq.Score *= 100 ^logif ( $taskmatch "^... ... matched question \"$_faq.MatchedQuestion\" scoring $_faq.Score \n" ) $_matchdata = ^createoruseobject ( $$intentmatchdata $_faq.MatchedQuestion ) $_matchdata.activityType = 3 $_matchdata.faqScore = $_faq.Score $_faq._id = ^join ( faq - $_index ) ^if 00D( $_faq.Score >= $_upperthreshold ) 00E{ $_faq.thresholdMatch = upper } 01d else 00D( $_faq.Score >= $_lowerthreshold ) 00E{ $_faq.thresholdMatch = lower } 004 $_matchdata.threshold = $_faq.thresholdMatch ^if 00U( $_faq.Score >= $_lowerthreshold or $$cheatfaqbot ) 010{ @17 += ^createfact ( faqscore $_faq $_faq.Score FACTTRANSIENT ) } 004 } ^if 00s( ^length ( @17 ) == 0 ) 01-{ ^if 00l( $$cheatfaqbot ) 00?{ $_faqs = ^jsoncreate ( TRANSIENT array ) ^return ( $_faqs ) } 00I else ( 1 ) 00s { ^return ( null ) } 004 } 004 ^sort ( @17object ) $_faqs = ^makearrayfromset ( @17 verb inverse ) $_bestscore = $_faqs[0].Score $_range = $_bestscore $_range /= 10 $_bestscore -= $_range $_len = ^length ( $_faqs ) - 1 $_index = $_len ^loop ( $_len ) 025 { $_faq = $_faqs[$_index] ^if 00R( ! $$cheatfaqbot and $_faq.Score < $_bestscore ) 00R{ ^jsonarraydelete ( INDEX $_faqs $_index ) } 004 $_index -= 1 } ^return ( $_faqs ) `
^getmachinelearning o 0 0 E( $_bot $_inputsentence $_tasklist $_timeout $_payload $_headers $_results $_exactmatches $_index $_tasknames $_scores $_sentences $_match $_taskname $_tasks $_numtasks $_task $_score $_activity $_devtaskname $_len ) ^if 00P( ! $_bot or ^length ( $_inputsentence ) == 0 ) 00s{ ^return ( null ) } 004 ^if 00t( ! $machinelearningapi ) 00s{ ^return ( null ) } 004 ^logif ( $taskmatch "^... checking ML for bot $_bot : $_inputsentence ... \n" ) $_payload = ^jsoncreate ( TRANSIENT object ) $_payload.user_input = $_inputsentence $_payload.bot = $_bot $_payload = ^jsonwrite ( $_payload ) $_headers = ^gethttpheaders ( $machinelearningapi $authorization ) ^nofail ( RULE $_results = ^jsonopen ( transient post $machinelearningapi $_payload $_headers $_timeout ) ) ^if 00p( ! $_results.tasks ) 013{ ^logif ( $taskmatch "^... ... nothing found \n" ) ^return ( null ) } 004 $_exactmatches = ^length ( $_results.matched_sentence ) ^if 00q( $_exactmatches > 0 ) 05H{ $_index = 0 $_tasknames = ^jsoncreate ( transient array ) $_scores = ^jsoncreate ( transient array ) $_sentences = ^jsoncreate ( transient object ) ^loop ( $_exactmatches ) 039 { $_match = $_results.matched_sentence[$_index] $_taskname = $_match.taskname ^jsonarrayinsert ( transient $_tasknames $_taskname ) ^jsonarrayinsert ( transient $_scores $_match.score ) $_sentences.$_taskname = $_match.sentence } } 02* else ( 1 ) 02S { $_tasknames = $_results.tasks $_scores = $_results.scores ^if 00i( ! $_scores ) 00K{ $_scores = $_results.probabilities } 004 ^if 00i( ! $_scores ) 00J{ $_scores = $_results.probablities } 004 } 004 @5 = ^query ( direct_s $_tasknames ? ? ) @6 = ^query ( direct_s $_scores ? ? ) ^sort ( @6object @5 ) $_tasks = ^jsoncreate ( transient object ) $_numtasks = ^length ( $_scores ) ^if 00w( ^length ( $_scores ) < 3 ) 01C{ @15 = ^query ( direct_s $_scores ? ? ) ^if 00x( ^last ( @15object ) < 0.5 ) 00q{ $_numtasks = 0 } 004 } 004 ^loop ( $_numtasks ) 0b* { $_task = ^last ( @5object ) $_score = ^last ( @6object ) $_activity = null ^if 00i( $_tasklist ) 03q{ $_devtaskname = ^join ( $_task " @development" ) ^if 00S( ^query ( exact_so $_tasklist ? $_devtaskname ) ) 00Q{ $_task = $_devtaskname $_activity = true } 01a else 00L( ^query ( exact_so $_tasklist ? $_task ) ) 00t{ $_activity = true } 004 } 004 ^if 00i( $_activity ) 06%{ ^logif ( $taskmatch "^... ... $_task scored $_score " ) ^insertjsonobjectproperty ( $$intentmatchdata $_task mlScore $_score ) ^if 00j( $_sentences ) 024{ ^logif ( $taskmatch "^ from sentence $_sentences.$_task " ) ^insertjsonobjectproperty ( $$intentmatchdata $_task sentence $_sentences.$_task ) } 004 ^logif ( $taskmatch "^\n" ) ^if 00k( $$cheatmlbot ) 00${ ^if 00f( $_score ) 00A{ $_tasks.$_task = $_score } 004 } 01d else ( 1 ) 00- { ^if 00l( $_score > 0.1 ) 00A{ $_tasks.$_task = $_score } 004 } 004 } 004 } ^if 00v( ^length ( $_tasks ) > 0 ) 01F{ $_len = ^length ( $_tasks ) ^logif ( $taskmatch "^... found $_len tasks via ML \n" ) ^return ( $_tasks ) } 01n else ( 1 ) 017 { ^logif ( $taskmatch "^... no tasks found via ML \n" ) ^return ( null ) } 004 `
^locatematchingtasksfrombot o 0 0 D( $_botdata $_init $_threshold $_newarray $_botname $_recent $_botwhen $_lastused $_tmpsentences $_tasklist $_mltasks $_checkcstasks $_botxref $_holdbot $_logging $_tasks $_len $_junk $_alerts $_faqs $_lowerthreshold $_faqexacts $_faqalts $_index $_faq $_exactlen $_altlen ) ^if 00q( ! $$alternatearray ) 00~{ $$alternatearray = ^jsoncreate ( TRANSIENT array ) } 004 $_newarray = ^jsoncreate ( TRANSIENT array ) $$botnameposition = null $$matchbonus = 0 ^if 01f( $gleaninfo.botnames and ^query ( exact_so $gleaninfo.botnames ? $_botdata.name 1 ) ) 02z{ $$matchbonus = 1000 $$matchbonus *= 1.5 $_botname = $_botdata.name $$botnameposition = $gleaninfo.botread.$_botname ^if 00p( $_threshold > 0.6 ) 00t{ $_threshold = 0.6 } 004 } 05P else 00-( $_botdata.name == $botinfo.botname or $_botdata.name == $botname ) 01w{ $$matchbonus = 1000 $$matchbonus *= 2 ^if 00p( $_threshold > 0.6 ) 00t{ $_threshold = 0.6 } 004 } 03h else 00D( ^isrecentbot ( $_botdata.name ) ) 02I{ $_recent = true $_botwhen = ^botlastused ( $_botdata.name ) $_lastused = %fulltime - $_botwhen $_lastused /= 36 $_lastused += 100 $$matchbonus = 1000 * 100 $$matchbonus /= $_lastused } 004 $$intentmatchdata = ^jsoncreate ( transient object ) ^if 00G( ! $localmachine and $_tmpsentences ) 02Q{ $_tmpsentences = ^getcurrentvolleysentences ( null ) $_tasklist = ^getactivitynamesforbot ( $_botdata ) ^notrace ( $_mltasks = ^getmachinelearning ( $botname $_tmpsentences $_tasklist 10 ) ) } 004 $_checkcstasks = true ^if 00M( $_botdata.disableRuleRecognition == true ) 00x{ $_checkcstasks = null } 004 ^if 00B( $$matchbonus == 0 or $_recent ) 060{ $_botxref = ^join ( $_botdata.name -xref ) $_botxref = ^pos ( lowercase $_botxref ) ^if 00C( ! $gleaninfo.botxref.$_botxref ) 04d{ $_checkcstasks = null ^if 00#( ! $_mltasks and ^length ( $_botdata.knowledgeTasks ) == 0 ) 01C{ ^if 00z( $taskmatch or $$cheatlocate ) 00E{ ^log ( ... Not relevant \n ) } 004 ^return ( $_newarray ) } 004 ^if 00z( $taskmatch or $$cheatlocate ) 00X{ ^log ( ... No CS words associated with bot \n ) } 004 } 004 } 004 ^if 00e( $_init ) 00^{ ^notrace ( ^detectwords ( null $$volleysentenceindex ) ) } 004 $_holdbot = $botname $_botname = $_botdata.name $botname = $_botname $$intentmatch.inputSentence = $_tmpsentences $$intentmatch.bots.$_botname = $$intentmatchdata $$bestscore = 0 ^if 00B( $$cheatlocate or $$cheatscore ) 00s{ $_logging = true } 004 ^if 00C( ! $_checkcstasks and $_mltasks ) 00b{ } 004 ^nofail ( RULE ^notrace ( $_tasks = ^getlistofdialogsandactionsforbot ( $botname ) ) $_len = ^length ( $_tasks ) ^notrace ( ^logif ( $_logging "^... There are $_len actions to check in $botname with threshold $_threshold \n" ) ) ^if 00h( $_len > 0 ) 02N{ ^notrace ( $_junk = ^generate_choice ( $_tasks "^\^taskDisplayName" null 1 null true ) ) ^notrace ( $_newarray = ^findmatchingfields ( $_checkcstasks $botname 1 $_newarray $_threshold ) ) } 004 ) ^nofail ( RULE ^notrace ( $_alerts = ^getlistofalertsforbot ( $botname ) ) $_len = ^length ( $_alerts ) ^notrace ( ^logif ( $_logging "^... There are $_len alerts to check in $botname with threshold $_threshold \n" ) ) ^if 00h( $_len > 0 ) 02O{ ^notrace ( $_junk = ^generate_choice ( $_alerts "^\^taskDisplayName" null 1 null true ) ) ^notrace ( $_newarray = ^findmatchingfields ( $_checkcstasks $botname 2 $_newarray $_threshold ) ) } 004 ) ^if 00M( ^length ( $_botdata.knowledgeTasks ) > 0 ) 0ff{ $_tmpsentences = ^getcurrentvolleysentences ( true ) $_faqs = ^getfaq ( $botname $_tmpsentences 10 ) ^if 00e( $_faqs ) 0cl{ $_lowerthreshold = ^getthreshold ( $botname $_botdata faq min 60 ) $_threshold = $_lowerthreshold / 100 $_faqexacts = ^jsoncreate ( transient array ) $_faqalts = ^jsoncreate ( transient array ) $_len = ^length ( $_faqs ) $_index = 0 ^notrace ( ^logif ( $_logging "^... There is $_len FAQ matches in $botname with threshold $_threshold \n" ) ) ^loop ( $_len ) 03J { $_faq = ^jsoncopy ( transient $_faqs[$_index] ) $_index += 1 ^if 00B( $_faq.thresholdMatch == upper ) 00Y{ ^jsonarrayinsert ( transient $_faqexacts $_faq ) } 01t else 00B( $_faq.thresholdMatch == lower ) 00W{ ^jsonarrayinsert ( transient $_faqalts $_faq ) } 004 } ^notrace ( $_junk = ^generate_choice ( $_faqalts MatchedQuestion null null null true ) ) ^notrace ( $_newarray = ^findmatchingfields ( true $botname 3 $_newarray $_threshold ) ) ^if 00z( ^length ( $_faqexacts ) > 0 ) 00@{ $_newarray = ^appendarray ( $_newarray $_faqexacts ) } 004 } 01i else ( 1 ) 012 { ^notrace ( ^logif ( $_logging "^... There is no FAQ match \n" ) ) } 004 } 004 ^cachebottaskresults ( $botname $_newarray $$alternatearray ) ^if 00i( $taskmatch ) 024{ $_exactlen = ^length ( $_newarray ) $_altlen = ^length ( $$alternatearray ) ^log ( Found $_exactlen exact matches and $_altlen alternates \n ) } 004 $botname = $_holdbot $$matchbonus = null ^nofail ( RULE ^restoregleansentence ( $$volleysentenceindex ) ) ^return ( $_newarray ) `
^locatebesttask o 0 0 D( ^collection ^threshold ^existanceonly $_answer $_ourbestscore $_bname $_botdata $_newarray ) $_answer = ^jsoncreate ( TRANSIENT array ) $$goodanswer = ^jsoncreate ( TRANSIENT array ) $_ourbestscore = 0 ^notrace ( ^detectwords ( null $$volleysentenceindex ) ) @11 = ^query ( exact_s ^0 ? ? ) ^loop ( -1 ) 0cw { $_bname = ^first ( @11object ) $_botdata = ^getbotdatabyname ( $_bname ) ^if 00z( $taskmatch or $$cheatlocate ) 00&{ ^log ( $_bname : checking tasks in bot $_botdata ... \n ) } 004 ^if 00h( $_botdata ) 09L{ ^notrace ( $_newarray = ^locatematchingtasksfrombot ( $_botdata null ^1 ) ) ^if 00y( ^length ( $_newarray ) > 0 ) 07-{ ^if 00a( ^2 ) 00y{ ^return ( $_newarray ) } 004 ^if 00A( $$bestscore > $_ourbestscore ) 02Q{ ^logif ( $$cheatlocate "^*** new best score of $$bestscore \n" ) $$goodanswer = ^appendarray ( $$goodanswer $_answer ) $_answer = ^jsoncreate ( TRANSIENT array ) $_ourbestscore = $$bestscore } 004 ^if 00B( $$bestscore >= $_ourbestscore ) 01#{ ^jsonarrayinsert ( "TRANSIENT UNIQUE" $_answer $_botdata ) ^logif ( $$cheatlocate "^*** added $_botdata.name to the answer \n" ) } 01I else 00A( $$bestscore < $_ourbestscore ) 00={ ^jsonarrayinsert ( "TRANSIENT UNIQUE" $$goodanswer $_botdata ) } 004 } 004 } 004 } ^return ( $_answer ) `
^ismultipletask o 0 0 A( $$alternatearray $_usedup $_position $_threshold $_array $_answer $_bots $_botname $_xref $_accessiblebots ) ^if 00v( ! $processmultipletasks ) 00s{ ^return ( null ) } 004 ^if 00p( $hasmultipletasks ) 00F{ ^return ( $hasmultipletasks ) } 004 ^if 00i( $taskmatch ) 01w{ ^log ( \n **** Checking for another task in the input to perform after the current one ... \n ) } 004 ^if 00k( $taskprocess ) 00+{ ^log ( Words used up so far ^jsontree ( $gleaninfo.usedup ) ) } 004 @10 = ^query ( exact_s $gleaninfo.usedup ? ? ) ^sort ( alpha @10verb ) ^loop ( -1 ) 03k { $_usedup = ^last ( @10verb ) _0 = ^burst ( $_usedup - ) $_position = ^getpositionfromsentenceandindex ( _0 _1 ) ^deletejsonobjectsinarray ( $gleaninfo.toplevelread $_position ) ^deletejsonobjectsinarray ( $gleaninfo.botxref $_position ) } ^if 00k( $taskprocess ) 01U{ ^log ( Remaining words ^jsontree ( $gleaninfo.toplevelread ) ) ^log ( Remaining bots ^jsontree ( $gleaninfo.botxref ) ) } 004 ^if 00M( ^length ( $gleaninfo.toplevelread ) == 0 ) 00t{ ^return ( false ) } 004 $_threshold = 0.6 ^if 00n( $nonkorabotname ) 040{ $$alternatearray = ^jsoncreate ( transient array ) $_array = ^jsoncreate ( transient array ) ^jsonarrayinsert ( $_array $nonkorabotname ) ^notrace ( $_answer = ^locatebesttask ( $_array $_threshold true ) ) ^if 00w( ^length ( $_answer ) > 0 ) 00s{ ^return ( true ) } 004 ^return ( false ) } 004 $$alternatearray = ^jsoncreate ( transient array ) $_bots = ^jsoncreate ( transient array ) ^if 00r( $gleaninfo.botnames ) 00@{ $_bots = ^appendarray ( $_bots $gleaninfo.botnames ) } 004 ^if 00m( $installedbots ) 00X{ $_bots = ^appendarray ( $_bots $installedbots ) } 004 ^if 00u( ^length ( $_bots ) > 0 ) 01^{ ^notrace ( $_answer = ^locatebesttask ( $_bots $_threshold true ) ) ^if 00w( ^length ( $_answer ) > 0 ) 00s{ ^return ( true ) } 004 } 004 @1 = ^query ( exact_s $_bots ? ? ) ^loop ( -1 ) 02T { $_botname = ^first ( @1object ) $_botname = ^pos ( lowercase $_botname ) $_xref = ^join ( $_botname -xref ) ^if 00=( ^query ( exact_sv $gleaninfo.botxref $_xref ? ) and ^delete ( @0 ) ) 00b{ } 004 } $_accessiblebots = ^jsoncreate ( transient array ) @1 = ^query ( exact_s $gleaninfo.botxref ? ? ) ^loop ( -1 ) 02S { $_xref = ^last ( @1verb ) $_botname = ^substitute ( character $_xref -xref "^" ) $_botname = ^wordinconcept ( $_botname ~k-bot ) ^jsonarrayinsert ( "TRANSIENT UNIQUE" $_accessiblebots $_botname ) } ^if 00E( ^length ( $_accessiblebots ) > 0 ) 02S{ $$alternatearray = ^jsoncreate ( transient array ) ^notrace ( $_answer = ^locatebesttask ( $_accessiblebots $_threshold true ) ) ^if 00w( ^length ( $_answer ) > 0 ) 00s{ ^return ( true ) } 004 } 004 ^return ( false ) `
^finishedtasktest o 0 0 A( $_response $_intents $_taskobj $_entities $_count $_fieldcount $_field $_fieldobj $_val $_key $_kind $_type $_rfield ) $$oob.isTest = true $_response = ^jsoncreate ( object ) $_response._id = $botinfo.botid $_response.name = $botname $_intents = ^jsoncreate ( array ) $_taskobj = ^jsoncreate ( object ) ^if 00D( $taskinfo.currentintendedaction ) 01g{ ^insertjsontypedvalue ( $_taskobj name $taskinfo.currentintendedaction string ) } 01W else 00A( $$oob.faq.faqmatchedquestion ) 01d{ ^insertjsontypedvalue ( $_taskobj name $$oob.faq.faqmatchedquestion string ) } 004 ^jsonarrayinsert ( $_intents $_taskobj ) $_response.intent = $_intents ^if 00s( ! $taskinfo.dialogId ) 0fD{ $_entities = ^jsoncreate ( array ) $_count = 0 $_fieldcount = ^length ( $taskinfo.fields ) ^loop ( $_fieldcount ) 0dv { $_field = ^jsonpath ( "[$_count]" $taskinfo.fields ) $_count += 1 $_fieldobj = ^jsoncreate ( object ) $_val = ^getfieldtitle ( $_field ) ^insertjsontypedvalue ( $_fieldobj field $_val string ) $_key = ^getfieldkey ( $_field ) $_val = $taskinfo.fieldkeys.$_key ^if 00r( $_val == $k-novalue ) 00o{ $_val = null } 004 $_kind = ^getfieldfieldtype ( $_field ) $_type = ^getfieldtype ( $_field ) ^if 00M( $_kind == nestedForm and $_type == array ) 00A{ $_fieldobj.value = $_val } 018 else ( 1 ) 00% { ^insertjsontypedvalue ( $_fieldobj value $_val string ) } 004 ^insertjsontypedvalue ( $_fieldobj fieldType $_kind string ) ^insertjsontypedvalue ( $_fieldobj type $_type string ) $_val = ^getfieldmetadata ( $_field ) ^insertjsontypedvalue ( $_fieldobj metadata $_val string ) $_rfield = ^getresidentfield ( $botname $taskinfo.currentIntendedAction $_field ) $_val = ^getfieldrequired ( $_rfield ) ^insertjsontypedvalue ( $_fieldobj isMandatory $_val boolean ) ^jsonarrayinsert ( $_entities $_fieldobj ) } $_response.Entities = $_entities } 004 ^if 00p( $showtestresponse ) 00B{ ^jsonwrite ( $_response ) } 004 $$oob.response = $_response `
^finishedalerttest o 0 0 A( $_response $_intents $_taskobj $_entities ) $$oob.isTest = true $_response = ^jsoncreate ( object ) $_response._id = $botinfo.botid $_response.name = $botname $_intents = ^jsoncreate ( array ) $_taskobj = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_taskobj name $taskinfo.currentintendedaction string ) ^jsonarrayinsert ( $_intents $_taskobj ) $_response.intent = $_intents $_entities = ^jsoncreate ( array ) $_response.Entities = $_entities $$oob.response = $_response `
^undefinedtasktest o 0 0 A( $_response $_intents $_count $_taskcount $_task $_taskobj $_entities ) $$oob.isTest = true $_response = ^jsoncreate ( object ) $_response._id = $botinfo.botid $_response.name = $botname $_intents = ^jsoncreate ( array ) $_count = 0 $_taskcount = ^length ( $$tasks ) ^loop ( $_taskcount ) 02J { $_task = ^jsonpath ( "[$_count]" $$tasks ) $_taskobj = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_taskobj name $_task string ) ^jsonarrayinsert ( $_intents $_taskobj ) $_count += 1 } $_response.intent = $_intents $_entities = ^jsoncreate ( array ) $_response.Entities = $_entities $$oob.response = $_response `
^push_action o 0 0 A( $_context $_tmpmsg ) ^if 00j( ! $taskinfo ) 00q{ ^fail ( CALL ) } 004 $taskinfo.field = null ^if 00i( ! $context ) 00S{ $context = ^jsoncreate ( PERMANENT array ) } 004 $_context = ^jsoncreate ( PERMANENT object ) ^jsonarrayinsert ( PERMANENT $context $_context ) ^setrejoinder ( input null ) ^flush_choice ( true ) ^delete ( $date_ambiguity ) $date_ambiguity = null ^logif ( $controlflow "^PUSH_ACTION: Pushing task $taskinfo.currentintendedaction for $botinfo.botname \n" ) $_tmpmsg = ^"task $taskinfo.currentintendedaction for $botinfo.botname is paused" ^sendstatementsummary ( $_tmpmsg ) $_context.botinfo = $botinfo $_context.taskinfo = $taskinfo $_context.gleaninfo = ^jsoncopy ( permanent $$priorglean ) $_context.recordedInput = $$priorinput $_context.displayglean = $displayglean $botinfo = null $taskinfo = null $recordedinput = null $displayglean = null ^reset_basics ( ) `
^pop_action o 0 0 D( $_resettask $_callback $_executepoppedtask $_count $_context $_keysarray $_retval $_key $_keytoupdate ) ^if 00j( $_resettask ) 00E{ ^notrace ( ^reset_lead ( ) ) } 004 ^if 00i( $_callback ) 012{ $callbacktime = 1 $callbacktopic = ~glean_popaction ^end ( CALL ) } 004 ^if 00i( ! $context ) 00p{ ^end ( CALL ) } 004 ^if 00h( $taskinfo ) 00q{ ^fail ( RULE ) } 004 $_count = ^length ( $context ) - 1 $_context = $context[$_count] $botinfo = $_context.botinfo $botid = $botinfo.botid $botname = $botinfo.botname $taskinfo = $_context.taskinfo $gleaninfo = $_context.gleaninfo $displayglean = $_context.displayglean $recordedinput = $_context.recordedInput ^if 00z( $taskinfo.contextIdOnServer ) 0ae{ $_keysarray = ^jsoncreate ( TRANSIENT array ) ^jsonarrayinsert ( TRANSIENT $_keysarray "^context.intent" ) ^jsonarrayinsert ( TRANSIENT $_keysarray "^context.mappedDialog" ) $_retval = ^getvaluesforkeysfromcontext ( $taskinfo.contextJson.botid $taskinfo.contextIdOnServer $_keysarray ) $_key = ^"context.intent" $$currentintendedaction = $_retval.$_key $_key = ^"context.mappedDialog" ^if 00u( $_retval.$_key == true ) 04y{ ^if 00D( $taskinfo.onEndDialogMoveToNode ) 03T{ $taskinfo.dialogNode = $taskinfo.onEndDialogMoveToNode $taskinfo.onEndDialogMoveToNode = null $_keytoupdate = ^"context.mappedDialog" ^updatevalueforkeyincontext ( $taskinfo.contextJson.botid $taskinfo.contextIdOnServer $_keytoupdate null ) $taskinfo.doTransitions = 1 } 004 } 004 } 01a else ( 1 ) 00& { $$currentintendedaction = $taskinfo.currentintendedaction } 004 $protectglean = 1 ^jsonarraydelete ( "SAFE INDEX" $context $_count ) ^notrace ( ^safejsondelete ( $_context ) ) ^if 00x( ^length ( $context ) == 0 ) 00M{ ^delete ( $context ) $context = null } 004 ^logif ( $controlflow "^POP_ACTION: Popped task $$currentintendedaction in $botinfo.botname \n" ) $$poppedtask = true ^if 00r( $_executepoppedtask ) 03B{ ^if 00D( %actualtopic == $botinfo.action ) 01h{ ^logif ( $controlflow "^POP_ACTION: retry $botinfo.action \n" ) ^retry ( TOPIC ) } 01J else ( 1 ) 01t { ^logif ( $controlflow "^POP_ACTION: gambit $botinfo.action \n" ) ^gambit ( $botinfo.action ) } 004 } 004 `
^isittask o 0 0 A( $_holdold $_sentenceid $_holdnew $_outputresponse ) ^if 00$( $interruptsdisabled or $botinfo.interruptsEnabled == false ) 00s{ ^return ( null ) } 004 ^logif ( $taskmatch "^Checking to see if there is a task to interrupt with \n" ) $$isittask = 1 $_holdold = ^jsoncreate ( TRANSIENT object ) $_holdold.botinfo = $botinfo $_holdold.taskinfo = $taskinfo $_holdold.gleaninfo = $gleaninfo $_holdold.intent = $taskinfo.contextJson.intent $_holdold.displayglean = $displayglean $_holdold.volleySentenceIndex = $$volleysentenceindex ^notrace ( $_holdold.choice = ^push_choice ( ) ) $botinfo = null $taskinfo = null ^if 00l( $$volleyglean ) 00C{ $gleaninfo = $$volleyglean } 004 $displayglean = null $_sentenceid = ^length ( $gleaninfo.sentences ) - 1 $$volleysentenceindex = 0 ^restoregleansentence ( $_sentenceid ) $_holdnew = ^jsoncreate ( TRANSIENT object ) $_outputresponse = %response ^nofail ( TOPIC ^reuse ( ~control.process_action_flow ) ) $$isittask = null ^if 00h( $taskinfo ) 02?{ ^logif ( $taskmatch "^Switching to task $taskinfo.currentintendedaction \n" ) $_holdnew.botinfo = $botinfo $_holdnew.taskinfo = $taskinfo ^if 00l( $$volleyglean ) 00L{ $_holdnew.gleaninfo = $$volleyglean } 004 } 004 $botinfo = $_holdold.botinfo $taskinfo = $_holdold.taskinfo $gleaninfo = $_holdold.gleaninfo $displayglean = $_holdold.displayglean $$currentintendedaction = $taskinfo.currentintendedaction $$volleysentenceindex = $_holdold.volleySentenceIndex ^notrace ( ^pop_choice ( $_holdold.choice ) ) $_sentenceid = ^length ( $gleaninfo.sentences ) - 1 ^restoregleansentence ( $_sentenceid ) ^if 00B( %response != $_outputresponse ) 01R{ ^if 00g( $botinfo ) 018{ $faqinterruption = 1 $callbacktime = 1 $callbacktopic = $botinfo.action } 004 ^return ( 1 ) } 004 ^if 00q( $_holdnew.taskinfo ) 08P{ ^if 00s( $taskinfo.dialogNode ) 00T{ ^reuse ( ~dialogmgr.clear_finished_dialog ) } 004 ^nofail ( RULE ^push_action ( ) ) $botinfo = $_holdnew.botinfo $taskinfo = $_holdnew.taskinfo ^if 00l( $$volleyglean ) 01p{ ^delete ( $_holdold.gleaninfo ) $gleaninfo = ^jsoncopy ( PERMANENT $_holdnew.gleaninfo ) } 004 $$volleysentenceindex = 0 $$currentintendedaction = $taskinfo.currentintendedaction $recordedinput = %originalinput $_sentenceid = ^length ( $gleaninfo.sentences ) - 1 $botid = $botinfo.botid $botname = $botinfo.botname ^rememberbot ( $botid $botname ) ^restoregleansentence ( $_sentenceid ) ^gambit ( $botinfo.action ) ^return ( 1 ) } 004 ^return ( null ) `
^get_ml_names o 0 0 B( ^array $_newarray ) @1 = ^query ( exact_s ^0 ? ? ) $_newarray = ^makearrayfromset ( @1 verb ) ^return ( $_newarray ) `
^showfaq o 0 0 D( $_botdata $_faq $_via ) $_faq.Answer ^sendstatementsummary ( $_faq.Answer ) ^intentmatchresults ( $_botdata $_faq.MatchedQuestion $_via ) $$intentmatch.results.answer = $_faq.Answer ^logsuccess ( ) ^delete ( $botinfo ) $botinfo = null `
^extractspreadsheetid o 0 0 C( $_url $_length $_idindex $_results ) ^if 00-( ^findtext ( $_url "^https://docs.google.com/spreadsheets/d/" 0 ) ) 01d{ $_idindex = ^findtext ( $_url "^https://docs.google.com/spreadsheets/d/" 0 ) } 03H else 011( ^findtext ( $_url "^https://spreadsheets.google.com/feeds/list/" 0 ) ) 01h{ $_idindex = ^findtext ( $_url "^https://spreadsheets.google.com/feeds/list/" 0 ) } 01k else ( 1 ) 014 { ^"Error: Can't find a valid Google spreadsheet url" ^fail ( INPUT ) } 004 ^if 00p( $_length == short ) 00T{ $_results = ^extract ( $_url $_idindex +7 ) } 00- else ( 1 ) 00U { $_results = ^extract ( $_url $_idindex +44 ) } 004 ^return ( $_results ) `
^parsespreadsheetjson o 0 0 C( $_rawurl $_sheet $_results $_gsxutterance $_gsxexpectedintent $_gsxt $_docid $_url $_json $_entries $_entriesindex $_entrieslength $_entry $_utterance $_expectedintent ) $_results = ^jsoncreate ( transient object ) $_results.utterances = ^jsoncreate ( transient array ) $_results.expectedIntents = ^jsoncreate ( transient array ) $_results.matchedIntents = ^jsoncreate ( transient object ) $_results.matchedIntents.exact = ^jsoncreate ( transient array ) $_results.matchedIntents.alternates = ^jsoncreate ( transient array ) $_results.id = null $_results.idShort = null $_gsxutterance = ^"gsx\$utterance" $_gsxexpectedintent = ^"gsx\$expectedintent" $_gsxt = ^"\$t" $_docid = ^extractspreadsheetid ( $_rawurl ) $_url = ^"https://spreadsheets.google.com/feeds/list/$_docid/$_sheet/public/values?alt=json" $_json = ^jsonopen ( transient GET $_url "^" "^" ) $_entries = $_json.feed.entry $_entriesindex = 0 $_entrieslength = ^length ( $_entries ) ^if 00s( %httpresponse == 200 ) 04#{ ^loop ( $_entrieslength ) 04s { $_entry = $_entries[$_entriesindex] $_utterance = ^jsonundecodestring ( $_entry.$_gsxUtterance.$_gsxT ) $_expectedintent = ^jsonundecodestring ( $_entry.$_gsxExpectedIntent.$_gsxT ) ^jsonarrayinsert ( $_results.utterances $_utterance ) ^jsonarrayinsert ( $_results.expectedIntents $_expectedintent ) $_entriesindex += 1 } } 019 else ( 1 ) 00^ { ^"Error: The document is not accessible" ^fail ( INPUT ) } 004 ^return ( $_results ) `
^bulkmatchinput o 0 0 B( $_utterances $_results $_utteranceslength $_utterancesindex $_result $_botdata $_utterance $_locatedtask ) $_results = ^jsoncreate ( transient array ) $_utteranceslength = ^length ( $_utterances ) $_utterancesindex = 0 ^loop ( $_utteranceslength ) 09f { $_result = ^jsoncreate ( transient object ) $$alternatearray = null $_botdata = ^getbotobject ( $botname ) ^reset_glean ( ) $$intentmatch = ^jsoncreate ( transient object ) $$intentmatch.results = ^jsoncreate ( transient object ) $$intentmatch.bots = ^jsoncreate ( transient object ) $_utterance = $_utterances[$_utterancesindex] ^analyze ( $_utterance ) ^respond ( ~glean ) $_locatedtask = ^locatematchingtasksfrombot ( $_botdata true 0.6 ) $_result.row = $_utterancesindex + 2 $_result.utterance = $_utterance $_result.exact = $_locatedtask $_result.alternates = $$alternatearray $_result.intentMatch = $$intentmatch ^jsonarrayinsert ( $_results $_result ) $_utterancesindex += 1 } ^reset_glean ( ) ^return ( $_results ) `
^bulkmatchmessage o 0 0 B( $_matches $_matcheslength $_matchesindex $_alloutput $_match $_utterance $_row $_exact $_alternates $_output $_exactlen $_exactname $_activitytype $_alternatename $_alternateslength $_alternatesindex $_comma $_alternate ) $_matcheslength = ^length ( $_matches ) $_matchesindex = 0 $_alloutput = ^"\n" ^loop ( $_matcheslength ) 0p? { $_match = $_matches[$_matchesindex] $_utterance = $_match.utterance $_row = $_match.row $_exact = $_match.exact $_alternates = $_match.alternates $_output = ^"Row $_row '$_utterance' found " $_exactlen = ^length ( $_exact ) ^if 00m( $_exactlen > 0 ) 05B{ $_exactname = ^taskdisplayname ( $_exact[0] ) ^if 00y( $_exact[0].MatchedQuestion ) 00w{ $_activitytype = FAQ } 01b else ( 1 ) 00* { $_activitytype = ^getactivitytype ( $botname $_exactname ) } 004 $_output = ^join ( $_output "^exact match '$_exactname ($_activitytype)'" ) ^if 00m( $_exactlen > 1 ) 00#{ $_output = ^join ( $_output "^ and $_exactlen more" ) } 004 $_output = ^join ( $_output "^. " ) } 012 else ( 1 ) 00Z { $_output = ^join ( $_output "^no exact match. " ) } 004 ^if 00B( ^length ( $_alternates ) == 1 ) 04p{ $_alternatename = ^taskdisplayname ( $_alternates[0].value ) ^if 00J( $_alternates[0].value.MatchedQuestion ) 00w{ $_activitytype = FAQ } 01f else ( 1 ) 00= { $_activitytype = ^getactivitytype ( $botname $_alternatename ) } 004 $_output = ^join ( $_output "^Alternate match '$_alternatename ($_activitytype)'. " ) } 0ak else 00A( ^length ( $_alternates ) > 1 ) 08N{ $_alternates = $_alternates $_alternateslength = ^length ( $_alternates ) $_alternatesindex = 0 $_output = ^join ( $_output "^Alternate matches ($_alternateslength): " ) $_comma = null ^loop ( $_alternateslength ) 05e { $_alternate = $_alternates[$_alternatesindex] $_alternatename = ^taskdisplayname ( $_alternate.value ) ^if 00F( $_alternate.value.MatchedQuestion ) 00w{ $_activitytype = FAQ } 01f else ( 1 ) 00= { $_activitytype = ^getactivitytype ( $botname $_alternatename ) } 004 $_output = ^join ( $_output $_comma "^'$_alternatename ($_activitytype)'" ) $_comma = ^", " $_alternatesindex += 1 } $_output = ^join ( $_output "^." ) } 015 else ( 1 ) 00@ { $_output = ^join ( $_output "^No alternate match." ) } 004 $_alloutput = ^join ( $_alloutput $_output "^\n" ) $_matchesindex += 1 } ^return ( $_alloutput ) `
^getcolumnvalue o 0 0 C( $_object $_type ) ^if 00n( $_type == exact ) 00R{ ^return ( ^taskdisplayname ( $_object ) ) } 01# else 00s( $_type == alternates ) 00X{ ^return ( ^taskdisplayname ( $_object.value ) ) } 00M else ( 1 ) 00w { ^return ( $_object ) } 004 `
^bulkresultsextract o 0 0 C( $_matches $_type $_matcheslength $_matchesindex $_resultarray $_match $_value $_column $_lengthcolumn $_index ) $_matcheslength = ^length ( $_matches ) $_matchesindex = 0 $_resultarray = ^jsoncreate ( transient array ) ^loop ( $_matcheslength ) 06k { $_match = $_matches[$_matchesindex] $_value = null $_column = $_match.$_type $_lengthcolumn = ^length ( $_column ) ^if 00r( $_lengthcolumn == 1 ) 00Y{ $_value = ^getcolumnvalue ( $_column[0] $_type ) } 02L else 00q( $_lengthcolumn > 1 ) 02c{ $_value = ^"|" $_index = 0 ^loop ( $_lengthcolumn ) 01o { $_value = ^join ( $_value ^getcolumnvalue ( $_column[$_index] $_type ) "^|" ) $_index += 1 } } 004 ^jsonarrayinsert ( $_resultarray $_value ) $_matchesindex += 1 } ^return ( $_resultarray ) `
^bulkspreadsheetcsv o 0 0 B( $_columns $_utterances $_expectedintents $_matchedintentsexact $_matchedintentsalternates $_results $_length $_index $_pass $_passstar $_fail $_alt $_health $_utterance $_expectedintent $_matchedintentex $_matchedintentalt $_status $_matchedintentexlen $_exmatch $_matchedintentaltlen $_altmatch $_row $_p $_ps $_a ) $_utterances = $_columns.utterances $_expectedintents = $_columns.expectedIntents $_matchedintentsexact = $_columns.matchedIntents.exact $_matchedintentsalternates = $_columns.matchedIntents.alternates $_results = ^"Utterance,Expected Intent,Matched Exact Intent,Matched Alternates Intent,Status\n" $_length = ^comparepropertieslength ( $_columns ) ^if 00g( $_length ) 0m7{ $_index = 0 $_pass = 0 $_passstar = 0 $_fail = 0 $_alt = 0 $_health = 0 ^loop ( $_length ) 0eS { $_utterance = $_utterances[$_index] $_expectedintent = $_expectedintents[$_index] $_matchedintentex = $_matchedintentsexact[$_index] $_matchedintentalt = $_matchedintentsalternates[$_index] $_status = ^"FAIL" @0 = ^burst ( $_matchedintentex "^|" ) $_matchedintentexlen = ^length ( @0 ) ^loop ( @0 ) 03u { $_exmatch = ^first ( @0subject ) ^if 00~( ^findtext ( $_expectedintent $_exmatch 0 insensitive ) ) 01+{ ^if 00w( $_matchedintentexlen > 1 ) 00L{ $_status = ^"PASS*" $_passstar += 1 } 00W else ( 1 ) 00G { $_status = ^"PASS" $_pass += 1 } 004 } 004 } ^if 00o( $_status == FAIL ) 04X{ @0 = ^burst ( $_matchedintentalt "^|" ) $_matchedintentaltlen = ^length ( @0 ) ^loop ( @0 ) 03v { $_altmatch = ^first ( @0subject ) ^if 00!( ^findtext ( $_expectedintent $_altmatch 0 insensitive ) ) 01-{ ^if 00x( $_matchedintentaltlen = 1 ) 00L{ $_status = ^"PASS*" $_passstar += 1 } 00U else ( 1 ) 00E { $_status = ^"ALT" $_alt += 1 } 004 } 004 } } 004 $_row = ^"\"$_utterance\",\"$_expectedintent\",\"$_matchedintentex\",\"$_matchedintentalt\",$_status\n" $_results = ^join ( $_results $_row ) $_index += 1 } $_fail = $_length - $_pass - $_passstar - $_alt $_p = $_pass * 1 $_ps = $_passstar * 0.5 $_a = $_alt * 0.25 $_health = $_p + $_ps + $_a / $_length * 100 ^if 00i( $_passstar ) 00+{ $_pass = $_pass + $_passstar $_pass = ^"$_pass($_passstar\*)" } 004 $_row = ^",,,,,\n" $_row = ^join ( $_row "^Total,Pass,Alt,Fail,Health,\n" ) $_row = ^join ( $_row "^$_length,$_pass,$_alt,$_fail,$_health\%" ) $_results = ^join ( $_results $_row ) ^return ( $_results ) } 01d else ( 1 ) 00- { ^fail ( CALL ) ^"Error: your columns are of different sizes" } 004 `
^toggle_mute o 0 0 B( ^status $_root $_payload $_topicid $_url $_response ) $_root = ^jsoncreate ( object ) ^if 00k( ^0 == "mute" ) 00~{ ^insertjsontypedvalue ( $_root mute true boolean ) } 014 else ( 1 ) 00! { ^insertjsontypedvalue ( $_root mute false boolean ) } 004 ^insertjsontypedvalue ( $_root streamId $botinfo.botid string ) $_payload = ^jsonwrite ( $_root ) $_topicid = ^get_streaminfo_for_bot ( $botinfo.botid ) $_url = ^"$protocol://$server/users/$userid/workflows/$_topicid/settings?rnd=6sr6je" $_response = ^invoke_json ( transient put $_url $_payload "^to mute or unmute" toggle_mute ) $$tmpmsg = ^messagemap ( "^Done for <bot-name>" "^Done." ) ^sendstatementsummary ( $$tmpmsg ) $$tmpmsg `
^get_active_instance_ids o 0 0 A( $$instanceids $$url $$response $$limit $$current $$tmpval $_topicid $_url $_response $_limit $_current $_instanceids $_tmpval ) $_topicid = ^get_streaminfo_for_bot ( $botinfo.botid ) $_url = ^"$protocol://$server/users/$userid/workflows/$_topicid/workflowstats" $_response = ^invoke_json ( transient get $_url null "^get_active_instance_ids" get_active_instance_ids ) $_response = $_response[0].alerts $_limit = ^length ( $_response ) $_current = 0 $_instanceids = ^jsoncreate ( array ) ^loop ( $_limit ) 01% { $_tmpval = ^jsonpath ( "[$_current].instanceId" $_response ) ^insertjsontypedvalue ( $_instanceids . $_tmpval string ) $_current += 1 } ^return ( $_instanceids ) `
^get_active_instances o 0 0 A( $_topicid $_url $_response ) $_topicid = ^get_streaminfo_for_bot ( $botinfo.botid ) $_url = ^"$protocol://$server/users/$userid/workflows/$_topicid/workflowstats" $$invisible = true $_response = ^invoke_json ( permanent get $_url null "^get_active_instances" get_active_instances ) $$invisible = null $_response = $_response[0].alerts ^return ( $_response ) `
^refresh_alerts o 0 0 A( $_root $_payload $_url $_response ) $$instanceids = ^get_active_instance_ids ( ) $_root = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_root instanceIds $$instanceids string ) ^insertjsontypedvalue ( $_root delay 0 number ) $_payload = ^jsonwrite ( $_root ) $_url = ^"$protocol://$server/users/$userid/alertInstances/trigger" $_response = ^invoke_json ( transient post $_url $_payload "^to Refresh all tasks" refresh_alerts ) $$tmpmsg = ^messagemap ( "^Done refreshing tasks I will notify you soon <bot-name>" "^Done refreshing tasks\n I will notify you soon" ) ^sendstatementsummary ( $$tmpmsg ) $$tmpmsg ^end ( TOPIC ) `
^clear_history o 0 0 A( $_topicid $_url $_response ) $_topicid = ^get_streaminfo_for_bot ( $botinfo.botid ) $_url = ^"$protocol://$server/users/$userid/workflows/$_topicid/clearhistory" $_response = ^invoke_json ( transient put $_url "^{}" "^clear_history" clear_history ) ^end ( INPUT ) `
^delete_bot o 0 0 A( $_topicid $_url $_response ) $$count = ^length ( $installedbots ) $$count -=1 ^loop ( -1 ) 02? { ^if 00j( $$count < 0 ) 00-{ ^reuse ( ~generic_bot.cancel_current_request ) ^end ( LOOP ) } 004 $$cbot = ^jsonpath ( [ $$count ] $installedbots ) ^if 00q( $$cbot == $botname ) 00p{ ^end ( LOOP ) } 004 $$count -= 1 } $_topicid = ^get_streaminfo_for_bot ( $botinfo.botid ) $_url = ^"$protocol://$server/users/$userid/workflows/$_topicid?forceDelete=true" $_response = ^invoke_json ( transient delete $_url null "^delete bot" delete_bot ) $$tmpmsg = ^messagemap ( "^<bot-name> was deleted from your bot collection" "^<bot-name> was deleted from your bot collection" ) ^sendstatementsummary ( $$tmpmsg ) $$tmpmsg ^if 01g( $installedbots and ^query ( exact_so $installedbots ? $botname ) and ^delete ( @0 ) ) 00b{ } 004 ^end ( INPUT ) `
^get_active_accounts o 0 0 A( $_url $_array ) $_url = ^"$protocol://$server/users/$userid/stream/$botinfo.botid/wfaccounts" $$invisible = true $_array = ^invoke_json ( permanent get $_url null "^get_active_accounts" get_active_accounts ) ^if 00d( $$msg ) 00q{ $_array = null } 004 $$invisible = null ^return ( $_array ) `
^rename_account o 0 0 D( ^old_name ^acc_id ^new_name $_root $_data $_url $_tmp ) $_root = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_root name ^2 string ) $_data = ^jsonwrite ( $_root ) $_url = ^"$protocol://$server/users/$userid/wfaccounts/^1" $_tmp = ^invoke_json ( transient put $_url $_data "^rename_account" rename_account ) $$oldname = ^0 $$newname = ^2 $$tmpmsg = ^messagemap ( "^Your account <old-name> was renamed to <new-name>" "^Your account \"$$oldname\" was renamed to \"$$newname\"" ) ^sendstatementsummary ( $$tmpmsg ) $$tmpmsg `
^delete_account o 0 0 C( ^accountname ^accountid $_url $_tmp ) $_url = ^"$protocol://$server/users/$userid/wfaccounts/^1" $_tmp = ^invoke_json ( transient delete $_url { } "^delete_account" delete_account ) $$accountname = ^0 $$tmpmsg = ^messagemap ( "^Your account <account-name> was Deleted" "^Your account \"$$accountname\" was Deleted" ) ^sendstatementsummary ( $$tmpmsg ) $$tmpmsg `
^delete_alert o 0 0 D( ^alertid ^alertname ^order_id $_root $_data $_url $_tmp ) $_root = ^jsoncreate ( object ) ^insertjsontypedvalue ( $_root userId $userid string ) $_data = ^jsonwrite ( $_root ) $_url = ^"$protocol://$server/market/orders/^2/instances/^0" $_tmp = ^invoke_json ( transient delete $_url $_data "^delete_alert" delete_alert ) $$alertname = ^1 $$tmpmsg = ^messagemap ( "^Your alert named <alert-name> was Deleted" "^Your alert named \"$$alertname\" was Deleted" ) ^sendstatementsummary ( $$tmpmsg ) $$tmpmsg `
^scanusageindirection o 0 0 F( ^sentenceindex ^startindex ^endindex ^direction ^usage $_sentenceindex $_wordindex $_key $_used ) $_sentenceindex = ^0 ^if 00l( ^3 == forward ) 00s{ $_wordindex = ^1 } 00I else ( 1 ) 00s { $_wordindex = ^2 } 004 ^loop ( -1 ) 05x { $_key = ^join ( $_sentenceindex - $_wordindex ) $_used = $gleaninfo.usedup.$_key ^if 00t( ^4 == true and $_used ) 00p{ ^end ( loop ) } 00$ else 00w( ^4 == false and ! $_used ) 00p{ ^end ( loop ) } 004 ^if 00l( ^3 == forward ) 016{ $_wordindex += 1 ^if 00o( $_wordindex > ^2 ) 00p{ ^end ( loop ) } 004 } 01m else ( 1 ) 016 { $_wordindex -= 1 ^if 00o( $_wordindex < ^1 ) 00p{ ^end ( loop ) } 004 } 004 } ^return ( $_wordindex ) `
^findpatternindirection o 0 0 D( ^pattern ^start ^direction $_pattern $_prefix $_result $_return ) $_pattern = ^0 ^if 00m( ^2 == backward ) 00M{ $_prefix = ^join ( \@ _ 10 - " * " ) } 00@ else ( 1 ) 00M { $_prefix = ^join ( \@ _ 10 + " * " ) } 004 $_pattern = ^join ( $_prefix $_pattern ) ^setposition ( _10 ^1 ^1 ) $_result = ^result ( ^match ( $_pattern ) ) ^if 00A( $_result == NOPROBLEM and _0 ) 028{ ^if 00m( ^2 == backward ) 00H{ $_return = ^position ( END _0 ) } 00Z else ( 1 ) 00J { $_return = ^position ( START _0 ) } 004 ^return ( $_return ) } 00I else ( 1 ) 00s { ^return ( null ) } 004 `
^maskpattern o 0 0 B( ^pattern $_pattern $_result ) $_pattern = ^0 ^loop ( -1 ) 027 { $_result = ^result ( ^match ( $_pattern ) ) ^if 00A( $_result == NOPROBLEM and _0 ) 00s{ ^unmark ( * _0 ) } 00F else ( 1 ) 00p { ^end ( loop ) } 004 } `
^cleaninput o 0 0 B( ^direction ) ^if 00l( ^0 == forward ) 014{ ^maskpattern ( "< ^fieldafter()" ) ^maskpattern ( "< _~aftername" ) } 01E else 00m( ^0 == backward ) 019{ ^maskpattern ( "< _(~beforewords ) " ) ^maskpattern ( "_~beforename >" ) } 004 ^maskpattern ( "<_~softseparator _0!=a" ) ^maskpattern ( "_~softseparator > _0!=a" ) ^maskpattern ( "_~preposition > _0!=versus" ) `
^isfielddependent o 0 0 B( ^fieldobj $_fieldobj $_dependson $_len $_count $_dependent $_value ) $_fieldobj = ^0 $_dependson = $_fieldobj.dependsOn $_len = ^length ( $_dependson ) $_count = 0 ^loop ( $_len ) 02m { $_dependent = $_dependson[$_count] $_value = $taskinfo.fieldkeys.$_dependent ^if 00G( ! $_value or $_value == $k-novalue ) 00s{ ^return ( true ) } 004 $_count += 1 } ^return ( null ) `
^getfieldpatterns o 0 0 B( ^fieldname $_concept $_botobject $_taskarray $_length1 $_taskcount $_taskobj $_taskname $_fieldarray $_length2 $_fieldcount $_fieldobj $_fieldname $_patternarray ) ^if 00q( $taskinfo.dialogId ) 03h{ ^if 00n( $taskinfo.field ) 00R{ ^return ( $taskinfo.field.fieldPatterns ) } 004 $_concept = ^join ( ~ bot- $taskinfo.botname - task- $taskinfo.currentintendedaction - field - ^0 ) @10 = ^query ( exact_sv $_concept fieldpattern ? ) } 004 $_botobject = ^getbotdatabyname ( $botinfo.botname ) $_taskarray = ^getlistofdialogsandactionsforbot ( $_botobject ) $_length1 = ^length ( $_taskarray ) $_taskcount = 0 ^loop ( $_length1 ) 08I { $_taskobj = $_taskarray[$_taskcount] ^if 00j( ! $_taskobj ) 00p{ ^end ( loop ) } 004 $_taskname = $_taskobj.name ^if 00R( $_taskname == $taskinfo.currentintendedaction ) 05={ $_fieldarray = $_taskobj.fields $_length2 = ^length ( $_fieldarray ) $_fieldcount = 0 ^loop ( $_length2 ) 04w { $_fieldobj = $_fieldarray[$_fieldcount] ^if 00k( ! $_fieldobj ) 00p{ ^end ( loop ) } 004 $_fieldname = $_fieldobj.title ^if 00p( $_fieldname == ^0 ) 027{ $_patternarray = $_fieldobj.fieldPatterns ^if 00m( $_patternarray ) 00C{ ^return ( $_patternarray ) } 00I else ( 1 ) 00s { ^return ( null ) } 004 } 004 $_fieldcount += 1 } } 004 $_taskcount += 1 } ^return ( null ) `
^filterarraybyvalue o 0 0 C( ^array ^value $_value $_array $_length $_counter $_choice $_index ) $_value = ^1 $_array = ^0 $_length = ^length ( $_array ) $_counter = $_length ^if 00l( $_counter > 0 ) 040{ ^loop ( $_length ) 03J { $_counter -= 1 $_choice = $_array[$_counter].title ^if 00i( ! $_choice ) 00p{ ^end ( loop ) } 004 ^nofail ( RULE $_index = null $_index = ^findtext ( $_choice $_value 0 insensitive ) ) ^if 00h( ! $_index ) 00U{ ^jsonarraydelete ( index $_array $_counter ) } 004 } } 004 `
^getkindoffield o 0 0 B( ^fieldref $_field $_kind $_type $_metadata $_wu $_here ) $_field = ^0 $_kind = $_field.fieldType $_type = $_field.type $_metadata = $_field.metadata ^if 00L( $_kind == textbox or $_kind == textarea ) 0ar{ ^if 00A( $_metadata == "Phone Number" ) 00y{ $_kind = csphonenumber } 09l else 00y( $_metadata == "Percentage" ) 00s{ $_kind = percent } 08t else 00O( $_type == number or $_metadata == "Number" ) 00t{ $_kind = csnumber } 07k else 00w( $_metadata == "Currency" ) 00v{ $_kind = cscurrency } 06r else 00B( $_metadata == "Email Address" ) 00q{ $_kind = email } 05y else 00z( $_metadata == "Person Name" ) 00w{ $_kind = cshumanname } 04B else 00U( $_metadata == "Company name / Organisation name" ) 00u{ $_kind = cscompany } 03l else 00t( $_metadata == "@name" ) 00y{ $_kind = cstwittername } 02s else 00w( $_metadata == "Timezone" ) 00t{ $_kind = timezone } 01B else 00y( $_metadata == "attachment" ) 00p{ $_kind = file } 00M else ( 1 ) 00w { $_kind = description } 004 } 05Q else 00s( $_kind == nestedForm ) 00w{ $_kind = nestedArray } 04~ else 00m( $_kind == date ) 01r{ ^if 00U( $_metadata == from-date or $_metadata == to-date ) 00v{ $_kind = dateperiod } 004 } 038 else 00q( $_kind == location ) 02M{ $_wu = "Weather Underground" $_here = "Here" ^if 01t( $botinfo.botname == $_wu or $botinfo.botname == $_here or $_metadata == "City with co-ordinates" ) 00y{ $_kind = coordlocation } 004 } 004 ^return ( $_kind ) `
^getkindtype o 0 0 B( ^kind $_tmp ) ^nofail ( RULE $_tmp = ^wordinconcept ( ^0 ~fp_formattedkind ) ) ^if 00d( $_tmp ) 00x{ ^return ( formatted ) } 004 ^nofail ( RULE $_tmp = ^wordinconcept ( ^0 ~fp_dropdowns ) ) ^if 00d( $_tmp ) 00x{ ^return ( dropdowns ) } 004 ^nofail ( RULE $_tmp = ^wordinconcept ( ^0 ~fp_typeaheads ) ) ^if 00d( $_tmp ) 00y{ ^return ( typeaheads ) } 004 ^nofail ( RULE $_tmp = ^wordinconcept ( ^0 ~fp_descriptions ) ) ^if 00d( $_tmp ) 00A{ ^return ( descriptions ) } 004 ^return ( null ) `
^addvaluetoarray o 0 0 E( ^returnarray ^title ^value ^type $_object $_item ) $_object = ^jsoncreate ( PERMANENT object ) ^insertjsontypedvalue ( $_object title ^1 string ) $_item = ^2 ^if 00Q( ^3 == object and ^istransientjson ( $_item ) ) 00F{ ^makejsonpermanent ( $_item ) } 004 ^insertjsontypedvalue ( $_object value $_item ^3 ) ^jsonarrayinsert ( permanent ^0 $_object ) `
^get_whole o 0 0 A( ) ^nofail ( RULE ^match ( "_*" ) ) ^return ( _0 ) `
^get_number o 0 0 A( ) ^nofail ( RULE ^match ( "_~number" ) ) ^return ( _0 ) `
^get_percent o 0 0 A( $_value $_originval $_last $_start $_end ) ^nofail ( RULE ^match ( "_~number _{ [ % ~percentwords ] }" ) ) $_value = _0 $_originval = ^original ( _0 ) $_last = ^extract ( $_originval -1 +1 ) ^if 00j( $_last != % ) 00q{ $_value /= 100 } 004 ^if 00a( _1 ) 01w{ $_start = ^position ( START _0 ) $_end = ^position ( END _1 ) ^setposition ( _0 $_start $_end ) } 004 ^return ( $_value ) `
^get_url o 0 0 A( ) ^nofail ( RULE ^match ( "_~web_url" ) ) ^return ( _0 ) `
^get_email o 0 0 A( ) ^nofail ( RULE ^match ( "_~email_url" ) ) ^return ( _0 ) `
^get_twittername o 0 0 A( ) ^nofail ( RULE ^match ( "_~twitter_name" ) ) ^return ( ^original ( _0 ) ) `
^get_color o 0 0 A( ) ^nofail ( RULE ^match ( "_~colors" ) ) ^return ( ^original ( _0 ) ) `
^get_zipcode o 0 0 A( ) ^nofail ( RULE ^match ( "_(_~number {-} _{~number} )" ) ) ^if 00K( _1 == null or _1 < 10000 or _1 > 99999 ) 00s{ ^return ( null ) } 004 ^if 00i( _2 != null ) 00+{ ^if 00u( _2 < 1000 or _2 > 9999 ) 00s{ ^return ( null ) } 004 } 004 ^return ( ^original ( _0 ) ) `
^get_phonenumber o 0 0 A( $_result ) $_result = ^result ( ^respond ( ~read_phonenumber ) ) ^if 00t( $_result == NOPROBLEM ) 010{ ^setposition ( _0 $$phonestart $$phoneend ) ^return ( $$phone ) } 00I else ( 1 ) 00s { ^return ( null ) } 004 `
^get_personname o 0 0 A( $_result ) $_result = ^result ( ^respond ( ~read_personname ) ) ^if 00t( $_result == NOPROBLEM ) 00A{ ^return ( $$personname ) } 00I else ( 1 ) 00s { ^return ( null ) } 004 `
^get_file o 0 0 A( ) ^return ( $taskinfo.attachments ) `
^get_coordlocation o 0 0 A( $_return $_location $_locations $_length $_count $_title $_returnvalue ) $_return = null $_location = ^get_location ( ) _10 = _0 $_locations = ^get_coordinates ( $_location ) $_length = ^length ( $_locations ) ^if 00l( $_length == 1 ) 02%{ $_location = $_locations[0] $_return = ^jsonparse ( permanent ^' { title: "$_location.formatted_address", value: { latitude : $_location.location.latitude, longitude : $_location.location.longitude } } ' ) } 065 else 00k( $_length > 1 ) 05P{ $$valuearray = ^jsoncreate ( permanent array ) $_count = 0 ^loop ( $_length ) 04B { $_location = $_locations[$_count] ^if 00k( ! $_location ) 00p{ ^end ( loop ) } 004 $_title = $_location.formatted_address $_returnvalue = ^jsonparse ( permanent ^'{ latitude : $_location.location.latitude, longitude : $_location.location.longitude }' ) ^addvaluetoarray ( $$valuearray $_title $_returnvalue object ) $_count += 1 } } 004 _0 = _10 ^return ( $_return ) `
^getregexvalue o 0 0 D( $_pattern $_sentenceindex $_isarray $$regex $$sentence $$fieldvalue $$numwords $_json $_matches $_numitems $_index $_return $_offset $_gleanvalue $_valueposition $_valueobject ) $$regex = $_pattern $$sentence = $gleaninfo.sentences[$_sentenceindex] $_json = ^jsregex ( $$regex $$sentence ) ^if 00g( ! $_json ) 00s{ ^return ( null ) } 004 ^logif ( $tracefields "^Found by regex $$regex : $_json \n" ) $_matches = ^jsonparse ( transient $_json ) $_numitems = ^length ( $_matches ) ^if 00j( ! $_isarray ) 00q{ $_numitems = 1 } 004 $_index = 0 $_return = ^jsoncreate ( PERMANENT array ) $taskinfo.field.gleanvalueArray = $_return $_offset = 0 ^loop ( $_numitems ) 0aK { $$fieldvalue = $_matches[$_index] $$numwords = ^burst ( count $$fieldvalue ) $_index += 1 _0 = null ^if 00K( ^match ( "^respond(~originalvalues)" ) ) 06w{ ^setposition ( _10 $$csmatch_start $$csmatch_end ) $value_start = ^position ( START _0 ) $value_end = ^position ( END _0 ) $_gleanvalue = ^original ( _0 ) $taskinfo.field.gleanvalue = $_gleanvalue $_valueposition = ^getpositionfromsentenceandrange ( $_sentenceindex $value_start $value_end ) $_valueobject = ^jsonparse ( permanent ^'{ position: "$_valueposition" }' ) $_valueobject.value = $_gleanvalue ^jsonarrayinsert ( PERMANENT $_return $_valueobject ) ^end ( LOOP ) } 02a else 00K( $tracefields and $_index >= $_numitems ) 01u{ ^nofail ( RULE ^match ( "_*" ) ) ^log ( Cannot find $_pattern in '_0 or ^original ( _0 ) \n ) } 004 } ^logif ( $tracefields "^regex:  ^jsontree($taskinfo.field.gleanvalueArray) \n" ) ^return ( $_gleanvalue ) `
^formatvaluearray o 0 0 C( ^kind ^value $_type ) ^if 00m( ! $$valuearray ) 03x{ ^if 00a( ^1 ) 038{ ^if 00m( ^0 == csnumber ) 00r{ $_type = number } 00~ else 00q( ! ^jsonkind ( ^1 ) ) 00r{ $_type = string } 004 $$valuearray = ^jsoncreate ( permanent array ) ^nofail ( RULE ^addvaluetoarray ( $$valuearray ^0 ^1 $_type ) ) } 004 } 00r else ( 1 ) 00b { } 004 `
^ambiguousdatearray o 0 0 C( $_format $_time $_0 $_1 $_2 $_dateformat $_datevalue $_datetitle ) $_0 = $ambiguousdateinfo.val0 $_1 = $ambiguousdateinfo.val1 $_2 = $ambiguousdateinfo.val2 $$ambiguous_dates = ^jsoncreate ( array ) $_dateformat = 1 ^loop ( 4 ) 04E { ^if 00B( $ambiguitymask & $_dateformat ) 03M{ ^setformatdate ( $_dateformat $_0 $_1 $_2 ) $_datevalue = ^format_date ( $_format $$date $$month $$year ) $_datetitle = ^datetotext ( $_format $_datevalue ) $_datevalue = ^"$_datevalue$_time" ^addvaluetoarray ( $$ambiguous_dates $_datetitle $_datevalue string ) } 004 $_dateformat *= 2 } ^return ( $$ambiguous_dates ) `
^setdateformatbychoise o 0 0 C( $_format $_choice $_0 $_1 $_2 $_dateformat $_datevalue $_datetitle ) $_0 = $ambiguousdateinfo.val0 $_1 = $ambiguousdateinfo.val1 $_2 = $ambiguousdateinfo.val2 $_dateformat = 1 ^loop ( 4 ) 04q { ^if 00B( $ambiguitymask & $_dateformat ) 03y{ ^setformatdate ( $_dateformat $_0 $_1 $_2 ) $_datevalue = ^format_date ( $_format $$date $$month $$year ) $_datetitle = ^datetotext ( $_format $_datevalue ) ^if 00v( $_datetitle == $_choice ) 00U{ $userdateformat = $_dateformat ^end ( call ) } 004 } 004 $_dateformat *= 2 } `
^getformattedkindvalue o 0 0 B( ^kind $_value $_format $_dateformat $_isarray $_regex ) $_value = null ^nofail ( RULE ^match ( "_*" ) ) ^if 00a( _0 ) 0uv{ ^if 00m( ^0 == csnumber ) 00B{ $_value = ^get_number ( ) } 0tA else 00o( ^0 == cscurrency ) 00D{ $_value = ^get_currency ( ) } 0sH else 00m( ^0 == datetime ) 05C{ $_value = ^get_date_time ( ) ^if 00z( $$ambiguity_in_date == true ) 013{ $$valuearray = ^ambiguousdatearray ( yyyy-MM-dd $$formatted_time ) } 004 ^if 00f( $_value ) 03c{ $_format = $taskinfo.field.format ^if 00q( $utcoffset == null ) 00v{ $utcoffset = +05:30 } 004 ^if 00G( $_format == "yyyy-MM-ddTHH:mm:ssZ" ) 01a{ ^nofail ( RULE $_value = ^substitute ( character $_value Z $utcoffset ) ) } 004 } 004 } 0mR else 00i( ^0 == date ) 03v{ $_dateformat = $taskinfo.field.format ^if 00m( ! $_dateformat ) 00B{ $_dateformat = yyyy-MM-dd } 004 $_value = ^get_date ( $_dateformat ) ^if 00z( $$ambiguity_in_date == true ) 00^{ $$valuearray = ^ambiguousdatearray ( $_dateformat null ) } 004 } 0i= else 00o( ^0 == dateperiod ) 01h{ $_dateformat = $taskinfo.field.format $_value = ^get_dateperiod ( $_dateformat ) } 0hs else 00j( ^0 == regex ) 03a{ ^if 00-( $taskinfo.field.isArray == true or $taskinfo.field.type == array ) 00p{ $_isarray = 1 } 004 $_regex = ^jsonundecodestring ( $taskinfo.field.format ) $_value = ^getregexvalue ( $_regex $currentsentenceid $_isarray ) } 0d& else 00i( ^0 == time ) 00z{ $_value = ^get_time ( ) } 0db else 00r( ^0 == csphonenumber ) 00G{ $_value = ^get_phonenumber ( ) } 0cc else 00h( ^0 == url ) 00y{ $_value = ^get_url ( ) } 0bv else 00j( ^0 == email ) 00A{ $_value = ^get_email ( ) } 0aK else 00m( ^0 == location ) 00D{ $_value = ^get_location ( ) } 09T else 00i( ^0 == city ) 00D{ $_value = ^get_location ( ) } 08^ else 00r( ^0 == coordlocation ) 00I{ $_value = ^get_coordlocation ( ) } 07% else 00p( ^0 == cshumanname ) 00F{ $_value = ^get_personname ( ) } 06? else 00j( ^0 == color ) 00A{ $_value = ^get_color ( ) } 06b else 00l( ^0 == zipcode ) 00C{ $_value = ^get_zipcode ( ) } 05m else 00n( ^0 == cscompany ) 00C{ $_value = ^get_company ( ) } 04v else 00r( ^0 == cstwittername ) 00G{ $_value = ^get_twittername ( ) } 03w else 00m( ^0 == timezone ) 00E{ $_value = ^get_time_zone ( ) } 02E else 00i( ^0 == file ) 00z{ $_value = ^get_file ( ) } 01V else 00l( ^0 == percent ) 00C{ $_value = ^get_percent ( ) } 00^ else 00l( ^0 == address ) 00C{ $_value = ^get_address ( ) } 004 } 004 ^return ( $_value ) `
^fieldnamearraytest o 0 0 C( $_avalue $_ivalue $_fieldname $_index ) $_fieldname = $taskinfo.field.title ^if 00v( $_fieldname == $_ivalue ) 00p{ ^return ( 1 ) } 004 ^nofail ( RULE $_index = null $_index = ^findtext ( $_avalue $_fieldname 0 insensitive ) ) ^if 00f( $_index ) 01+{ ^nofail ( RULE $_index = null $_index = ^findtext ( $_ivalue $_fieldname 0 insensitive ) ) ^if 00h( ! $_index ) 00p{ ^return ( 1 ) } 004 } 004 ^return ( null ) `
^matchdirectarrayvalue o 0 0 E( ^array ^base ^titlekey ^valuekey $_sample $_array $_titlekey $_value $_length $_samplelength $_space $_counter $_choice $_index $_letter $_len $_num $_end $_beg $_offset $_range ) $_sample = ^1 $_array = ^0 $_titlekey = ^2 ^if 00k( ! $_titlekey ) 00w{ $_titlekey = "title" } 004 $_value = null $$valuearray = null $_length = ^length ( $_array ) $_samplelength = ^length ( $_sample ) $_space = ^" " ^if 00f( $_array ) 0e@{ $_counter = 0 ^loop ( $_length ) 0ek { $_choice = ^jsonpath ( $_titlekey $_array[$_counter] ) ^if 00i( ! $_choice ) 00p{ ^end ( loop ) } 004 ^nofail ( RULE $_index = null $_index = ^findtext ( $_sample $_choice 0 insensitive ) ) ^if 00I( $_index and $_index < $_samplelength ) 01B{ $_letter = ^extract ( $_sample $_index +1 ) ^if 00r( $_letter != $_space ) 00q{ $_index = null } 004 } 004 ^if 00f( $_index ) 093{ $_len = ^length ( $_choice ) $_num = ^getwordcount ( $_choice $_len ) $_end = ^getwordcount ( $_sample $_index ) $_beg = $_end - $_num $_beg += 1 $_offset = ^position ( START _10 ) $_offset = ^originalinputrange ( $_offset $_offset ) $_offset = $_offset >> 8 $_offset -= 1 $_beg += $_offset $_end += $_offset $_range = ^actualinputrange ( $_beg $_end ) $_beg = $_range >> 8 $_end = $_range % 256 ^if 00l( $_end < $_beg ) 00p{ $_end = $_beg } 004 ^setposition ( _10 $_beg $_end ) $_value = $_array[$_counter] ^if 00m( ! $$valuearray ) 00W{ $$valuearray = ^jsoncreate ( permanent array ) } 004 ^nofail ( RULE ^addvaluetoarray ( $$valuearray dropdown $_value object ) ) } 004 $_counter += 1 } } 004 ^if 00k( $$valuearray ) 01^{ $_length = ^length ( $$valuearray ) ^if 00l( $_length == 1 ) 00v{ ^return ( $_value ) } 00I else ( 1 ) 00s { ^return ( null ) } 004 } 004 ^return ( null ) `
^matchreversearrayvalue o 0 0 E( ^array ^base ^titlekey ^valuekey $_sample $_array $_titlekey $_value $_length $_samplelength $_space $_counter $_choice $_namearraytest $_index $_choicelength $_letter ) $_sample = ^1 $_array = ^0 $_titlekey = ^2 ^if 00k( ! $_titlekey ) 00w{ $_titlekey = "title" } 004 $_value = null $$valuearray = null $_length = ^length ( $_array ) $_samplelength = ^length ( $_sample ) $_space = ^" " ^if 00f( $_array ) 0aP{ $_counter = 0 ^loop ( $_length ) 0a7 { $_choice = ^jsonpath ( $_titlekey $_array[$_counter] ) ^if 00i( ! $_choice ) 00p{ ^end ( loop ) } 004 $_namearraytest = ^fieldnamearraytest ( $_choice $_sample ) ^if 00n( $_namearraytest ) 00F{ $_counter += 1 ^next ( loop ) } 004 ^nofail ( RULE $_index = null $_index = ^findtext ( $_choice $_sample 0 insensitive ) ) $_choicelength = ^length ( $_choice ) ^if 00I( $_index and $_index < $_choicelength ) 01B{ $_letter = ^extract ( $_choice $_index +1 ) ^if 00r( $_letter != $_space ) 00q{ $_index = null } 004 } 004 ^if 00f( $_index ) 02N{ $_value = $_array[$_counter] ^if 00m( ! $$valuearray ) 00W{ $$valuearray = ^jsoncreate ( permanent array ) } 004 ^nofail ( RULE ^addvaluetoarray ( $$valuearray dropdown $_value object ) ) } 004 $_counter += 1 } } 004 ^if 00k( $$valuearray ) 01^{ $_length = ^length ( $$valuearray ) ^if 00l( $_length == 1 ) 00v{ ^return ( $_value ) } 00I else ( 1 ) 00s { ^return ( null ) } 004 } 004 ^return ( null ) `
^matchfuzzyarrayvalue o 0 0 E( ^array ^base ^titlekey ^valuekey $_sample $_array $_titlekey $_value $_length $_samplelength $_space $_counter $_max $_bestchoice $_ambiguity $_choice $_namearraytest $_match $_offset $_wordcounter $_word $_index $_start $_end $_beststart $_bestend $_beg $_range ) $_sample = ^1 $_array = ^0 $_titlekey = ^2 ^if 00k( ! $_titlekey ) 00w{ $_titlekey = "title" } 004 $_value = null $$valuearray = null $_length = ^length ( $_array ) $_samplelength = ^length ( $_sample ) $_space = ^" " ^if 00f( $_array ) 0kZ{ $_counter = 0 $_max = 0 $_bestchoice = null $_ambiguity = null ^loop ( $_length ) 0a~ { $_choice = ^jsonpath ( $_titlekey $_array[$_counter] ) ^if 00i( ! $_choice ) 00p{ ^end ( loop ) } 004 $_namearraytest = ^fieldnamearraytest ( $_choice $_sample ) ^if 00n( $_namearraytest ) 00F{ $_counter += 1 ^next ( loop ) } 004 @1 = ^burst ( $_choice ) $_match = 0 $_offset = 0 $_wordcounter = 0 ^loop ( -1 ) 03$ { $_word = ^first ( @1subject ) $_wordcounter += 1 ^nofail ( RULE $_index = null $_index = ^findtext ( $_sample $_word $_offset insensitive ) ) ^if 00f( $_index ) 01L{ $_match += 1 ^if 00l( $_offset == 0 ) 00C{ $_start = $$findtext_start } 004 $_end = $_index $_offset = $_index } 004 } $_match = $_match / $_wordcounter ^if 00j( $_match > 0 ) 01T{ ^if 00n( $_match > $_max ) 01h{ $_max = $_match $_bestchoice = $_counter $_beststart = $_start $_bestend = $_end } 004 } 004 $_counter += 1 } ^if 00T( $_bestchoice and ! $_ambiguity and $_max > 0.33 ) 07-{ $_beg = ^getwordcount ( $_sample $_beststart ) $_end = ^getwordcount ( $_sample $_bestend ) $_offset = ^position ( START _10 ) $_offset = ^originalinputrange ( $_offset $_offset ) $_offset = $_offset >> 8 $_offset -= 1 $_beg += $_offset $_end += $_offset $_range = ^actualinputrange ( $_beg $_end ) $_beg = $_range >> 8 $_end = $_range % 256 ^setposition ( _10 $_beg $_end ) $_value = $_array[$_bestchoice] ^if 00m( ! $$valuearray ) 00W{ $$valuearray = ^jsoncreate ( permanent array ) } 004 ^nofail ( RULE ^addvaluetoarray ( $$valuearray dropdown $_value object ) ) ^return ( $_value ) } 004 } 004 ^return ( null ) `
^getcontextvalues o 0 0 B( $_variable $_response $_values ) $_response = ^getvalueforkeyfromcontext ( $taskinfo.contextJson.botid $taskinfo.contextIdOnServer $_variable PERMANENT ) $_response = ^note_permanent_facts ( $_response ) $_values = $_response.$_variable ^return ( $_values ) `
^matchalphabetchoice o 0 0 E( ^array ^value ^titlekey ^valuekey $_values $_titlekey $_valuekey $_tmpchoices $_answer ) $_values = ^0 $_titlekey = ^2 ^if 00k( ! $_titlekey ) 00w{ $_titlekey = "title" } 004 $_valuekey = ^3 $_tmpchoices = ^generate_choice ( $_values $_titlekey null $_valuekey ) $_answer = ^respondchoiceforalphainput ( ) ^if 00m( ! $$valuearray ) 00W{ $$valuearray = ^jsoncreate ( permanent array ) } 004 ^nofail ( RULE ^addvaluetoarray ( $$valuearray dropdown $_answer object ) ) ^return ( $_answer ) `
^get_arrayvalue o 0 0 E( ^array ^value ^titlekey ^valuekey $_return ) $_return = null $$valuearray = null $_return = ^matchalphabetchoice ( ^0 ^1 ^2 ^3 ) ^if 00i( ! $_return ) 00Z{ $_return = ^matchdirectarrayvalue ( ^0 ^1 ^2 ^3 ) } 004 ^if 00B( ! $_return and ! $$valuearray ) 00~{ $_return = ^matchreversearrayvalue ( ^0 ^1 ^2 ^3 ) } 004 ^if 00B( ! $_return and ! $$valuearray ) 00Y{ $_return = ^matchfuzzyarrayvalue ( ^0 ^1 ^2 ^3 ) } 004 $taskinfo.field.gleanvalue = $$valuearray ^return ( $_return ) `
^get_staticdropdown o 0 0 B( ^value $_array $_titlekey $_valuekey $_return ) $_array = $taskinfo.field.staticDropDownFields $_titlekey = "title" ^if 00w( $taskinfo.field.titleKey ) 00N{ $_titlekey = $taskinfo.field.titleKey } 004 $_valuekey = "value" ^if 00w( $taskinfo.field.valueKey ) 00N{ $_valuekey = $taskinfo.field.valueKey } 004 $_return = ^get_arrayvalue ( $_array ^0 $_titlekey $_valuekey ) ^return ( $_return ) `
^get_dynamicdropdown o 0 0 B( ^value $_result $_array $_return ) $_result = ^result ( $_array = ^get_dropdowninfo ( $taskinfo.botorderid $taskinfo.taskinstanceid $taskinfo.field null 1 ) ) ^if 00t( $_result != NOPROBLEM ) 00s{ ^return ( null ) } 004 $_return = ^get_arrayvalue ( $_array ^0 ) ^return ( $_return ) `
^get_typeahead o 0 0 B( ^value $_result $_array $_value ) $_result = ^result ( $_array = ^get_search_by_name ( $taskinfo.botorderid $taskinfo.taskinstanceid $taskinfo.field ^0 null 1 ) ) ^if 00V( $_result != NOPROBLEM or ^length ( $_array ) != 1 ) 01e{ $taskinfo.field.gleanvalue = ^jsoncopy ( permanent $_array ) ^return ( null ) } 02I else ( 1 ) 02s { $_value = ^jsoncopy ( permanent $_array[0] ) $$valuearray = null ^formatvaluearray ( typeahead $_value ) $taskinfo.field.gleanvalue = $$valuearray ^return ( $_value ) } 004 `
^get_nestedarray o 0 0 B( ^value $_savefield $_fields $_keyname $_index $_return $_result $_value $_input $_title $_root $_keyobj ) $_savefield = $taskinfo.field $_fields = $taskinfo.field.fields $taskinfo.field = $_fields[0] $_keyname = ^getfieldkey ( $taskinfo.field ) $_index = ^position ( START _10 ) $_index -= 1 ^maskindirection ( $_index backward ) $_index = ^position ( END _10 ) $_index += 1 ^maskindirection ( $_index forward ) $_return = ^jsoncreate ( PERMANENT array ) ^loop ( -1 ) 08~ { $_result = ^result ( ^match ( " _* _[ ~arrayseparator > ] " ) ) ^if 00H( $_result != NOPROBLEM or _0 == null ) 00p{ ^end ( loop ) } 004 ^unmark ( * _0 ) ^unmark ( * _1 ) $_value = ^original ( _0 ) $_input = ^get_typeahead ( $_value ) ^if 00n( $_input == null ) 00G{ $_return = null ^next ( loop ) } 004 $_title = $_input.title $_value = $_input.value $_root = ^jsoncreate ( PERMANENT object ) $_keyobj = ^jsoncreate ( PERMANENT object ) ^insertjsontypedvalue ( $_keyobj title $_title string ) ^insertjsontypedvalue ( $_keyobj value $_value string ) ^jsonobjectinsert ( PERMANENT $_root $_keyname $_keyobj ) ^jsonarrayinsert ( PERMANENT $_return $_root ) } $taskinfo.field = $_savefield ^if 00g( $_return ) 01D{ $$valuearray = null ^formatvaluearray ( typeahead $_return ) $taskinfo.field.gleanvalue = $$valuearray } 004 ^mark ( ) ^return ( $_return ) `
^gettextvalue o 0 0 C( $_kind $_input $_value ) ^if 00N( $_kind == description or $_kind == string ) 01R{ $_value = $_input $$valuearray = null ^formatvaluearray ( $_kind $_value ) $taskinfo.field.gleanvalue = $$valuearray } 05F else 00Y( $_kind == staticDropDown or $_kind == list_of_values ) 00R{ $_value = ^get_staticdropdown ( $_input ) } 03+ else 00x( $_kind == dynamicDropDown ) 00S{ $_value = ^get_dynamicdropdown ( $_input ) } 02U else 00r( $_kind == typeAhead ) 00M{ $_value = ^get_typeahead ( $_input ) } 01P else 00t( $_kind == nestedArray ) 00O{ $_value = ^get_nestedarray ( $_input ) } 00G else ( 1 ) 00q { $_value = null } 004 ^return ( $_value ) `
^getfieldvalue o 0 0 B( ^fieldobj $_value $_key ) $_value = null $_key = ^getfieldkey ( ^0 ) ^if 00d( $_key ) 00L{ $_value = $taskinfo.fieldkeys.$_key } 004 ^return ( $_value ) `
^acceptfieldvalue o 0 0 D( ^fieldobj ^fieldvalue ^fieldtitle $_field $_value $_title $_key $_kind $_kindtype $_format ) $_field = ^0 $_value = ^1 $_title = ^2 $_key = ^getfieldkey ( $_field ) ^if 00f( ! $_key ) 00p{ ^end ( CALL ) } 004 $_kind = ^getkindoffield ( $_field ) $_kindtype = ^getkindtype ( $_kind ) ^logif ( $tracefields "^... Accepting field $_key = \"^1\"  kind: $_kind , kindtype: $_kindtype \n" ) ^if 00f( $_title ) 01a{ $taskinfo.fieldkeys.$_key = $_title $taskinfo.fieldvalues.$_key = $_value } 0ce else ( 1 ) 0b+ { ^if 00S( $_kindtype == dropdowns or $_kind == typeahead ) 02M{ ^if 00l( $_value.title ) 00R{ $taskinfo.fieldkeys.$_key = $_value.title } 00& else ( 1 ) 00R { $taskinfo.fieldkeys.$_key = $_value.value } 004 $taskinfo.fieldvalues.$_key = $_value.value } 08z else 00v( $_kind == coordlocation ) 01m{ $taskinfo.fieldkeys.$_key = $_value.title $taskinfo.fieldvalues.$_key = $_value.value } 06Q else 00s( $_kind == dateperiod ) 01C{ _0 = ^burst ( $_value = ) $taskinfo.fieldkeys.$$datefromkey = _0 $taskinfo.fieldkeys.$$datetokey = _1 } 04U else 00q( $_kind == datetime ) 01*{ $_format = $taskinfo.field.format $taskinfo.fieldkeys.$_key = ^maketimeutc ( $_value $_format ) $taskinfo.fieldvalues.$_key = $_value } 02u else 01b( $_kindtype == formatted or $_kindtype == descriptions or $_kind == nestedarray ) 01a{ $taskinfo.fieldkeys.$_key = $_value $taskinfo.fieldvalues.$_key = $_value } 004 } 004 `
^getunformattedvalue o 0 0 D( ^kind ^segment ^direction $_segment $_sentenceindex $_startindex $_endindex $_tmp $_original ) $_segment = ^1 $_sentenceindex = ^getsentenceindexfromposition ( $_segment ) $_startindex = ^getstartindexfromposition ( $_segment ) $_endindex = ^getendindexfromposition ( $_segment ) $_startindex += 1 $_endindex -= 1 ^loop ( -1 ) 0fm { ^if 00x( $_endindex < $_startindex ) 00s{ ^return ( null ) } 004 ^if 00m( ^2 == backward ) 04A{ $_tmp = ^scanusageindirection ( $_sentenceindex $_startindex $_endindex backward false ) ^if 00s( $_tmp < $_startindex ) 00s{ ^return ( null ) } 004 $_tmp += 1 ^maskindirection ( $_tmp forward ) $_tmp -= 1 $_tmp = ^scanusageindirection ( $_sentenceindex $_startindex $_tmp backward true ) ^maskindirection ( $_tmp backward ) } 04K else ( 1 ) 04u { $_tmp = ^scanusageindirection ( $_sentenceindex $_startindex $_endindex forward false ) ^if 00q( $_tmp > $_endindex ) 00s{ ^return ( null ) } 004 $_tmp -= 1 ^maskindirection ( $_tmp backward ) $_tmp += 1 $_tmp = ^scanusageindirection ( $_sentenceindex $_tmp $_endindex forward true ) ^maskindirection ( $_tmp forward ) } 004 ^cleaninput ( ^2 ) ^nofail ( RULE _0 = null ^match ( "_*" ) ) ^mark ( ) ^if 00a( _0 ) 02y{ _10 = _0 $_original = ^original ( _0 ) ^if 00i( $_original ) 00U{ $_original = ^gettextvalue ( ^0 $_original ) } 004 ^if 00i( $_original ) 00y{ ^return ( $_original ) } 004 } 004 ^if 00m( ^2 == backward ) 00u{ $_endindex = $_tmp } 00M else ( 1 ) 00w { $_startindex = $_tmp } 004 } `
^getformattedvalue o 0 0 D( ^kind ^segment ^direction $_fieldkind $_kindarray $_length $_segment $_segmentsentenceindex $_segmentstartindex $_segmentendindex $_seglen $_direction $_valueindex $_kindobj $_valueposition $_valuesentenceindex $_valuestartindex $_valueendindex $_key $_used $_fieldvalue $_start $_end ) $_fieldkind = ^0 $_kindarray = $taskinfo.gleanfacts.$_fieldkind $_length = ^length ( $_kindarray ) ^if 00l( $_length == 0 ) 00s{ ^return ( null ) } 004 $_segment = ^1 $_segmentsentenceindex = ^getsentenceindexfromposition ( $_segment ) $_segmentstartindex = ^getstartindexfromposition ( $_segment ) $_segmentendindex = ^getendindexfromposition ( $_segment ) $_seglen = $_segmentendindex - $_segmentstartindex ^if 00k( $_seglen < 2 ) 00s{ ^return ( null ) } 004 $_direction = ^2 ^if 00r( $_direction == both ) 00x{ $_direction = forward } 004 ^if 00u( $_direction == forward ) 00s{ $_valueindex = 0 } 01i else 00v( $_direction == backward ) 00R{ $_valueindex = $_length $_valueindex -= 1 } 004 ^loop ( -1 ) 0l9 { $_kindobj = $_kindarray[$_valueindex] ^if 00j( ! $_kindobj ) 00s{ ^return ( null ) } 004 $_valueposition = $_kindobj.position $_valuesentenceindex = ^getsentenceindexfromposition ( $_valueposition ) ^if 00S( $_valuesentenceindex == $_segmentsentenceindex ) 0cH{ $_valuestartindex = ^getstartindexfromposition ( $_valueposition ) $_valueendindex = ^getendindexfromposition ( $_valueposition ) ^if 01c( $_valuestartindex > $_segmentstartindex and $_valueendindex < $_segmentendindex ) 06t{ $_key = ^join ( $_valuesentenceindex - $_valueendindex ) $_used = $gleaninfo.usedup.$_key ^if 00g( ! $_used ) 04W{ $_kindobj = $taskinfo.gleanfacts.$_fieldkind[$_valueindex] $_fieldvalue = $_kindobj.value $_valueposition = $_kindobj.position $taskinfo.field.gleanvalue = $_kindobj.gleanvalue $_start = ^getstartindexfromposition ( $_valueposition ) $_end = ^getendindexfromposition ( $_valueposition ) ^setposition ( _10 $_start $_end ) ^return ( $_fieldvalue ) } 004 } 03b else ( 1 ) 02* { ^if 00-( $_direction == forward and $_valuestartindex > $_segmentendindex ) 00s{ ^return ( null ) } 004 ^if 00+( $_direction == backward and $_valueendindex < $_segmentstartindex ) 00s{ ^return ( null ) } 004 } 004 } 03r else ( 1 ) 03b { ^if 015( $_direction == forward and $_valuesentenceindex > $_segmentsentenceindex ) 00s{ ^return ( null ) } 004 ^if 016( $_direction == backward and $_valuesentenceindex < $_segmentsentenceindex ) 00s{ ^return ( null ) } 004 } 004 ^if 00u( $_direction == forward ) 00t{ $_valueindex += 1 } 00& else 00v( $_direction == backward ) 00t{ $_valueindex -= 1 } 004 } `
^getsinglefieldkindvalue o 0 0 D( $_kind $_segment $_direction $_kindtype $_value ) $_kindtype = ^getkindtype ( $_kind ) ^if 00v( $_kindtype == formatted ) 00+{ $_value = ^getformattedvalue ( $_kind $_segment $_direction ) } 01g else ( 1 ) 010 { $_value = ^getunformattedvalue ( $_kind $_segment $_direction ) } 004 ^return ( $_value ) `
^getkindvalue o 0 0 B( $_kind $_kindtype $_value $_input ) $_kindtype = ^getkindtype ( $_kind ) ^if 00v( $_kindtype == formatted ) 024{ $_value = ^getformattedkindvalue ( $_kind ) $$valuearray = null ^formatvaluearray ( $_kind $_value ) $taskinfo.field.gleanvalue = $$valuearray } 01# else ( 1 ) 01N { ^nofail ( RULE _0 = null ^match ( "_*" ) ) $_input = ^original ( _0 ) $_value = ^gettextvalue ( $_kind $_input ) } 004 ^return ( $_value ) `
^getfieldkindvaluearray o 0 0 D( $_kind $_segment $_direction $_segmentsentenceindex $_segmentstartindex $_segmentendindex $_prevseparator $_pattern $_return $_nextseparator $_fieldvalue $_valuestartindex $_valueendindex $_valueposition $_gleanvalue $_valueobject ) $_segmentsentenceindex = ^getsentenceindexfromposition ( $_segment ) $_segmentstartindex = ^getstartindexfromposition ( $_segment ) $_segmentendindex = ^getendindexfromposition ( $_segment ) $_prevseparator = $_segmentstartindex $_pattern = ^'_~arrayseparator' $_return = ^jsoncreate ( PERMANENT array ) ^loop ( -1 ) 0ef { $_nextseparator = ^findpatternindirection ( $_pattern $_prevseparator forward ) ^if 00p( ! $_nextseparator ) 01^{ ^if 00x( $_prevseparator > %length ) 00p{ ^end ( loop ) } 00= else ( 1 ) 00W { $_nextseparator = %length $_nextseparator += 1 } 004 } 004 ^maskindirection ( $_prevseparator backward ) ^maskindirection ( $_nextseparator forward ) $_fieldvalue = ^getkindvalue ( $_kind ) ^if 00T( ! $_fieldvalue and ! $taskinfo.field.gleanvalue ) 01O{ $_valuestartindex = $_prevseparator $_valuestartindex += 1 $_valueendindex = $_nextseparator $_valueendindex -= 1 } 01A else ( 1 ) 01k { $_valuestartindex = ^position ( START _10 ) $_valueendindex = ^position ( END _10 ) } 004 $_valueposition = ^getpositionfromsentenceandrange ( $_segmentsentenceindex $_valuestartindex $_valueendindex ) $_gleanvalue = $taskinfo.field.gleanvalue $_valueobject = ^jsonparse ( permanent ^'{ position: "$_valueposition", value: $_gleanvalue }' ) ^jsonarrayinsert ( PERMANENT $_return $_valueobject ) ^mark ( ) $taskinfo.field.gleanvalue = null $_prevseparator = $_nextseparator } $taskinfo.field.gleanvalueArray = $_return ^logif ( $tracefields "^isArray:  ^jsontree($taskinfo.field.gleanvalueArray) \n" ) ^return ( $_fieldvalue ) `
^getfieldkindvalue o 0 0 D( $_kind $_segment $_direction $_fieldvalue $_segmentsentenceindex $_valuestartindex $_valueendindex $_valueposition $_gleanvalue $_valueobject $_return ) ^if 00D( $taskinfo.field.isArray == true ) 017{ ^getfieldkindvaluearray ( $_kind $_segment $_direction ) ^end ( call ) } 004 $_fieldvalue = ^getsinglefieldkindvalue ( $_kind $_segment $_direction ) $_segmentsentenceindex = ^getsentenceindexfromposition ( $_segment ) $_valuestartindex = ^position ( START _10 ) $_valueendindex = ^position ( END _10 ) $_valueposition = ^getpositionfromsentenceandrange ( $_segmentsentenceindex $_valuestartindex $_valueendindex ) $_gleanvalue = $taskinfo.field.gleanvalue $_valueobject = ^jsonparse ( permanent ^'{ position: "$_valueposition", value: $_gleanvalue }' ) $_return = ^jsoncreate ( PERMANENT array ) ^jsonarrayinsert ( PERMANENT $_return $_valueobject ) $taskinfo.field.gleanvalueArray = $_return ^mark ( ) ^return ( $_fieldvalue ) `
^getpatternvalue o 0 0 D( ^kind ^patterns ^sentenceindex $_patterns $_len $_isarray $_patterncount $_pattern $_regex $_fieldvalue $_searchposition ) $_patterns = ^1 $_len = ^length ( $_patterns ) ^if 00-( $taskinfo.field.isArray == true or $taskinfo.field.type == array ) 00p{ $_isarray = 1 } 004 $_patterncount = 0 ^loop ( $_len ) 0b9 { $_pattern = $_patterns[$_patterncount] ^if 00j( ! $_pattern ) 00p{ ^end ( loop ) } 004 $_patterncount += 1 ^if 00H( ^extract ( $_pattern 1 6 ) == regex ) 03H{ $_len = ^length ( $_pattern ) $_len -= 1 $_regex = ^extract ( $_pattern 10 $_len ) $_regex = ^jsonundecodestring ( $_regex ) $_fieldvalue = ^getregexvalue ( $_regex ^2 $_isarray ) ^if 00m( ! $_fieldvalue ) 00q{ ^next ( LOOP ) } 004 ^return ( $_fieldvalue ) } 004 ^nofail ( RULE _0 = null ^match ( $_pattern ) ) ^if 00a( _0 ) 04G{ ^setposition ( _10 $$csmatch_start $$csmatch_end ) $value_start = ^position ( START _0 ) $value_start -= 1 $value_end = ^position ( END _0 ) $value_end += 1 $_searchposition = ^getpositionfromsentenceandrange ( ^2 $value_start $value_end ) $_fieldvalue = ^getfieldkindvalue ( ^0 $_searchposition forward ) ^return ( $_fieldvalue ) } 004 } ^return ( null ) `
^processnamedfields o 0 0 B( ^processfields $_fieldsprocessed $_namearray $_length $_nameid $_nameobject $_fieldname $_fieldindex $_fieldvalue $_dependent $_fieldkind $_kindtype $_nameposition $_namesentenceindex $_namestartindex $_nameendindex $_startindex $_endindex $_nameid1 $_stopposition $_stopsentenceindex $_pattern $_separator $_searchposition $_valuestartindex $_valueendindex ) $_fieldsprocessed = 0 $_namearray = $taskinfo.gleanfacts.fieldname ^if 00j( $_namearray ) 0LX{ $_length = ^length ( $_namearray ) $_nameid = $_length ^loop ( $_length ) 0KN { $_nameid -= 1 $_nameobject = $_namearray[$_nameid] ^if 00m( ! $_nameobject ) 00p{ ^end ( loop ) } 004 $_fieldname = $_nameobject.value $_fieldindex = $_nameobject.index $taskinfo.field = $taskinfo.fields[$_fieldindex] ^if 00x( $taskinfo.field.processed ) 00q{ ^next ( LOOP ) } 004 $_fieldvalue = null $_fieldvalue = ^getfieldvalue ( $taskinfo.field ) $_dependent = ^isfielddependent ( $taskinfo.field ) ^if 00E( ! $_fieldvalue and ! $_dependent ) 0EI{ $_fieldkind = ^getkindoffield ( $taskinfo.field ) $_kindtype = ^getkindtype ( $_fieldkind ) ^if 00o( $_kindtype != ^0 ) 00q{ ^next ( LOOP ) } 004 ^if 00j( $_fieldkind ) 0Ce{ ^logif ( $tracefields "^NamedField(^0): $_fieldname  nameindex=$_nameid fieldindex=$_fieldindex $_fieldkind \n" ) $_fieldvalue = null $_nameposition = $_nameobject.position $_namesentenceindex = ^getsentenceindexfromposition ( $_nameposition ) $_namestartindex = ^getstartindexfromposition ( $_nameposition ) $_nameendindex = ^getendindexfromposition ( $_nameposition ) ^restoregleansentence ( $_namesentenceindex ) $_startindex = $_nameendindex $_endindex = %length $_endindex += 1 ^if 00v( $_kindtype != dropdowns ) 04h{ $_nameid1 = $_nameid + 1 $_stopposition = $_namearray[$_nameid1].position ^if 00m( $_stopposition ) 02U{ $_stopsentenceindex = ^getsentenceindexfromposition ( $_stopposition ) ^if 00O( $_namesentenceindex == $_stopsentenceindex ) 00*{ $_endindex = ^getstartindexfromposition ( $_stopposition ) } 004 } 004 } 004 ^if 00*( $_fieldkind != nestedarray and $taskinfo.field.isArray != true ) 02R{ $_pattern = _~arrayseparator $_separator = ^findpatternindirection ( $_pattern $_nameendindex forward ) ^if 00M( $_separator and $_separator < $_endindex ) 00A{ $_endindex = $_separator } 004 } 004 $_searchposition = ^getpositionfromsentenceandrange ( $_namesentenceindex $_startindex $_endindex ) $_fieldvalue = ^getfieldkindvalue ( $_fieldkind $_searchposition forward ) ^if 00s( $_fieldvalue == null ) 0bJ{ $_startindex = 0 $_endindex = $_namestartindex ^if 00v( $_kindtype != dropdowns ) 04h{ $_nameid1 = $_nameid - 1 $_stopposition = $_namearray[$_nameid1].position ^if 00m( $_stopposition ) 02U{ $_stopsentenceindex = ^getsentenceindexfromposition ( $_stopposition ) ^if 00O( $_namesentenceindex == $_stopsentenceindex ) 00*{ $_startindex = ^getendindexfromposition ( $_stopposition ) } 004 } 004 } 004 ^if 00*( $_fieldkind != nestedarray and $taskinfo.field.isArray != true ) 02Y{ $_pattern = _~arrayseparator $_separator = ^findpatternindirection ( $_pattern $_namestartindex backward ) ^if 00O( $_separator and $_separator > $_startindex ) 00C{ $_startindex = $_separator } 004 } 004 $_searchposition = ^getpositionfromsentenceandrange ( $_namesentenceindex $_startindex $_endindex ) $_fieldvalue = ^getfieldkindvalue ( $_fieldkind $_searchposition backward ) } 004 ^if 00s( $_fieldvalue != null ) 08w{ $taskinfo.field.processed = true ^acceptfieldvalue ( $taskinfo.field $_fieldvalue ) ^unmarkusedposition ( $taskinfo.field.valueposition ) $_valuestartindex = ^position ( START _10 ) $_valueendindex = ^position ( END _10 ) ^if 00I( $_valuestartindex < $_namestartindex ) 00M{ $_namestartindex = $_valuestartindex } 004 ^if 00E( $_valueendindex > $_nameendindex ) 00I{ $_nameendindex = $_valueendindex } 004 ^markusedrange ( $_namesentenceindex $_namestartindex $_nameendindex ) $taskinfo.field.valueposition = ^getpositionfromsentenceandrange ( $_namesentenceindex $_namestartindex $_nameendindex ) $_fieldsprocessed += 1 } 004 } 004 } 004 } } 004 ^return ( $_fieldsprocessed ) `
^processunnamedfields o 0 0 B( ^processfields $_fieldsprocessed $_fieldid $_fieldvalue $_fieldrequired $_dependent $_fieldkind $_kindtype $_sentenceindex $_startindex $_endindex $_searchposition ) $_fieldsprocessed = 0 $_fieldid = 0 ^loop ( $taskinfo.fieldcount ) 0mf { $taskinfo.field = $taskinfo.fields[$_fieldid] ^if 00p( ! $taskinfo.field ) 00p{ ^end ( loop ) } 004 ^if 00x( $taskinfo.field.processed ) 00F{ $_fieldid += 1 ^next ( LOOP ) } 004 $_fieldvalue = null $_fieldvalue = ^getfieldvalue ( $taskinfo.field ) $_fieldrequired = ^castboolean ( $taskinfo.field.isRequired ) $_dependent = ^isfielddependent ( $taskinfo.field ) ^if 00Y( $_fieldrequired and ! $_fieldvalue and ! $_dependent ) 0gg{ $_fieldkind = ^getkindoffield ( $taskinfo.field ) $_kindtype = ^getkindtype ( $_fieldkind ) ^if 00o( $_kindtype != ^0 ) 00F{ $_fieldid += 1 ^next ( LOOP ) } 004 ^if 00j( $_fieldkind ) 0dK{ ^logif ( $tracefields "^UnnamedField(^0): fieldindex=$_fieldid $_fieldkind \n" ) $_sentenceindex = $gleaninfo.unprocessed ^loop ( $gleaninfo.sentencecount ) 0bs { ^restoregleansentence ( $_sentenceindex ) $_startindex = 0 $_endindex = %length $_endindex += 1 $_searchposition = ^getpositionfromsentenceandrange ( $_sentenceindex $_startindex $_endindex ) $_fieldvalue = ^getfieldkindvalue ( $_fieldkind $_searchposition both ) ^if 00s( $_fieldvalue != null ) 073{ ^acceptfieldvalue ( $taskinfo.field $_fieldvalue ) $taskinfo.field.processed = true ^unmarkusedposition ( $taskinfo.field.valueposition ) $_startindex = ^position ( START _10 ) $_endindex = ^position ( END _10 ) ^markusedrange ( $_sentenceindex $_startindex $_endindex ) $taskinfo.field.valueposition = ^getpositionfromsentenceandrange ( $_sentenceindex $_startindex $_endindex ) $_fieldsprocessed += 1 ^if 00w( $taskinfo.field.depender ) 00F{ ^return ( $_fieldsprocessed ) } 00F else ( 1 ) 00p { ^end ( LOOP ) } 004 } 004 $_sentenceindex += 1 } } 004 } 004 $_fieldid += 1 } ^return ( $_fieldsprocessed ) `
^getunusedinput o 0 0 A( $_return $_sentenceindex $_sentenceinput $_right $_left $_original $_last ) $_return = null $gleaninfo.sentencecount = ^length ( $gleaninfo.sentences ) - $$volleysentenceindex $_sentenceindex = $$volleysentenceindex ^loop ( $gleaninfo.sentencecount ) 0dg { $_sentenceinput = null ^restoregleansentence ( $_sentenceindex ) $_right = 1 ^loop ( -1 ) 06v { $_left = ^scanusageindirection ( $_sentenceindex $_right %length forward false ) ^if 00o( $_left > %length ) 00p{ ^end ( loop ) } 004 $_right = ^scanusageindirection ( $_sentenceindex $_left %length forward true ) $_right -= 1 ^setposition ( _0 $_left $_right ) ^markusedrange ( $_sentenceindex $_left $_right ) $_original = ^original ( _0 ) $_sentenceinput = ^join ( AUTOSPACE $_sentenceinput $_original ) $_right += 1 ^if 00o( $_left > %length ) 00p{ ^end ( loop ) } 004 } ^if 00n( $_sentenceinput ) 04i{ $_last = ^extract ( $_sentenceinput -1 +1 ) ^if 00T( $_last != "." or $_last != "!" or $_last != "?" ) 02S{ ^if 00w( %tokenflags & 2147483648 ) 00Y{ $_sentenceinput = ^join ( $_sentenceinput ". " ) } 01q else 00w( %tokenflags & 1073741824 ) 00Y{ $_sentenceinput = ^join ( $_sentenceinput "! " ) } 004 } 004 } 004 $_return = ^join ( $_return $_sentenceinput ) $_sentenceindex += 1 } ^return ( $_return ) `
^processunnameddescriptions o 0 0 A( $_fieldsprocessed $_fieldid $_fieldvalue $_fieldrequired $_dependent $_fieldkind $_kindtype $_valueobject $_return ) $_fieldsprocessed = 0 $_fieldid = 0 ^loop ( $taskinfo.fieldcount ) 0gB { $taskinfo.field = $taskinfo.fields[$_fieldid] ^if 00p( ! $taskinfo.field ) 00p{ ^end ( loop ) } 004 ^if 00x( $taskinfo.field.processed ) 00F{ $_fieldid += 1 ^next ( LOOP ) } 004 $_fieldvalue = null $_fieldvalue = ^getfieldvalue ( $taskinfo.field ) $_fieldrequired = ^castboolean ( $taskinfo.field.isRequired ) $_dependent = ^isfielddependent ( $taskinfo.field ) ^if 00Y( $_fieldrequired and ! $_fieldvalue and ! $_dependent ) 0aC{ $_fieldkind = ^getkindoffield ( $taskinfo.field ) $_kindtype = ^getkindtype ( $_fieldkind ) ^if 00y( $_kindtype != descriptions ) 00F{ $_fieldid += 1 ^next ( LOOP ) } 004 ^if 00j( $_fieldkind ) 07W{ ^logif ( $tracefields "^UnnamedDescription: fieldindex=$_fieldid $_fieldkind \n" ) $_fieldvalue = ^getunusedinput ( ) ^if 00k( $_fieldvalue ) 05F{ ^acceptfieldvalue ( $taskinfo.field $_fieldvalue ) $$valuearray = null ^formatvaluearray ( description $_fieldvalue ) $taskinfo.field.gleanvalue = $$valuearray $_valueobject = ^jsonparse ( permanent ^'{ value: $taskinfo.field.gleanvalue }' ) $_return = ^jsoncreate ( PERMANENT array ) ^jsonarrayinsert ( PERMANENT $_return $_valueobject ) $taskinfo.field.gleanvalueArray = $_return $_fieldsprocessed += 1 } 004 ^end ( loop ) } 004 } 004 $_fieldid += 1 } ^return ( $_fieldsprocessed ) `
^processpatternfields o 0 0 B( ^processfields $_fieldsprocessed $_fieldid $_fieldvalue $_dependent $_fieldkind $_kindtype $_title $_patterns $_sentenceindex $_startindex $_endindex ) $_fieldsprocessed = 0 $_fieldid = 0 ^loop ( $taskinfo.fieldcount ) 0j^ { $taskinfo.field = $taskinfo.fields[$_fieldid] ^if 00p( ! $taskinfo.field ) 00p{ ^end ( loop ) } 004 ^if 00x( $taskinfo.field.processed ) 00F{ $_fieldid += 1 ^next ( LOOP ) } 004 $_fieldvalue = null $_fieldvalue = ^getfieldvalue ( $taskinfo.field ) $_dependent = ^isfielddependent ( $taskinfo.field ) ^if 00E( ! $_fieldvalue and ! $_dependent ) 0f1{ $_fieldkind = ^getkindoffield ( $taskinfo.field ) $_kindtype = ^getkindtype ( $_fieldkind ) ^if 00o( $_kindtype != ^0 ) 00F{ $_fieldid += 1 ^next ( LOOP ) } 004 ^if 00j( $_fieldkind ) 0cv{ $_title = $taskinfo.field.title $_patterns = ^getfieldpatterns ( $_title ) ^if 00k( ! $_patterns ) 00F{ $_fieldid += 1 ^next ( LOOP ) } 004 ^logif ( $tracefields "^PatternFields: fieldindex=$_fieldid $_fieldkind \n" ) $_sentenceindex = $gleaninfo.unprocessed ^loop ( $gleaninfo.sentencecount ) 08q { ^restoregleansentence ( $_sentenceindex ) $_fieldvalue = null $_fieldvalue = ^getpatternvalue ( $_fieldkind $_patterns $_sentenceindex ) ^if 00s( $_fieldvalue != null ) 05R{ ^acceptfieldvalue ( $taskinfo.field $_fieldvalue ) $taskinfo.field.processed = true ^unmarkusedposition ( $taskinfo.field.valueposition ) $_startindex = ^position ( START _10 ) $_endindex = ^position ( END _10 ) ^markusedrange ( $_sentenceindex $_startindex $_endindex ) $taskinfo.field.valueposition = ^getpositionfromsentenceandrange ( $_sentenceindex $_startindex $_endindex ) $_fieldsprocessed += 1 ^end ( LOOP ) } 004 $_sentenceindex += 1 } } 004 } 004 $_fieldid += 1 } ^return ( $_fieldsprocessed ) `
^processdefaultvalues o 0 0 A( $_fieldid $_field $_fieldprocessed $_defaulttitle $_defaultvalue ) $_fieldid = 0 ^loop ( $taskinfo.fieldcount ) 04R { $_field = $taskinfo.fields[$_fieldid] ^if 00h( ! $_field ) 00p{ ^end ( loop ) } 004 $_fieldprocessed = $_field.processed $_defaulttitle = $_field.default $_defaultvalue = $_field.value ^if 00J( ! $_fieldprocessed and $_defaultvalue ) 01l{ $_field.processed = true ^acceptfieldvalue ( $_field $_defaultvalue $_defaulttitle ) } 004 $_fieldid += 1 } `
^scanformattedvalues o 0 0 A( $_fieldid $_fieldkind $_kindtype $_kindrecord $_kindarray $_sentenceindex $_fieldvalue $_startindex $_endindex $_position $_usedindex $_kindfact ) $_fieldid = 0 ^loop ( $taskinfo.fieldcount ) 0kI { $taskinfo.field = $taskinfo.fields[$_fieldid] ^if 00p( ! $taskinfo.field ) 00p{ ^end ( loop ) } 004 $_fieldkind = ^getkindoffield ( $taskinfo.field ) $_kindtype = ^getkindtype ( $_fieldkind ) ^if 00v( $_kindtype == formatted ) 0hj{ ^logif ( $tracefields "^ScanFormattedField: fieldid=$_fieldid $_fieldkind\n" ) $_kindrecord = $_fieldkind ^nofail ( RULE $_kindarray = null $_kindarray = $taskinfo.gleanfacts.$_kindrecord ) ^if 00l( ! $_kindarray ) 0ei{ $_kindarray = ^jsoncreate ( permanent array ) ^jsonobjectinsert ( permanent $taskinfo.gleanfacts $_kindrecord $_kindarray ) $_sentenceindex = $gleaninfo.unprocessed ^loop ( $gleaninfo.sentencecount ) 0bw { ^restoregleansentence ( $_sentenceindex ) $_fieldvalue = null ^loop ( -1 ) 09^ { $$valuearray = null $_fieldvalue = ^getformattedkindvalue ( $_fieldkind ) ^formatvaluearray ( $_fieldkind $_fieldvalue ) ^if 00F( ! $_fieldvalue and ! $$valuearray ) 00p{ ^end ( LOOP ) } 004 $_startindex = ^position ( START _0 ) $_endindex = ^position ( END _0 ) $_position = ^getpositionfromsentenceandrange ( $_sentenceindex $_startindex $_endindex ) $_usedindex = ^scanusageindirection ( $_sentenceindex $_startindex $_endindex forward true ) ^if 00w( $_usedindex > $_endindex ) 02R{ $_kindfact = ^jsonparse ( permanent ^'{ "position":"$_position" }' ) $_kindfact.value = $_fieldvalue $_kindfact.gleanvalue = $$valuearray ^jsonarrayinsert ( permanent $_kindarray $_kindfact ) } 004 ^setposition ( _0 1 $_endindex ) ^unmark ( * _0 ) } ^mark ( ) $_sentenceindex += 1 } } 004 } 004 $_fieldid += 1 } `
^interposition o 0 0 C( $_oldposition $_newposition $_oldsentenceindex $_newsentenceindex $_oldstartindex $_oldendindex $_newstartindex $_newendindex ) $_oldsentenceindex = ^getsentenceindexfromposition ( $_oldposition ) $_newsentenceindex = ^getsentenceindexfromposition ( $_newposition ) ^if 00L( $_newsentenceindex > $_oldsentenceindex ) 00t{ ^return ( after ) } 0ag else 00L( $_newsentenceindex < $_oldsentenceindex ) 00u{ ^return ( before ) } 099 else ( 1 ) 08^ { $_oldstartindex = ^getstartindexfromposition ( $_oldposition ) $_oldendindex = ^getendindexfromposition ( $_oldposition ) $_newstartindex = ^getstartindexfromposition ( $_newposition ) $_newendindex = ^getendindexfromposition ( $_newposition ) ^if 00D( $_newstartindex > $_oldendindex ) 00t{ ^return ( after ) } 04J else 00D( $_newendindex > $_oldstartindex ) 00u{ ^return ( before ) } 03K else 012( $_newstartindex <= $_oldstartindex and $_newendindex >= $_oldendindex ) 00s{ ^return ( over ) } 02b else 012( $_newstartindex >= $_oldstartindex and $_newendindex <= $_oldendindex ) 00u{ ^return ( inside ) } 00N else ( 1 ) 00x { ^return ( intersect ) } 004 } 004 `
^findnameindex o 0 0 B( ^name $_tmpname $_fieldid $_field $_fieldname ) $_tmpname = ^0 $_fieldid = 0 ^loop ( $taskinfo.fieldcount ) 02S { $_field = $taskinfo.fields[$_fieldid] ^if 00h( ! $_field ) 00p{ ^end ( loop ) } 004 $_fieldname = $_field.title ^if 00w( $_tmpname == $_fieldname ) 00x{ ^return ( $_fieldid ) } 004 $_fieldid += 1 } ^return ( null ) `
^scannamedfields o 0 0 A( $_kindarray $_prefixconcept $_sentenceindex $_oldposition $_concept $_nameposition $_startindex $_endindex $_fieldname $_position $_originalposition $_beg $_end $_actualposition $_inter $_fieldindex $_namefact $_currentfact ) $_kindarray = ^jsoncreate ( permanent array ) ^jsonobjectinsert ( permanent $taskinfo.gleanfacts fieldname $_kindarray ) $_prefixconcept = $taskinfo.prefixconcept $_sentenceindex = $gleaninfo.unprocessed ^loop ( $gleaninfo.sentencecount ) 0hf { ^restoregleansentence ( $_sentenceindex ) $_oldposition = ^getpositionfromsentenceandrange ( 0 0 0 ) ^setposition ( _0 1 %length ) @0 = ^conceptlist ( CONCEPT _0 $_prefixconcept ) ^loop ( -1 ) 0ei { _10 = ^first ( @0all ) ^if 00d( ! _10 ) 00p{ ^end ( loop ) } 004 $_concept = _10 $_nameposition = _12 $_startindex = _12 >> 8 $_endindex = _12 & 255 _0 = ^burst ( $_concept -field- ) $_fieldname = _1 $_position = ^getpositionfromsentenceandrange ( $_sentenceindex $_startindex $_endindex ) $_originalposition = ^originalinputrange ( $_startindex $_endindex ) $_beg = $_originalposition >> 8 $_end = $_originalposition & 255 $_actualposition = ^actualinputrange ( $_beg $_end ) ^if 00G( $_actualposition != $_nameposition ) 00q{ ^next ( loop ) } 004 $_inter = ^interposition ( $_oldposition $_position ) ^if 00o( $_inter == after ) 03n{ $_fieldindex = ^findnameindex ( $_fieldname ) $_namefact = ^jsonparse ( permanent ^'{ position:"$_position", value:"$_fieldname", index:"$_fieldindex" }' ) ^jsonarrayinsert ( permanent $_kindarray $_namefact ) $_oldposition = $_position } 02z else 00n( $_inter == over ) 023{ $_currentfact = ^jsonpath ( ".position*" $_namefact ) ^revisefact ( $_currentfact $_namefact position $_position ) $_oldposition = $_position } 004 } $_sentenceindex += 1 } `
^setdependentonfields o 0 0 A( $_fieldid1 $_field1 $_key $_fieldid2 $_field2 $_dependson $_len $_count $_dependent ) $_fieldid1 = 0 ^loop ( $taskinfo.fieldcount ) 08@ { $_field1 = $taskinfo.fields[$_fieldid1] ^if 00i( ! $_field1 ) 00p{ ^end ( loop ) } 004 $_key = ^getfieldkey ( $_field1 ) $_fieldid2 = 0 ^loop ( $taskinfo.fieldcount ) 06n { ^if 00x( $_field1.depender == true ) 00p{ ^end ( loop ) } 004 $_field2 = $taskinfo.fields[$_fieldid2] ^if 00i( ! $_field2 ) 00p{ ^end ( loop ) } 004 $_dependson = null $_dependson = $_field2.dependsOn $_len = ^length ( $_dependson ) $_count = 0 ^loop ( $_len ) 02C { $_dependent = $_dependson[$_count] ^if 00l( ! $_dependent ) 00p{ ^end ( loop ) } 004 ^if 00s( $_dependent == $_key ) 00O{ $_field1.depender = true ^end ( loop ) } 004 $_count += 1 } $_fieldid2 += 1 } $_fieldid1 += 1 } `
^initfieldsinfo o 0 0 A( $_prefixconcept $_fieldid $_field $_title $_key $_type $_fieldtype $_metadata $_dependsonarray $_dependson $_required $_patterns $_kind ) $taskinfo.fieldcount = ^length ( $taskinfo.fields ) $taskinfo.notfirst = null $_prefixconcept = ^join ( ~ bot- $botinfo.botname -task- $taskinfo.currentintendedaction -field- ) $_prefixconcept = ^pos ( lowercase $_prefixconcept ) $taskinfo.prefixconcept = $_prefixconcept $_fieldid = 0 ^loop ( $taskinfo.fieldcount ) 08D { $_field = $taskinfo.fields[$_fieldid] ^if 00h( ! $_field ) 00p{ ^end ( loop ) } 004 $_title = $_field.title $_key = $_field.key $_key = ^substitute ( character $_key " " _ ) $_type = $_field.type $_fieldtype = $_field.fieldtype $_metadata = $_field.metadata $_dependsonarray = $_field.dependsOn $_dependson = $_dependsonarray[0] $_required = $_field.isRequired $_patterns = ^getfieldpatterns ( $_title ) $_kind = ^getkindoffield ( $_field ) ^if 00s( $_kind == dateperiod ) 01^{ ^if 00v( $_metadata == from-date ) 00x{ $$datefromkey = $_key } 004 ^if 00t( $_metadata == to-date ) 00v{ $$datetokey = $_key } 004 } 004 $_fieldid += 1 } ^setdependentonfields ( ) `
^initgleaninfo o 0 0 A( ) ^logif ( $tracefields "^Glean sentences  ^jsontree($gleaninfo.sentences) \n" ) ^logif ( $tracefields "^Used up words  ^jsontree($gleaninfo.usedup) \n" ) $gleaninfo.sentencecount = ^length ( $gleaninfo.sentences ) - $gleaninfo.unprocessed ^if 00s( $taskinfo.gleanfacts ) 00I{ ^delete ( $taskinfo.gleanfacts ) } 004 $taskinfo.gleanfacts = ^jsoncreate ( permanent object ) ^scannamedfields ( ) ^scanformattedvalues ( ) ^logif ( $tracefields "^Gleaned facts  ^jsontree($taskinfo.gleanfacts) \n" ) `
^processbatchfields o 0 0 B( $_interactive ) ^initfieldsinfo ( ) ^initgleaninfo ( ) ^loop ( -1 ) 0dk { ^if 00J( ^processnamedfields ( dropdowns ) > 0 ) 00q{ ^next ( LOOP ) } 004 ^if 00L( ^processpatternfields ( dropdowns ) > 0 ) 00q{ ^next ( LOOP ) } 004 ^if 00L( ^processunnamedfields ( dropdowns ) > 0 ) 00q{ ^next ( LOOP ) } 004 ^if 00J( ^processnamedfields ( formatted ) > 0 ) 00q{ ^next ( LOOP ) } 004 ^if 00L( ^processpatternfields ( formatted ) > 0 ) 00q{ ^next ( LOOP ) } 004 ^if 00L( ^processunnamedfields ( formatted ) > 0 ) 00q{ ^next ( LOOP ) } 004 ^if 00K( ^processnamedfields ( typeaheads ) > 0 ) 00q{ ^next ( LOOP ) } 004 ^if 00M( ^processpatternfields ( typeaheads ) > 0 ) 00q{ ^next ( LOOP ) } 004 ^if 00M( ^processunnamedfields ( typeaheads ) > 0 ) 00q{ ^next ( LOOP ) } 004 ^if 00M( ^processnamedfields ( descriptions ) > 0 ) 00q{ ^next ( LOOP ) } 004 ^if 00O( ^processpatternfields ( descriptions ) > 0 ) 00q{ ^next ( LOOP ) } 004 ^if 00B( $$lonefield and $_interactive ) 019{ ^if 00H( ^processunnameddescriptions ( ) > 0 ) 00q{ ^next ( LOOP ) } 004 } 004 ^end ( LOOP ) } ^processdefaultvalues ( ) `
^processfields o 0 0 A( ) ^if 00z( ! $taskinfo.isProcessFields ) 00^{ ^processbatchfields ( ) $taskinfo.isProcessFields = true } 004 $gleaninfo.unprocessed = null ^logif ( $tracefields "^Fields  ^jsontree($taskinfo.fields) \n" ) `
^processlonefield o 0 0 C( $_field $_interactive $_gleanvalue ) $taskinfo.holdfield = $taskinfo.fields $taskinfo.fields = ^jsoncreate ( transient array ) $taskinfo.field = $_field ^jsonarrayinsert ( transient $taskinfo.fields $_field ) $$lonefield = true ^processbatchfields ( $_interactive ) $$lonefield = null $_gleanvalue = $taskinfo.field.gleanvalueArray $taskinfo.fields = $taskinfo.holdfield $taskinfo.holdfield = null ^if 00B( $tracefields and $_gleanvalue ) 00~{ ^log ( gleanvalue: ^jsontree ( $_gleanvalue ) \n ) } 004 ^if 00r( $$testingrejoinders ) 00l{ ^mark ( ) } 004 ^return ( $_gleanvalue ) `
^initfieldobject o 0 0 F( ^title ^fieldtype ^metadata ^patterns ^advancedfields $_field $_advanced ) $_field = ^jsoncreate ( transient object ) $_field.title = ^0 $_field.key = ^0 $_field.fieldType = ^1 $_field.metadata = ^2 $_field.fieldPatterns = ^3 $_field.dependsOn = null $_field.isRequired = true $_advanced = ^4 ^if 00i( $_advanced ) 04n{ $_field.type = $_advanced.type $_field.format = $_advanced.format $_field.value = $_advanced.value $_field.staticDropDownFields = $_advanced.staticDropDownFields $_field.titleKey = $_advanced.titleKey $_field.valueKey = $_advanced.valueKey $_field.fields = $_advanced.fields $_field.isArray = $_advanced.isArray } 004 ^logif ( $tracefields "^initFieldObject:  ^jsonwrite($_field) \n" ) ^return ( $_field ) `
^tracknode o 0 0 C( $_node $_stateofnode ) ^if 00y( $_stateofnode == processed ) 018{ $_node._state = processed $_node._processed = 1 $_node._iterations += 1 } 01d else ( 1 ) 00- { $_node._state = $_stateofnode $_node._stateChangedCount += 1 } 004 `
^clearnodetracking o 0 0 A( $_len $_item $_node ) $_len = ^length ( $taskinfo.dialogTree.nodes ) $_item = 0 ^loop ( $_len ) 01z { $_node = $taskinfo.dialogTree.nodes[$_item] $_node._processed = null $_node._state = null $_item += 1 } `
^isstackeddialog o 0 0 B( $_dialogid ) ^if 00E( $_dialogid == $taskinfo.dialogId ) 00s{ ^return ( true ) } 004 @0 = ^jsonpropertyvaluesforobjectsinarray ( $context dialogId $_dialogid 3 ) ^if 00q( ^length ( @0 ) > 0 ) 00s{ ^return ( true ) } 004 ^fail ( CALL ) `
^executetransitions o 0 0 A( ) $$dialogmanagertransitions = 1 ^retry ( TOPIC ) `
^enddialog o 0 0 B( $_finalmessage ) $$dialogcomponenttype = end $$finaldialogmessage = $_finalmessage ^retry ( TOPIC ) `
^acknowledgemessage o 0 0 A( ) ^if 00f( %server ) 00H{ $$oob.ackMessageDelivery = true } 01l else ( 1 ) 015 { $callbacktime = 1 $callbackrule = ~dialogmgr.execute_transitions_oob } 004 `
^preparepayloadbaseobject o 0 0 A( $_payload ) $_payload = ^jsoncreate ( transient object ) $_payload.bot = $botinfo.botname $_payload.streamId = $botinfo.botid $_payload.taskid = $taskinfo.dialogTree._id $_payload.channelId = $$channelinfo $_payload.contextId = $taskinfo.contextIdOnServer ^return ( $_payload ) `
^preparepayload o 0 0 E( $_object $_apiexecutiontype $_msg $_channelid $_payload $_payloadjson ) $_payload = ^preparepayloadbaseobject ( ) $_payload.nodeId = $_object.nodeId ^if 00D( $_apiexecutiontype == condition ) 01a{ $_payload.apiExecutionType = $_apiexecutiontype $_payload.message = $_msg } 01M else ( 1 ) 01w { $_payload.apiExecutionType = $taskinfo.component.type $_payload.message = ^"calling dialog api" } 004 ^if 00j( $_channelid ) 00J{ $_payload.channelId = $_channelid } 004 $_payloadjson = ^jsonwrite ( $_payload ) ^delete ( $_payload ) ^return ( $_payloadjson ) `
^checkauthstatus o 0 0 B( $_componentname $_instanceurl $_authstatus ) $_instanceurl = ^"$protocol://$server/market/streams/$botinfo.botid/components/$_componentname/auth" ^if 00l( $$channelinfo ) 00^{ $_instanceurl = ^"$_instanceurl?channelId=$$channelInfo" } 004 $_authstatus = ^invoke_json ( PERMANENT get $_instanceurl null "^to get auth information" CheckAuthStatus ) ^return ( $_authstatus ) `
^setauthaccount o 0 0 B( $_account $_arrayofobjects $_object $_object1 $_idp ) $_arrayofobjects = ^jsoncreate ( TRANSIENT array ) $_object = ^jsoncreate ( TRANSIENT object ) $_object.accountnametouse = $_account.label $_object.accountidtouse = $_account.streamAccountId $_object.accountIdStatus = $_account.status $_object1 = ^jsoncreate ( TRANSIENT object ) $_idp = $taskinfo.component.idp $_object1.key = ^"context.authorisations.$_idp" $_object1.value = $_object ^jsonarrayinsert ( TRANSIENT $_arrayofobjects $_object1 ) ^updatevaluesforkeysincontext ( $taskinfo.contextJson.botid $taskinfo.contextIdOnServer $_arrayofobjects ) `
^getcomponentbytype o 0 0 B( $_type $_components $_componentscount $_index $_object $_component ) $_components = $taskinfo.dialogTree.components $_componentscount = ^length ( $_components ) $_index = 0 ^loop ( $_componentscount ) 01S { $_object = $_components[$_index] ^if 00n( $_object.$_type ) 00M{ $_component = $_object ^end ( loop ) } 004 $_index += 1 } ^return ( $_component ) `
^getcomponent o 0 0 B( $_node ) ^notrace ( @0 = ^jsonparentfrompropertyinarray ( $taskinfo.dialogTree.components componentName $_node.componentRef ) ) ^return ( @0object ) `
^getcomponentfromintent o 0 0 B( $_intent ) ^notrace ( @0 = ^jsonparentfrompropertyinarray ( $taskinfo.dialogTree.components intent $_intent ) ) ^return ( @0object ) `
^getnode o 0 0 B( $_nodeid ) ^notrace ( @0 = ^jsonparentfrompropertyinarray ( $taskinfo.dialogTree.nodes nodeId $_nodeid ) ) ^return ( @0object ) `
^getnodebycomponent o 0 0 B( $_component ) ^notrace ( @0 = ^jsonparentfrompropertyinarray ( $taskinfo.dialogTree.nodes componentRef $_component.componentName ) ) ^return ( @0object ) `
^addtohistory o 0 0 B( $_node $_component $_historyobject ) ^notrace ( $_component = ^getcomponent ( $_node ) $_historyobject = ^jsoncreate ( PERMANENT object ) $_historyobject.nodeId = $_node.nodeId $_historyobject.state = $_node._state $_historyobject.type = $_component.type $_historyobject.componentName = $_component.componentName $_historyobject.timestamp = %fulltime $_historyobject.timestamp *= 1000 ^jsonarrayinsert ( PERMANENT $taskinfo.contextJson.history $_historyobject ) ^addlogentryinhistory ( $taskinfo.contextJson.botid $taskinfo.contextIdOnServer $_historyobject ) ) `
^updatenodestate o 0 0 C( $_node $_state ) ^tracknode ( $_node $_state ) ^addtohistory ( $_node ) `
^calldialogapi o 0 0 D( $_object $_apiexecutiontype $_msg $$payloadjson $_botid $_dialogid $_nodeid $_instanceurl $_result ) $$payloadjson = ^preparepayload ( $_object $_apiexecutiontype $_msg $$channelinfo ) $_botid = $botinfo.botid $_dialogid = $taskinfo.dialogTree._id $_nodeid = $taskinfo.dialogNode.nodeId $_instanceurl = ^"$protocol://$server/stream/$_botid/dialogs/$_dialogid/nodes/$_nodeid/execute" $_result = ^invoke_json ( TRANSIENT post $_instanceurl $$payloadjson "^to execute an api call" CallDialogApi ) ^if 00s( %httpresponse == 202 ) 01K{ $taskinfo.doTransitions = 1 ^updatenodestate ( $taskinfo.dialogNode waitingForServerResponse ) ^end ( INPUT ) } 00M else 00s( %httpresponse == 200 ) 00b{ } 004 `
^processnode o 0 0 B( $_node $_component ) $$dialogcomponenttype = null ^if 00w( $_node and $_node != end ) 072{ ^if 00B( ! $taskinfo.dialogNode._state ) 05y{ ^notrace ( $_component = ^getcomponent ( $_node ) ) ^if 00j( $_component ) 04n{ ^if 00G( $taskinfo.component != $_component ) 00J{ $taskinfo.component = $_component } 004 ^if 00o( $_component.type ) 02H{ ^updatenodestate ( $_node processing ) ^logif ( $controlflow "^ProcessNode: Processing node $_node.componentRef \($_node.nodeId\) for the  ^pos(place $_node._iterations)  time \n" ) } 004 } 004 } 004 $$dialogcomponenttype = $taskinfo.component.type ^retry ( TOPIC ) } 01q else ( 1 ) 01a { ^logif ( $controlflow "^ProcessNode: end dialog \n" ) ^enddialog ( null ) } 004 `
^startnode o 0 0 B( $_startnode ) $taskinfo.dialogNode = ^getnode ( $_startnode ) ^processnode ( $taskinfo.dialogNode ) `
^nestsubintent o 0 0 A( $_newtaskinfo $_newbotinfo ) $_newtaskinfo = ^jsoncopy ( PERMANENT $taskinfo ) $_newbotinfo = ^jsoncopy ( PERMANENT $botinfo ) $taskinfo.doTransitions = 1 $taskinfo.currentintendedaction = $taskinfo.contextJson.intent ^updatenodestate ( $taskinfo.dialogNode paused ) ^notrace ( ^push_action ( ) ) $taskinfo = $_newtaskinfo $botinfo = $_newbotinfo $taskinfo.currentintendedaction = $$currentintendedaction $taskinfo.fieldkeys = ^jsoncreate ( PERMANENT object ) $taskinfo.fieldvalues = ^jsoncreate ( PERMANENT object ) `
^installsubintent o 0 0 B( ^dialogobject $_lcbotname ) $_lcbotname = ^pos ( lowercase $botinfo.botname ) ^generatedialogobjectvocabulary ( $_lcbotname ^0 null $taskinfo.subintentData ) `
^preparesubintenttransitions o 0 0 A( $_transitions $_len $_item $_transition $_intent $_component $_activity ) $taskinfo.subintentData = null $_transitions = $taskinfo.dialogNode.transitions $_len = ^length ( $_transitions ) $_item = 0 ^loop ( $_len ) 07o { $_transition = $_transitions[$_item] ^if 00u( $_transition.if.intent ) 068{ ^if 00x( ! $taskinfo.subintentData ) 00&{ $taskinfo.subintentData = ^jsoncreate ( PERMANENT array ) } 004 $_intent = ^getnode ( $_transition.then ) $_component = ^getcomponentfromintent ( $_transition.if.intent ) ^if 00r( $_intent.flowTaskId ) 01?{ $_activity = ^getactivity ( $botinfo.botname $_component.intent ) ^if 00k( ! $_activity ) 00J{ ^installsubintent ( $_component ) } 004 } 00Z else ( 1 ) 00J { ^installsubintent ( $_component ) } 004 } 004 $_item += 1 } ^if 00i( $_item > 0 ) 00y{ ^clearnodetracking ( ) } 004 `
^getentityvaluefromcontext o 0 0 B( $_entity $_key $_retval ) $_key = ^"context.entities.$_entity" $_retval = ^getvaluefromcontextforkey ( $_key ) ^return ( $_retval ) `
^processif o 0 0 B( $_object $_if $_op $_leftvalue $_response $_testresult $_retnode $_entity $_value ) ^if 00j( $_object.if ) 0eN{ $_if = $_object.if ^if 00c( $_if ) 0e3{ ^if 00u( $_if.op and $_if.value ) 07?{ $_op = $_if.op ^if 00j( $_if.intent ) 00B{ $_leftvalue = $_if.intent } 04t else 00k( $_if.context ) 00&{ $_leftvalue = ^getvaluefromcontextforkey ( $_if.context ) } 03a else 00i( $_if.field ) 00%{ $_leftvalue = ^getentityvaluefromcontext ( $_if.field ) } 01* else 00j( $_if.script ) 01G{ $_response = ^calldialogapi ( $taskinfo.dialogNode condition $_if.script ) $_leftvalue = $_response.value } 004 ^if 00H( $_leftvalue and $_op and $_if.value ) 01!{ $_testresult = ^evaluatecondition ( $_leftvalue $_op $_if.value ) ^if 00k( $_testresult ) 00B{ $_retnode = $_object.then } 004 } 004 } 05F else 00i( $_if.field ) 01@{ $_entity = $_if.field $_value = ^getentityvaluefromcontext ( $_entity ) ^if 00f( $_value ) 00B{ $_retnode = $_object.then } 004 } 03t else 00j( $_if.intent ) 01v{ ^if 00S( $_if.intent == $taskinfo.currentintendedaction ) 00B{ $_retnode = $_object.then } 004 } 01N else 00m( $_if.dialogAct ) 01i{ ^if 00F( ^finddialogact ( $_if.dialogAct ) ) 00B{ $_retnode = $_object.then } 004 } 004 } 004 } 004 ^return ( $_retnode ) `
^processtransition o 0 0 B( $_transition $_retnode ) ^if 00n( $_transition.if ) 00P{ $_retnode = ^processif ( $_transition ) } 016 else 00s( $_transition.default ) 00I{ $_retnode = $_transition.default } 004 ^return ( $_retnode ) `
^processtransitions o 0 0 B( $_object $_transitions $_transitionscount $_index $_transition $_retnode ) $_transitions = $_object.transitions ^if 00l( $_transitions ) 04a{ $_transitionscount = ^length ( $_transitions ) $_index = 0 ^loop ( $_transitionscount ) 02Z { $_transition = $_transitions[$_index] ^if 00k( $_transition ) 01${ $_retnode = ^processtransition ( $_transition ) ^if 00h( $_retnode ) 00p{ ^end ( loop ) } 00E else ( 1 ) 00o { $_index += 1 } 004 } 004 } } 004 ^return ( $_retnode ) `
^getpossibleentities o 0 0 A( $_component $_remapped ) $taskinfo.entityList = ^jsoncreate ( PERMANENT array ) @0 = ^query ( direct_vo ? type entity ) ^loop ( -1 ) 03i { $_component = ^first ( @0subject ) ^if 00F( $_component.componentName != null ) 025{ $_remapped = ^jsoncreate ( PERMANENT object ) $_remapped.title = $_component.componentName ^jsonarrayinsert ( $taskinfo.entityList $_remapped ) } 004 } `
^getuserentityvalue o 0 0 C( $_component $_dialognode $_name $_patterns $_count $_index $_pattern $_metadata $_advancedfields $_values $_fieldobj $_key $_contextvalue $_gleanvalue $_len $_answer $_tmp $_tmpans ) $_name = $_component.componentName $_patterns = ^jsoncreate ( PERMANENT array ) $_count = ^length ( $_component.patterns ) $_index = 0 ^loop ( $_count ) 01E { $_pattern = $_component.patterns[$_index] ^jsonarrayinsert ( PERMANENT $_patterns $_pattern ) $_index += 1 } $_metadata = ^jsoncreate ( transient object ) $_metadata.entityType = ^dialogentitytypetotaskentitytypemapper ( $_component.entityType ) $_metadata.dataType = ^dialoghinttotaskdatatypemapper ( $_dialognode.hint ) $_advancedfields = ^jsoncreate ( transient object ) $_advancedfields.key = $_component.entityType $_advancedfields.format = $_component.format ^if 00D( $_component.entityType == regex ) 00~{ $_advancedfields.format = $_component.regexPattern } 004 $_advancedfields.patterns = $_component.patterns ^nofail ( RULE $_advancedfields.isArray = $_component.isArray ) ^if 00M( $_component.entityType == list_of_values ) 07&{ $_values = $_component.allowedValues.values ^if 00i( ! $_values ) 06i{ ^nofail ( RULE $_values = ^getcontextvalues ( $_component.allowedValues.variable ) ) ^if 00G( $_component.allowedValues.titleKey ) 00={ $_advancedfields.titleKey = $_component.allowedValues.titleKey } 00* else ( 1 ) 00S { $_component.allowedValues.titleKey = title } 004 ^if 00G( $_component.allowedValues.valueKey ) 00={ $_advancedfields.valueKey = $_component.allowedValues.valueKey } 00* else ( 1 ) 00S { $_component.allowedValues.valueKey = value } 004 } 004 $_advancedfields.staticDropDownFields = $_values } 004 $_fieldobj = ^initfieldobject ( $_name $_metadata.entityType $_metadata.dataType $_patterns $_advancedfields ) ^delete ( $_advancedfields ) $_key = $_fieldobj.key $_contextvalue = ^getentityvaluefromcontext ( $_key ) ^if 00G( $_component.entityType == location ) 00-{ $taskinfo.fieldkeys.$_key = $_contextvalue.formatted_address } 00* else ( 1 ) 00S { $taskinfo.fieldkeys.$_key = $_contextvalue } 004 $taskinfo.fieldvalues.$_key = $_contextvalue $_gleanvalue = ^processlonefield ( $_fieldobj $_dialognode ) $_len = ^length ( $_gleanvalue ) ^if 00i( $_len == 0 ) 041{ $_answer = $_contextvalue ^if 00I( $_component.entityType == attachment ) 00Z{ ^nofail ( RULE $_answer = $taskinfo.attachments ) } 029 else ( 1 ) 01^ { ^if 00G( $_component.entityType == location ) 01b{ ^if 00g( $_answer ) 00T{ $_answer.title = $_answer.formatted_address } 004 } 004 } 004 } 09J else 00D( $taskinfo.field.isArray != true ) 04w{ ^if 00K( ^length ( $_gleanvalue[0].value ) == 1 ) 00R{ $_answer = $_gleanvalue[0].value[0].value } 02- else 00J( ^length ( $_gleanvalue[0].value ) > 1 ) 02i{ ^nofail ( RULE ^logif ( $tracefields "^ambiguous values ^jsontree($_gleanvalue[0].value) \n" ) $$ambiguity = true $ambiguousvalues = $_gleanvalue[0].value ) } 004 } 04I else ( 1 ) 04s { $_count = 0 $_tmp = ^jsoncreate ( TRANSIENT array ) ^loop ( $_len ) 01= { ^nofail ( RULE $_tmpans = ^jsonpath ( "[$_count].value[0].value" $_gleanvalue ) ^jsonarrayinsert ( PERMANENT $_tmp $_tmpans ) ) $_count += 1 } ^if 00t( ^length ( $_tmp ) > 0 ) 00s{ $_answer = $_tmp } 00H else ( 1 ) 00r { $_answer = null } 004 } 004 ^return ( $_answer ) `
^checkforsubintents o 0 0 A( $_index $_transitions $_len $_transition $_component $_tmp $_newarray ) $_index = 0 ^notrace ( ^detectwords ( null $$volleysentenceindex ) ^flush_choice ( false ) ) $_transitions = $taskinfo.dialogNode.transitions $_len = ^length ( $_transitions ) ^loop ( $_len ) 04s { $_transition = $_transitions[$_index] ^if 00u( $_transition.if.intent ) 03a{ $_component = ^getcomponentfromintent ( $_transition.if.intent ) ^nofail ( RULE $_tmp = ^createfact ( $_transition.if.intent displaylabel $_index ) ) ^nofail ( RULE $_tmp = ^createfact ( $_index displayvalue $_component ) ) } 004 $_index += 1 } ^if 00q( ! $$matchthreshold ) 00w{ $$matchthreshold = 1 } 004 $$bestscore = 0 $$alternatearray = ^jsoncreate ( TRANSIENT array ) $_newarray = ^jsoncreate ( TRANSIENT array ) ^notrace ( $_newarray = ^findmatchingfields ( true $taskinfo.contextJson.bot 1 $_newarray $$matchthreshold ) ) ^return ( $_newarray ) `
^setalocation o 0 0 B( $_location $_newloc ) $_newloc = ^jsoncreate ( PERMANENT object ) $_newloc.formatted_address = $_location.formatted_address $_newloc.lat = $_location.lat $_newloc.lng = $_location.lng ^if 00o( $_location.title ) 00V{ $_newloc.formatted_address = $_location.title } 004 ^if 00x( $_location.value.latitude ) 00Q{ $_newloc.lat = $_location.value.latitude } 004 ^if 00y( $_location.value.longitude ) 00R{ $_newloc.lng = $_location.value.longitude } 004 ^return ( $_newloc ) `
^setlocation o 0 0 B( $_answer $_len $_count $_locarray $_obj ) ^if 00D( ^jsonkind ( $_answer ) == array ) 03E{ $_len = ^length ( $_answer ) $_count = 0 $_locarray = ^jsoncreate ( PERMANENT array ) ^loop ( $_len ) 01T { $_obj = ^jsonpath ( "[$_count]" $_answer ) ^jsonarrayinsert ( PERMANENT $_locarray ^setalocation ( $_obj ) ) $_count += 1 } $_answer = $_locarray } 00# else ( 1 ) 00N { $_answer = ^setalocation ( $_answer ) } 004 ^return ( $_answer ) `
^setdropdownvalue o 0 0 C( $_component $_value $_valuekey ) ^if 00G( $_component.allowedValues.valueKey ) 02~{ $_valuekey = $_component.allowedValues.valueKey ^if 00q( $_value.$_valueKey ) 00E{ $_value = $_value.$_valueKey } 01c else 00w( $_value.value.$_valueKey ) 00K{ $_value = $_value.value.$_valueKey } 004 } 01! else 00r( $_value.value.value ) 00F{ $_value = $_value.value.value } 00# else 00l( $_value.value ) 00z{ $_value = $_value.value } 004 ^return ( $_value ) `
^setlistofvalues o 0 0 C( $_component $_answer $_len $_count $_listarray $_obj ) ^if 00D( ^jsonkind ( $_answer ) == array ) 03X{ $_len = ^length ( $_answer ) $_count = 0 $_listarray = ^jsoncreate ( PERMANENT array ) ^loop ( $_len ) 01- { $_obj = ^jsonpath ( "[$_count]" $_answer ) ^jsonarrayinsert ( PERMANENT $_listarray ^setdropdownvalue ( $_component $_obj ) ) $_count += 1 } $_answer = $_listarray } 016 else ( 1 ) 00# { $_answer = ^setdropdownvalue ( $_component $_answer ) } 004 ^return ( $_answer ) `
^setentityvalue o 0 0 C( $_component $_answer $_key $_keytoupdate $_object ) $taskinfo.fieldCache = null $_key = $_component.componentName ^if 00T( $_component.entityType == location and $_answer ) 00M{ $_answer = ^setlocation ( $_answer ) } 01X else 00Z( $_component.entityType == list_of_values and $_answer ) 00@{ $_answer = ^setlistofvalues ( $_component $_answer ) } 004 $taskinfo.contextJson.entities.$_key = $_answer $_keytoupdate = ^"context.entities.$_key" ^updatevalueforkeyincontext ( $taskinfo.contextJson.botid $taskinfo.contextIdOnServer $_keytoupdate $_answer ) $taskinfo.fieldkeys.$_key = null $taskinfo.fieldvalues.$_key = null $_object = ^jsoncreate ( PERMANENT object ) $_object.$_key = $_answer ^jsonarrayinsert ( PERMANENT $taskinfo.fields $_object ) $displayglean = null ^return ( $_answer ) `
^doafield o 0 0 C( $_component $_interactive $_entityfieldvalue ) $taskinfo.fieldCache = ^jsoncreate ( PERMANENT array ) ^nofail ( RULE ^createbasicfield ( $botinfo.botname $taskinfo.currentintendedaction $_component.componentName $_component.patterns $taskinfo.fieldCache ) ^addfieldsynonyms ( $botinfo.botname $taskinfo.currentintendedaction $_component.synonyms $_component.componentName $taskinfo.fieldCache ) ) $_entityfieldvalue = ^getuserentityvalue ( $_component null ) ^if 00Q( $_entityfieldvalue and ! $$testingrejoinders ) 018{ $_entityfieldvalue = ^setentityvalue ( $_component $_entityfieldvalue ) } 00? else 00n( ! $_interactive ) 00D{ $taskinfo.fieldCache = null } 004 ^return ( $_entityfieldvalue ) `
^preparefordialogexecution o 0 0 B( $_dialogid $_root $_id $_components $_count $_index $_component $_entityfieldvalue ) ^logif ( $controlflow "^DIALOG: starting dialog $_dialogid \n" ) ^if 00v( ! $taskinfo.contextJson ) 00^{ $taskinfo.contextJson = ^jsoncreate ( PERMANENT object ) } 004 $taskinfo.contextJson.bot = $botinfo.botname $taskinfo.contextJson.botid = $botinfo.botid $taskinfo.contextJson.taskid = $_dialogid $taskinfo.contextJson.intent = $taskinfo.currentintendedaction $taskinfo.contextJson.intentType = dialog ^if 00E( ! $taskinfo.contextJson.entities ) 012{ $taskinfo.contextJson.entities = ^jsoncreate ( PERMANENT object ) } 004 $taskinfo.contextJson.history = ^jsoncreate ( PERMANENT array ) ^if 00B( ! $taskinfo.contextIdOnServer ) 01H{ $taskinfo.contextIdOnServer = ^createcontextonserver ( $taskinfo.contextJson.botid $taskinfo.contextJson ) } 004 $taskinfo.fields = ^jsoncreate ( PERMANENT array ) ^markused ( $taskinfo.contextJson.bot $taskinfo.contextJson.intent ) ^if 00u( ! $taskinfo.dialogTree ) 08+{ $taskinfo.dialogTree = ^fetchdialoggraph ( $taskinfo.contextJson.botid $taskinfo.contextJson.taskid ) $_root = $taskinfo.dialogTree.nodes[0] ^logif ( $controlflow "^DIALOG: root node is $_root.componentRef \($_root.nodeId\) \n" ) ^updatenodestate ( $_root processed ) $_id = $_root.transitions[0].then ^if 00e( ! $_id ) 00M{ $_id = $_root.transitions[0].default } 004 $_components = $taskinfo.dialogTree.components $_count = ^length ( $_components ) $_index = 0 ^loop ( $_count ) 028 { $_component = $_components[$_index] $_index += 1 ^if 00y( $_component.type == entity ) 00!{ $_entityfieldvalue = ^doafield ( $_component null ) } 004 } ^ignorepriorvolleys ( ) } 004 ^return ( $_id ) `
^preparecontextmap o 0 0 A( $_contextmap $_object $_newkey $_oldkey $_oldkey1 $_oldvalue ) $_contextmap = ^jsoncreate ( PERMANENT object ) ^nofail ( RULE @10 = ^query ( exact_s $taskinfo.dialogNode.contextMap ? ? ) ) ^loop ( -1 ) 05i { $_object = ^first ( @10fact ) $_newkey = $_object.verb $_oldkey = $_object.object _15 = ^burst ( once $_oldkey "." ) $_oldkey1 = _16 ^nofail ( RULE $_oldvalue = null $_oldvalue = ^jsonpath ( "^.$_oldkey1" $taskinfo.contextJson ) ) $_oldvalue = ^getvaluefromcontextforkey ( $_oldkey ) ^if 00v( $_newkey and $_oldvalue ) 00${ ^jsonobjectinsert ( $_contextmap $_newkey $_oldvalue ) } 004 } ^return ( $_contextmap ) `
^addcontextmapvaluestocontext o 0 0 B( $_contextmap $_object $_key $_value $_newobject $_count $_index $_object1 $_newkey ) ^nofail ( RULE @10 = ^query ( exact_s $_contextmap ? ? ) ) ^loop ( -1 ) 09m { $_object = ^first ( @10fact ) $_key = $_object.verb $_value = $_object.object $_newobject = $taskinfo.contextJson @19 = ^burst ( $_key "." ) $_count = ^length ( @19 ) $_index = 1 ^loop ( -1 ) 05w { $_object1 = ^first ( @19fact ) $_newkey = $_object1.subject ^if 00r( $_newkey == context ) 00L{ $_newobject = $taskinfo.contextJson } 03r else 00s( $_newkey == entities ) 00U{ $_newobject = $taskinfo.contextJson.entities } 02d else 00S( $_newobject and $_newkey and $_index < $_count ) 01p{ ^if 00r( $_newkey != context ) 00W{ $_newobject = ^join ( $_newobject . $_newkey ) } 004 } 004 $_index += 1 } ^if 00I( $_newobject and $_newkey and $_value ) 00G{ $_newobject.$_newKey = $_value } 004 } `
^switchdialog o 0 0 A( $_contextmap $_dlgid $_botid $_botname $_intent ) ^if 00D( $taskinfo.dialogNode.contextMap ) 00N{ $_contextmap = ^preparecontextmap ( ) } 00r else ( 1 ) 00b { } 004 $_dlgid = $taskinfo.dialogNode.flowTaskId $_botid = $taskinfo.dialogNode.streamId ^if 00h( ! $_botid ) 00N{ $_botid = $taskinfo.contextJson.botid } 004 $_botname = ^getbotnamefromid ( $_botid ) $_intent = $taskinfo.component.intent $taskinfo.currentintendedaction = $taskinfo.contextJson.intent ^if 00K( $taskinfo.contextJson.subIntentsNodeId ) 01b{ $taskinfo.dialogNode = ^getnode ( $taskinfo.contextJson.subIntentsNodeId ) } 004 $taskinfo.component = ^getcomponent ( $taskinfo.dialogNode ) $taskinfo.doTransitions = 1 $taskinfo.flowTaskIdStatus = null ^updatenodestate ( $taskinfo.dialogNode paused ) ^notrace ( ^push_action ( ) ) ^createbotinfo ( $_botid $_botname ) $botinfo.action = ~dialogmgr $taskinfo = ^jsoncreate ( PERMANENT object ) $taskinfo.fieldkeys = ^jsoncreate ( PERMANENT object ) $taskinfo.fieldvalues = ^jsoncreate ( PERMANENT object ) $taskinfo.currentintendedaction = $_intent $taskinfo.dialogId = $_dlgid $taskinfo.skipoptional = $skipoptional $taskinfo.contextJson = ^jsoncreate ( PERMANENT object ) $taskinfo.contextJson.mappedDialog = true $taskinfo.contextJson.mappedDialogAddedBy = ^"KORA" $taskinfo.contextJson.entities = ^jsoncreate ( PERMANENT object ) ^if 00k( $_contextmap ) 00W{ ^addcontextmapvaluestocontext ( $_contextmap ) } 004 ^if 01k( $$oob.attachments and ^length ( $$oob.attachments ) > 0 and $$oob.attachments[0].fileId ) 00R{ $taskinfo.attachments = $$oob.attachments } 004 `
^prepareformappedaction o 0 0 C( $_mappedcontextid $_mappednodeid $_nodeoptions $_pushed $_botid $_keysarray $_retval $_len $_index $_item $_key $_value $_name $_root $_id ) ^logif ( $controlflow "^DIALOG: mapping dialog for context $_mappedcontextid \n" ) ^if 00*( $taskinfo and $taskinfo.contextIdOnServer != $_mappedcontextid ) 05x{ $_nodeoptions = $taskinfo.dialogNode.nodeOptions ^if 00L( $_nodeoptions.transitionType == onInput ) 00t{ ^reset_intent ( ) } 03L else ( 1 ) 03v { ^clearnodetracking ( ) $$priorglean = ^jsoncopy ( transient $gleaninfo ) $$volleyglean = ^generate_gleaninfo ( TRANSIENT ) $$priorinput = $recordedinput ^updatenodestate ( $taskinfo.dialogNode paused ) ^notrace ( ^push_action ( ) ) $_pushed = 1 } 004 } 004 ^if 00j( ! $taskinfo ) 041{ $taskinfo = ^jsoncreate ( PERMANENT object ) $taskinfo.fields = ^jsoncreate ( PERMANENT array ) $taskinfo.fieldkeys = ^jsoncreate ( PERMANENT object ) $taskinfo.fieldvalues = ^jsoncreate ( PERMANENT object ) ^if 00k( ! $gleaninfo ) 00W{ $gleaninfo = ^generate_gleaninfo ( PERMANENT ) } 004 } 004 ^if 00B( ! $taskinfo.contextIdOnServer ) 00X{ $taskinfo.contextIdOnServer = $_mappedcontextid } 004 ^if 00!( $taskinfo.contextIdOnServer and ! $taskinfo.contextJson ) 0k?{ ^if 00g( $botinfo ) 00A{ $_botid = $botinfo.botid } 00# else 00l( $nonkorabotid ) 00z{ $_botid = $nonkorabotid } 004 ^if 00f( $_botid ) 0i={ $_keysarray = ^jsoncreate ( TRANSIENT array ) ^jsonarrayinsert ( TRANSIENT $_keysarray "^context.bot" ) ^jsonarrayinsert ( TRANSIENT $_keysarray "^context.botid" ) ^jsonarrayinsert ( TRANSIENT $_keysarray "^context.taskid" ) ^jsonarrayinsert ( TRANSIENT $_keysarray "^context.intent" ) ^jsonarrayinsert ( TRANSIENT $_keysarray "^context.intentType" ) ^jsonarrayinsert ( TRANSIENT $_keysarray "^context.entities" ) ^jsonarrayinsert ( TRANSIENT $_keysarray "^context.history" ) ^jsonarrayinsert ( TRANSIENT $_keysarray "^context.mappedDialog" ) ^jsonarrayinsert ( TRANSIENT $_keysarray "^context.mappedDialogAddedBy" ) ^jsonarrayinsert ( TRANSIENT $_keysarray "^context.mappedNodeId" ) ^jsonarrayinsert ( TRANSIENT $_keysarray "^context.subIntentsNodeId" ) $_retval = ^getvaluesforkeysfromcontext ( $_botid $taskinfo.contextIdOnServer $_keysarray ) ^if 00g( $_retval ) 07l{ $taskinfo.contextJson = ^jsoncreate ( PERMANENT object ) $_len = ^length ( $_retval ) $_index = 0 ^loop ( $_len ) 043 { $_item = ^nth ( $_retval $_index ) $_key = $_item.verb $_value = $_item.object $_name = ^extract ( $_key 8 999 ) ^if 00t( ^jsonkind ( $_value ) ) 00={ $taskinfo.contextJson.$_name = ^jsoncopy ( PERMANENT $_value ) } 00$ else ( 1 ) 00O { $taskinfo.contextJson.$_name = $_value } 004 $_index += 1 } ^if 00D( ! $taskinfo.contextJson.history ) 010{ $taskinfo.contextJson.history = ^jsoncreate ( PERMANENT array ) } 004 } 004 } 004 } 004 ^if 01m( ! $taskinfo.contextIdOnServer or ! $taskinfo.contextJson or ! $taskinfo.contextJson.botid ) 01d{ ^if 00g( $_pushed ) 00G{ ^pop_action ( true null null ) } 004 ^fail ( CALL ) } 004 ^createbotinfo ( $taskinfo.contextJson.botid $taskinfo.contextJson.bot ) $botinfo.action = ~dialogmgr ^if 00u( ! $taskinfo.dialogTree ) 02d{ $taskinfo.dialogId = $taskinfo.contextJson.taskid $taskinfo.dialogTree = ^fetchdialoggraph ( $taskinfo.contextJson.botid $taskinfo.contextJson.taskid ) } 004 ^if 00u( ! $taskinfo.dialogNode ) 0aY{ ^if 00K( $taskinfo.contextJson.subIntentsNodeId ) 022{ $taskinfo.onEndDialogMoveToNode = ^getnode ( $taskinfo.contextJson.subIntentsNodeId ) $taskinfo.dialogNode = $taskinfo.onEndDialogMoveToNode } 004 ^if 00m( $_mappednodeid ) 00~{ $taskinfo.dialogNode = ^getnode ( $_mappednodeid ) } 02S else ( 1 ) 02C { $_root = $taskinfo.dialogTree.nodes[0] $_id = $_root.transitions[0].then ^if 00e( ! $_id ) 00M{ $_id = $_root.transitions[0].default } 004 ^updatenodestate ( $_root processed ) } 004 ^if 00s( $taskinfo.dialogNode ) 03Q{ ^tracknode ( $taskinfo.dialogNode processing ) $taskinfo.component = ^getcomponent ( $taskinfo.dialogNode ) ^logif ( $controlflow "^DIALOG: mapped node is $taskinfo.dialogNode.componentRef \($taskinfo.dialogNode.nodeId\) in dialog $taskinfo.contextJson.taskid \n" ) } 004 } 004 `
^setmatchposition o 0 0 A( $_start $_end ) ^if 00a( _0 ) 025{ $_start = ^position ( START _0 ) $_end = ^position ( END _0 ) ^return ( ^getpositionfromsentenceandrange ( $currentsentenceid $_start $_end ) ) } 00I else ( 1 ) 00s { ^return ( null ) } 004 `
^getmatchposition o 0 0 B( $_pattern $_result ) _0 = null $_result = ^result ( ^match ( $_pattern ) ) ^if 00A( $_result == NOPROBLEM and _0 ) 00x{ ^setmatchposition ( ) } 00I else ( 1 ) 00s { ^return ( null ) } 004 `
^getmeasureunit o 0 0 A( $_unit $_position $_value ) $_unit = null $_position = ^getmatchposition ( "( _~measureUnits )" ) ^if 00i( $_position ) 01R{ $_value = _0 $_unit = ^jsoncreate ( object ) $_unit.position = $_position $_unit.value = ^jsonparse ( ^'[$_value]' ) } 004 ^return ( $_unit ) `
^getmeasurecount o 0 0 A( $_partpos $_partval $_numberpos $_numberval $_value $_start $_end $_position $_count ) $_partpos = ^getmatchposition ( "( _~numberParts )" ) $_partval = _0 $_numberpos = ^getmatchposition ( "( _~number _0!?~numberParts )" ) $_numberval = _0 $_value = null ^if 00j( $_numberpos ) 0du{ ^if 00h( $_partpos ) 0c3{ ^if 00v( $_partpos < $_numberpos ) 033{ $_start = ^getstartindexfromposition ( $_partpos ) $_end = ^getendindexfromposition ( $_numberpos ) $_position = ^getpositionfromsentenceandrange ( $currentsentenceid $_start $_end ) $_value = $_partval * $_numberval } 08x else ( 1 ) 08h { $_start = ^getstartindexfromposition ( $_partpos ) $_end = ^getendindexfromposition ( $_numberpos ) $_end += 1 ^if 00n( $_start = $_end ) 033{ $_start = ^getstartindexfromposition ( $_numberpos ) $_end = ^getendindexfromposition ( $_partpos ) $_position = ^getpositionfromsentenceandrange ( $currentsentenceid $_start $_end ) $_value = $_partval * $_numberval } 03j else ( 1 ) 033 { $_start = ^getstartindexfromposition ( $_numberpos ) $_end = ^getendindexfromposition ( $_partpos ) $_position = ^getpositionfromsentenceandrange ( $currentsentenceid $_start $_end ) $_value = $_partval + $_numberval } 004 } 004 } 00= else ( 1 ) 00W { $_position = $_numberpos $_value = $_numberval } 004 } 015 else 00h( $_partpos ) 00S{ $_position = $_partpos $_value = $_partval } 004 $_count = null ^if 00f( $_value ) 01H{ $_count = ^jsoncreate ( object ) $_count.position = $_position $_count.value = ^jsonparse ( ^'[$_value]' ) } 004 ^return ( $_count ) `
^getproductmeasure o 0 0 A( $_valuearray $_quant $_index $_unit $_measure ) $_valuearray = ^jsoncreate ( permanent array ) ^loop ( -1 ) 06Q { $_quant = ^getmeasurecount ( ) ^if 00f( $_quant ) 01u{ $_index = ^getendindexfromposition ( $_quant.position ) ^maskindirection ( $_index backward ) } 004 $_unit = ^getmeasureunit ( ) ^if 00e( $_unit ) 01t{ $_index = ^getendindexfromposition ( $_unit.position ) ^maskindirection ( $_index backward ) } 004 ^if 00u( ! $_quant and ! $_unit ) 00p{ ^end ( loop ) } 004 $_measure = ^jsoncreate ( object ) $_measure.count = $_quant $_measure.name = $_unit ^jsonarrayinsert ( $_valuearray $_measure ) } ^return ( $_valuearray ) `
^getpackagename o 0 0 A( $_packname $_position $_value ) $_packname = null $_position = ^getmatchposition ( "( _~packing )" ) ^if 00i( $_position ) 01#{ $_value = _0 $_packname = ^jsoncreate ( object ) $_packname.position = $_position $_packname.value = ^jsonparse ( ^'[$_value]' ) } 004 ^return ( $_packname ) `
^getpackagecount o 0 0 A( $_packcount $_position $_value ) $_packcount = null $_position = ^getmatchposition ( "( _~integer )" ) ^if 00i( $_position ) 01^{ $_value = _0 $_packcount = ^jsoncreate ( object ) $_packcount.position = $_position $_packcount.value = ^jsonparse ( ^'[$_value]' ) } 004 ^return ( $_packcount ) `
^getproductpackage o 0 0 A( $_productpackage $_packname $_index $_packcount ) $_productpackage = null $_packname = ^getpackagename ( ) ^if 00i( $_packname ) 01y{ $_index = ^getstartindexfromposition ( $_packname.position ) ^maskindirection ( $_index forward ) } 004 $_packcount = ^getpackagecount ( ) ^if 00j( $_packcount ) 01y{ $_index = ^getendindexfromposition ( $_packcount.position ) ^maskindirection ( $_index backward ) } 004 ^if 00x( $_packname or $_packcount ) 01O{ $_productpackage = ^jsoncreate ( object ) $_productpackage.name = $_packname $_productpackage.count = $_packcount } 004 ^return ( $_productpackage ) `
^getproductname o 0 0 A( $_productname $_location $_position $_namearray $_length $_valuearray $_count $_name ) $_productname = null $_location = ^get_location ( ) ^if 00a( _0 ) 06C{ $_position = ^setmatchposition ( ) $_namearray = ^get_coordinates ( $_location ) $_length = ^length ( $_namearray ) $_valuearray = ^jsoncreate ( array ) $_count = 0 ^loop ( $_length ) 02x { $_location = $_namearray[$_count] ^if 00k( ! $_location ) 00p{ ^end ( loop ) } 004 $_name = $_location.formatted_address ^jsonarrayinsert ( $_valuearray $_name ) $_count += 1 } $_productname = ^jsoncreate ( object ) $_productname.position = $_position $_productname.value = $_valuearray } 004 ^return ( $_productname ) `
^getproduct o 0 0 A( $_product $_name $_index $_package $_measure ) $_product = null $_name = ^getproductname ( ) ^if 00e( $_name ) 044{ $_index = ^getstartindexfromposition ( $_name.position ) ^maskindirection ( $_index forward ) $_package = ^getproductpackage ( ) $_measure = ^getproductmeasure ( ) ^mark ( ) $_product = ^jsoncreate ( object ) $_product.name = $_name $_product.package = $_package $_product.measure = $_measure } 004 ^logif ( $tracefields "^ ProductParser:  ^jsontree($_product) \n" ) ^return ( $_product ) `
^findfieldnamedata o 0 0 F( ^fieldname ^sentenceid ^sentence ^size ^final $$name $$fieldvalue $$sentenceid $$wordposition ) $$sentenceid = ^1 $$name = ^0 $$fieldvalue = null ^if 00r( pattern _ =8$$name? ) 05m{ $$wordposition = ^nextwordposition ( $$name ^1 ) ^if 00^( ^iswordavailableinsentence ( $$name ^1 $$wordposition true ) ) 03E{ ^setposition ( _0 $$wordposition $$wordposition ) _10 = _0 ^respond ( ~findfielddata ) ^if 00r( $$fieldvalue and ^4 ) 01A{ $$start = ^position ( start _10 ) $$end = ^position ( end _10 ) ^markusedrange ( ^1 $$start $$end ) } 004 ^return ( $$fieldvalue ) } 004 } 004 ^return ( ) `
^finishnamedmatch o 0 0 B( ^sentenceid $$start $$end $$matchstart $$matchend $$length $$tmp0 $$tmp1 $_tmp0 $_tmp1 $_firstchar $_length $_pos ) ^if 00a( _0 ) 0eQ{ $$start = ^position ( start _10 ) $$end = ^position ( end _10 ) $$matchstart = ^position ( start _0 ) $$matchend = ^position ( end _0 ) ^if 00j( $$ignoreend ) 00b{ } 02k else 00b( _10 ) 020{ ^if 01z( ! ^iswordavailableinsentence ( x ^0 $$start true ) or ! ^iswordavailableinsentence ( x ^0 $$end true ) ) 00p{ ^end ( CALL ) } 004 } 004 ^if 01J( ! ^iswordavailableinsentence ( x ^0 $$matchstart true ) or ! ^iswordavailableinsentence ( x ^0 $$matchend true ) ) 00p{ ^end ( CALL ) } 004 ^if 00k( $$start == 0 ) 00R{ $$start = $$matchstart $$end = $$matchend } 01X else 00u( $$matchstart < $$start ) 00y{ $$start = $$matchstart } 00# else 00q( $$matchend > $$end ) 00u{ $$end = $$matchend } 004 ^setposition ( _10 $$start $$end ) $$fieldvalue = ^original ( _0 ) $_tmp0 = ^"'" $_tmp1 = ^"\"" $_firstchar = ^extract ( $$fieldvalue 0 1 ) ^if 00S( $_firstchar == $_tmp0 or $_firstchar == $_tmp1 ) 02A{ ^if 00S( ^extract ( $$fieldvalue -1 +1 ) == $_firstchar ) 01G{ $_length = ^length ( $$fieldvalue ) $_pos = $_length - 1 $$fieldvalue = ^extract ( $$fieldvalue 1 $_pos ) } 004 } 004 ^end ( TOPIC ) } 004 ^end ( CALL ) `
^findfieldnamedefault o 0 0 B( ^fieldname $$instanceurl $$tmp $$current $$fieldkey $$fieldvalue $$limit ) $$instanceurl = ^"$protocol://$server/market/orders/$taskinfo.botorderid/instances/$taskinfo.taskinstanceid/getAlertNameInfo" $$tmp = ^invoke_json ( transient get $$instanceurl null "^to set static fields in alert" findfieldnameDefault ) $$limit = ^length ( $$tmp ) $$current = 0 ^loop ( -1 ) 03v { ^if 00s( $$current == $$limit ) 00p{ ^end ( LOOP ) } 004 $$fieldkey = ^jsonpath ( "[$$current].key" $$tmp ) $$fieldvalue = ^jsonpath ( "[$$current].placeholder" $$tmp ) ^if 00o( $$fieldkey == ^0 ) 00A{ ^return ( $$fieldvalue ) } 004 $$current += 1 } `
^findthisname o 0 0 D( ^lcbotname ^concept ^where $$sentenceindex $$endindex $$startindex $$fieldvalue ) @10 = ^query ( direct_sv $gleaninfo.fieldread ^1 ? ) ^loop ( -1 ) 0dE { $$where = ^last ( @10object ) $$sentenceindex = ^getsentenceindexfromposition ( $$where ) $$startindex = ^getstartindexfromposition ( $$where ) $$endindex = ^getendindexfromposition ( $$where ) ^if 00a( ^2 ) 04q{ $$sentenceindex_check = ^getsentenceindexfromposition ( ^2 ) $$startindex_check = ^getwordindexfromposition ( ^2 ) $$endindex_check = ^getwordindexfromposition ( ^2 ) ^if 01H( $$sentenceindex_check != $$sentenceindex or $$startindex_check > $$endindex or $$endindex_check < $$startindex ) 00q{ ^next ( LOOP ) } 004 } 004 ^if 019( ! ^2 and ! ^iswordavailableinsentence ( ^1 $$sentenceindex $$endindex true ) ) 00q{ ^next ( LOOP ) } 004 ^restoregleansentence ( $$sentenceindex ) ^setposition ( _10 $$startindex $$endindex ) $$sentenceid = $$sentenceindex $$fieldvalue = null ^respond ( ~findfielddata ) ^if 00k( $$fieldvalue ) 01&{ $$startindex = ^position ( START _10 ) $$endindex = ^position ( END _10 ) ^markusedrange ( $$sentenceindex $$startindex $$endindex ) } 004 ^return ( $$fieldvalue ) } ^return ( NULL ) `
^getfieldkind o 0 0 B( ^fieldref $$kind $$metadata ) $$kind = ^getfieldfieldtype ( $taskinfo.field ) $$type = ^getfieldtype ( $taskinfo.field ) $$metadata = ^getfieldmetadata ( $taskinfo.field ) ^nofail ( RULE $$x = null $$x = ^extract ( $$metadata 0 4 ) ) ^if 00s( $$kind == nestedform ) 00b{ } 0e0 else 00A( $$metadata == "Phone Number" ) 00y{ $$kind = csphonenumber } 0d0 else 00u( $$metadata == "Number" ) 01g{ ^if 00L( $$kind == textbox or $$kind == textarea ) 00t{ $$kind = csnumber } 004 } 0bo else 00z( $$metadata == "Person Name" ) 01j{ ^if 00L( $$kind == textbox or $$kind == textarea ) 00w{ $$kind = cshumanname } 004 } 09E else 00U( $$metadata == "Company name / Organisation name" ) 01h{ ^if 00L( $$kind == textbox or $$kind == textarea ) 00u{ $$kind = cscompany } 004 } 07B else 00B( $$metadata == "Email Address" ) 01f{ ^if 00L( $$kind == textbox or $$kind == textarea ) 00s{ $$kind = csemail } 004 } 05T else 00y( $$metadata == "Percentage" ) 00u{ $$kind = cspercent } 04Z else 00t( $$metadata == "@name" ) 00y{ $$kind = cstwittername } 03^ else 00w( $$metadata == "Currency" ) 00v{ $$kind = cscurrency } 030 else 00v( $$metadata == "Message" ) 00v{ $$kind = cssentence } 028 else 00A( $$metadata == itemBeforeMove ) 00x{ $$kind = csitembefore } 019 else 00D( $$metadata == locationAfterMove ) 00A{ $$kind = cslocationafter } 004 ^return ( $$kind ) `
^findfieldpatternmatches o 0 0 B( ^concept $$mask $$junk $$name $$concept $$patterns $$counter ) $$patterns = ^query ( exact_sv ^0 fieldpattern ? 1 ? @0object ) ^if 00z( ^length ( $$patterns ) == 0 ) 00q{ ^fail ( CALL ) } 004 $$limit = ^length ( $gleaninfo.sentences ) $$sentenceindex = 0 ^loop ( $$limit ) 08q { ^restoregleansentence ( $$sentenceindex ) $$counter1 = 0 ^loop ( -1 ) 072 { ^query ( exact_sv $$patterns $$counter1 ? 1 ? @0 ) $$counter1 += 1 ^if 00y( ^match ( @0object ) and _0 ) 05D{ $$value = ^original ( _0 ) $$start = ^position ( START _0 ) $$end = ^position ( END _0 ) $$tmp = ^getpositionfromsentenceandrange ( $$sentenceindex $$start $$end ) ^if 01*( ^iswordavailableinsentence ( $$value $$sentenceindex $$start true ) and ^iswordavailableinsentence ( $$value $$sentenceindex $$end true ) ) 01f{ $$tmp = ^createfact ( fieldpattern $$tmp $$value FACTTRANSIENT ) ^end ( CALL ) } 004 } 004 } $$sentenceindex += 1 } `
^gleanafter o 0 0 B( ^kind $$sentence $$fieldtype $$fieldvalue ) $$fieldtype = ^0 $$sentenceindex = ^length ( $gleaninfo.sentences ) ^loop ( $$sentenceindex ) 04O { $$sentenceindex -= 1 ^restoregleansentence ( $$sentenceindex ) $$sentenceid = $$sentenceindex _0 = null $$fieldvalue = null ^respond ( ~gleanafter ) ^if 00k( $$fieldvalue ) 02j{ $$startindex = ^position ( START _10 ) $$endindex = ^position ( END _10 ) ^markusedrange ( $$sentenceindex $$startindex $$endindex ) ^return ( $$fieldvalue ) } 004 } ^return ( NULL ) `
^findfieldnameininput o 0 0 C( ^fieldname ^fieldref $$lastword $$fieldvalue $$tmp $$lcbotname $$fieldkind $$concept $_word $_posn ) ^if 00q( $taskinfo.amending ) 00s{ ^return ( null ) } 004 $$fieldkind = ^getfieldkind ( ^1 ) ^if 00c( ! ^1 ) 00x{ $$fieldkind = textbox } 004 $$lcbotname = ^pos ( lowercase $botname ) $$concept = ^join ( ~ bot- $$lcbotname -task- $taskinfo.currentintendedaction - field - ^0 ) $$concept = ^pos ( lowercase $$concept ) $$fieldvalue = ^findthisname ( $$lcbotname $$concept null ) ^if 00k( $$fieldvalue ) 00A{ ^return ( $$fieldvalue ) } 004 _0 = ^burst ( ^0 " " ) $$tmp1 = null ^if 00a( _1 ) 00n{ $$tmp1 = _1 } 004 $$tmp = _0 ^if 01K( ^pos ( lowercase $taskinfo.activitylastword ) == $$tmp or ^pos ( lowercase $taskinfo.activitylastword ) == $$tmp1 ) 02u{ $$ignoreend = true $$fieldvalue = ^findthisname ( $$lcbotname $$concept $taskinfo.activitylastwordposition ) ^if 00k( $$fieldvalue ) 00A{ ^return ( $$fieldvalue ) } 004 } 004 $$fieldvalue = ^gleanafter ( $$fieldkind ) ^if 00k( $$fieldvalue ) 00A{ ^return ( $$fieldvalue ) } 004 ^if 00K( ^findfieldpatternmatches ( $$concept ) ) 063{ @1 = ^query ( direct_s fieldpattern ? ? 1 ) $$fieldvalue = @1object $$position = @1verb ^loop ( -1 ) 03q { $_word = @1object $_posn = ^first ( @1verb ) ^if 00A( ^isignorereadword ( $_word ) ) 00q{ ^next ( LOOP ) } 004 ^if 00G( ^iswordavailable ( $_word $_posn ) ) 00H{ $$avail = 1 $$old_posn = $_posn } 00L else ( 1 ) 00v { $$fieldvalue = null } 004 } ^nofail ( RULE ^delete ( @1 ) ) ^markusedposition ( $$old_posn ) ^return ( $$fieldvalue ) } 004 ^return ( null ) `
^showintentfoundmsgandeditlink o 0 0 A( ) $$tmpmsg = null ^if 00s( ! $taskinfo.amending ) 09C{ ^if 00E( $botinfo.action == ~generic_task ) 00B{ $$oob.generateLink = true } 004 $$oob.resourceId = $taskinfo.taskid $$oob.orderId = $taskinfo.botorderid $$oob.instanceId = $taskinfo.taskinstanceid $$oob.streamId = $botinfo.botid $taskinfo.formLink = true ^if 00v( ! $taskinfo.iseemessage ) 05A{ ^if 00s( $$doingmultipletasks ) 023{ $$tmpmsg = ^messagemap ( "^Now, let me help you with <task-name> from <bot-name>" "^Now, let me help you with <task-name> from <bot-name>." ) } 02h else ( 1 ) 021 { $$tmpmsg = ^messagemap ( "^I see, you have selected <task-name> from <bot-name>" "^I see, you have selected <task-name> from <bot-name>." ) } 004 $$tmpmsg = ^"$$tmpMsg \n" $taskinfo.iseemessage = 1 } 004 } 004 ^return ( $$tmpmsg ) `
^showfieldmessage o 0 0 C( ^msg ^show ) $$tmpmsg = null $$tmpmsg2 = null ^if 00R( ! $nestedformfield and ! $taskinfo.confirming ) 00V{ $$tmpmsg = ^showintentfoundmsgandeditlink ( ) } 004 ^if 00s( ! $taskinfo.required ) 03i{ ^if 00x( $taskinfo.optionalmessage ) 01j{ $$tmpmsg2 = ^messagemap ( "^This field is optional " "^This field is optional. " ) } 004 $taskinfo.optionalmessage = 1 $nullinputpossibleasskip = %input + 1 $$tmpmsg = ^"$$tmpMsg $$tmpMsg2" } 004 ^if 00j( ^1 != false ) 00q{ $$tmpmsg2 = ^0 } 004 $$tmpmsg = ^"$$tmpMsg $$tmpMsg2" ^sendstatementsummary ( $$tmpmsg ) $$askfield = true ^return ( $$tmpmsg ) `
^sharecontext o 0 0 D( ^message ^fieldname ^kind $$count $$type $$title $$fieldtype ) $$fieldtype = ^getfieldfieldtype ( $taskinfo.field ) $$type = ^getfieldtype ( $taskinfo.field ) $$title = ^getfieldtitle ( $taskinfo.field ) $$metadata = ^getfieldmetadata ( $taskinfo.field ) ^if 00i( $$metadata ) 00v{ $$type = $$metadata } 004 ^if 00s( ! $taskinfo.amending ) 04p{ $sharevalue = ^findmatchingdatabyfieldname ( $$title ) ^if 00l( ! $sharevalue ) 00Y{ $sharevalue = ^findmatchingdatabykind ( $$type ) } 004 ^if 00j( $sharevalue ) 021{ $taskinfo.justselectedaction = null $sharecallback = ^getrule ( tag ~ ) $message = $$msg ^reuse ( ~generic_fields.sharecontextinteraction ) } 004 } 004 ^if 01%( $$fieldtype == dynamicDropDown or $$fieldtype == dynamicDropDownCB or $$fieldtype == staticDropDown or $$fieldtype == staticDropDownCB ) 00C{ ^reuse ( DROPDOWNCHOICES ) } 04y else ( 1 ) 04i { ^if 00W( $$metadata == Message or $$metadata == Description ) 01S{ $$new_token = 1 | 8796093022208 | 2199023255552 | 1048576 | 4096 | 1099511627776 | 1024 | 2048 | 24576 | 549755813888 } 004 $$fieldprompt = $$msg ^addtokenvaluetokeyvalueobject ( "<field-prompt>" $$fieldprompt ) ^showfieldmessage ( $$msg ) } 004 `
^useorshow o 0 0 B( ^glean $k-novalue $$fact $$name $$bb $$postgleanvalue $$meta $_meta ) ^debug ( ) ^if 00B( '^0 == '$k-date and ! $k-date ) 06J{ $$dateformat = ^getdateformat ( $taskinfo.field ) ^if 00m( ! $$dateformat ) 00B{ $$dateformat = yyyy-MM-dd } 004 $k-date = ^get_date ( $$dateformat ) ^if 00F( $$error_in_date and ! $$blockuser ) 01P{ $$msg = ^messagemap ( "^You gave an invalid date" "^You gave an invalid date, though. Please give a valid date." ) } 004 ^if 00R( $$ambiguity_in_date == true and ! $$blockuser ) 01v{ ^markusedrange ( $currentsentenceid $$datestart $$dateend ) ^reuse ( AMBIGUITY ) ^end ( call ) } 004 } 004 ^if 00P( '^0 == '$k-location and $k-location != null ) 03S{ $$bb = ^"Weather Underground" $$herebotname = ^"Here" $$meta = ^getfieldmetadata ( $taskinfo.field ) ^if 01g( $botname == $$bb or $botname == $$herebotname or $$meta == "City with co-ordinates" ) 00-{ _0 = $k-location $k-location = null ^reuse ( FOUNDLOCATION ) } 004 } 0j0 else 00P( '^0 == '$k-datetime and $k-datetime != null ) 021{ $datetime = $k-datetime ^if 00A( ^length ( $k-datetime ) < 11 ) 00r{ ^reuse ( TIME ) } 00R else ( 1 ) 00B { ^reuse ( FINISHDATETIME ) } 004 } 0gi else 00a( ^0 ) 00B{ ^acceptvalue ( $xkey ^0 ) } 0fF else ( 1 ) 0fp { $$postgleanvalue = ^findfieldnameininput ( $$keyname $taskinfo.field ) $$defaultvalue = ^finddefaultvalue ( $taskinfo.field ) ^if 00o( $$postgleanvalue ) 03o{ $_meta = ^getfieldmetadata ( $taskinfo.field ) ^if 00$( '^0 == '$k-location and $_meta == "City with co-ordinates" ) 00W{ _0 = $$postgleanvalue ^reuse ( FOUNDLOCATION ) } 00% else ( 1 ) 00P { ^acceptvalue ( $xkey $$postgleanvalue ) } 004 } 09# else 00B( '^0 == '$k-label and $k-human ) 00H{ ^acceptvalue ( $xkey $k-human ) } 08T else 00K( '^0 == '$k-human or '^0 == '$k-company ) 03m{ ^if 00r( $$blockuser == true ) 00J{ ^acceptvalue ( $xkey $k-novalue ) } 02e else 00T( $taskinfo.skipoptional and ! $taskinfo.required ) 00J{ ^acceptvalue ( $xkey $k-novalue ) } 00X else ( 1 ) 00H { ^sharecontext ( $$msg me mine ) } 004 } 04V else 00L( $$defaultvalue and ! $taskinfo.amending ) 00@{ ^acceptvalue ( $xkey $$defaulttitle $$defaultvalue ) } 03g else 00T( $taskinfo.skipoptional and ! $taskinfo.required ) 00J{ ^acceptvalue ( $xkey $k-novalue ) } 01Z else 00r( $$blockuser == true ) 00J{ ^acceptvalue ( $xkey $k-novalue ) } 00X else ( 1 ) 00H { ^sharecontext ( $$msg me mine ) } 004 } 004 `
^findfieldtofill o 0 0 B( $_required $_fieldid $_fieldcount $_isfieldrequired $_xkeyfield $_dependson $_value $_tmpxkey ) $_fieldid = 0 $_fieldcount = ^length ( $taskinfo.fields ) $_required = ^castboolean ( $_required ) ^loop ( $_fieldcount ) 0aH { $taskinfo.field = $taskinfo.fields[$_fieldId] $_isfieldrequired = ^castboolean ( $taskinfo.field.isRequired ) ^if 00D( $_isfieldrequired == $_required ) 07i{ $xkey = ^getfieldkey ( $taskinfo.field ) $_xkeyfield = $taskinfo.fieldkeys.$xkey ^if 00k( ! $_required ) 03N{ $_dependson = $taskinfo.field.dependsOn ^if 00z( ^length ( $_dependson ) > 0 ) 02y{ $_value = $_dependson[0] ^if 00N( $taskinfo.fieldkeys.$_value == $k-novalue ) 01k{ $taskinfo.fieldkeys.$xkey = $k-novalue $taskinfo.fieldkeys.$_xkeyField = $k-novalue } 004 } 004 } 004 ^if 00A( ! $$istest and ! $_xkeyfield ) 01C{ $taskinfo.required = $_required ^reuse ( GENERICASK ) ^if 00j( ! $_tmpxkey ) 00p{ ^end ( LOOP ) } 004 } 004 } 004 ^if 00X( ! $taskinfo.nestfromfield or ! $taskinfo.confirming ) 00q{ $_fieldid += 1 } 004 } `
^fillfieldfromglean o 0 0 A( $$fieldcount $$fieldid $$dependson $$name $$value ) $$blockuser = true $$fieldcount = ^length ( $taskinfo.fields ) $$fieldid = 0 ^loop ( $$fieldcount ) 09Z { $taskinfo.field = ^jsonpath ( "[$$fieldid]" $taskinfo.fields ) $$residentfield = ^getresidentfield ( $botname $taskinfo.currentIntendedAction $taskinfo.field ) $$field_required = ^getfieldrequired ( $$residentfield ) $xkey = ^getfieldkey ( $taskinfo.field ) ^if 00x( $$field_required == false ) 03E{ $$dependson = $taskinfo.field.dependsOn ^if 00z( ^length ( $$dependson ) > 0 ) 02p{ $$name = $$dependson[0] $$value = $taskinfo.fieldkeys.$$name ^if 00N( $taskinfo.fieldkeys.$$value == $k-novalue ) 00O{ $taskinfo.fieldkeys.$xkey = $k-novalue } 004 } 004 } 004 ^if 013( ! $taskinfo.fieldkeys.$xkey or $taskinfo.fieldkeys.$xkey == $k-novalue ) 00?{ $taskinfo.required = $$field_required ^reuse ( GENERICASK ) } 004 $$fieldid += 1 } $$blockuser = null `
^composenestedformresponse o 0 0 D( ^currentchoice ^currentfield ^currentnestedvalue $_currentchoice $_currentfield $_currentnestedvalue $_keyname $_root $_currentchoicetitle $_currentchoicevalue $_keyobj $_nesteddesc $_value $_keynamearray $_isduplicate ) $_currentchoice = ^0 $_currentfield = ^1 $_currentnestedvalue = ^2 $_keyname = ^getfieldkey ( $_currentfield ) $_root = ^jsoncreate ( PERMANENT object ) $_currentchoicetitle = ^getfieldtitle ( $_currentchoice ) $_currentchoicevalue = $_currentchoice.value ^if 00A( $_currentchoicevalue == null ) 00T{ $_currentchoicevalue = $_currentchoicetitle } 004 ^if 00s( $_currentchoicetitle ) 03Q{ $_keyobj = ^jsoncreate ( PERMANENT object ) ^insertjsontypedvalue ( $_keyobj title $_currentchoicetitle string ) ^insertjsontypedvalue ( $_keyobj value $_currentchoicevalue string ) ^jsonobjectinsert ( $_root $_keyname $_keyobj ) $_nesteddesc = $_currentchoicetitle } 03o else 00s( $_currentnestedvalue ) 01H{ ^insertjsontypedvalue ( $_root $_keyname $_currentnestedvalue string ) $_nesteddesc = $_currentnestedvalue } 01n else ( 1 ) 017 { ^insertjsontypedvalue ( $_root $_keyname _0 string ) $_nesteddesc = _0 } 004 $_value = ^jsonwrite ( $_root ) ^if 00F( $taskinfo.fieldkeys.$xkey == null ) 00?{ $taskinfo.fieldkeys.$xkey = ^jsoncreate ( PERMANENT array ) } 004 $_keynamearray = $taskinfo.fieldkeys.$xkey $_isduplicate = ^nofail ( RULE ^query ( exact_so $_keynamearray ? $_value ? @0object ) ) ^if 00n( ! $_isduplicate ) 017{ ^nofail ( RULE ^jsonarrayinsert ( PERMANENT $_keynamearray $_value ) ) } 004 ^return ( $_currentchoicevalue ) `
^filldataforformlink o 0 0 A( $_customdata ) ^notrace ( $_customdata = ^composeformdata ( ) ) ^return ( $_customdata ) `
^hasmandatoryfields o 0 0 C( ^botname ^activity $$fieldcount $$fieldid $_fields $_field $_required ) ^notrace ( $_fields = ^getactivityfields ( ^0 ^1 ) ) $$fieldcount = ^length ( $_fields ) $$fieldid = 0 ^loop ( $$fieldcount ) 02C { @0 = ^query ( exact_sv $_fields $$fieldid ? 1 ) $_field = @0object $_required = ^getfieldrequired ( $_field ) ^if 00q( $_required == true ) 00p{ ^return ( 1 ) } 004 $$fieldid += 1 } ^fail ( CALL ) `
^listfields o 0 0 D( $_botname $_activity $_kind $$fieldcount $$fieldid $$msg $$title $$fieldtype $$type $$lcbotname $$metadata $$tmp $$concept $$lcactivity $$lctitle $_fields $_field $_required ) $$lcbotname = ^pos ( lowercase $_botname ) $$lcactivity = ^pos ( lowercase $_activity ) ^notrace ( $_fields = ^getactivityfields ( $_botname $_activity ) ) $$fieldcount = ^length ( $_fields ) $$fieldid = 0 ^if 00p( $$fieldcount != 0 ) 01${ $$msg = ^messagemap ( "^Fields for $_kind $_activity of $_botname are: \n" "^Fields for $_kind $_activity of $_botname are: \n" ) } 02l else ( 1 ) 025 { $$msg = ^messagemap ( "^There are no fields for $_kind $_activity of $_botname\n" "^There are no fields for $_kind $_activity of $_botname\n" ) } 004 ^notrace ( ^loop ( $$fieldcount ) 0is { @0 = ^query ( exact_sv $_fields $$fieldid ? 1 ) $$fieldid += 1 $_field = @0object $$title = ^getfieldtitle ( $_field ) $$lctitle = ^pos ( lowercase $$title ) $$fieldtype = ^getfieldfieldtype ( $_field ) $$type = ^getfieldtype ( $_field ) $$metadata = ^getfieldmetadata ( $_field ) $_required = ^getfieldrequired ( $_field ) ^if 00q( $_required == true ) 00^{ $_required = ^messagemap ( "^(required)" "^(required)" ) } 00J else ( 1 ) 00t { $_required = null } 004 $$title = ^join ( $$title "^ " $_required ) $$title = ^rightpad ( $$title 32 ) $$fieldtype = ^rightpad ( $$fieldtype 18 ) $$type = ^rightpad ( $$type 10 "^" ) $$tmp = ^messagemap ( "^title: $$title fieldtype: $$fieldtype type: $$type metadata: $$metadata" "^title: $$title fieldtype: $$fieldtype type: $$type metadata: $$metadata" ) $$msg = ^join ( $$msg $$tmp ) $$concept = ^join ( ~ bot- $$lcbotname -task- $$lcactivity -field- $$lctitle ) @1 = ^query ( direct_vo ? member $$concept ) ^if 00q( ^length ( @1 ) > 1 ) 00W{ $$msg = ^join ( $$msg "\n        synonyms: " ) } 004 $$comma = ^"" ^loop ( -1 ) 02f { $$tmp = ^first ( @1subject ) $$tmp = ^pos ( lowercase $$tmp ) ^if 00q( $$tmp != $$lctitle ) 00#{ $$msg = ^join ( $$msg $$comma " " $$tmp ) $$comma = , } 004 } $$time = $_field.timeToSave ^if 00e( $$time ) 00%{ $$msg = ^join ( $$msg "\n        timeToSave: " $$time ) } 004 $$msg = ^join ( $$msg \n ) } ) ^return ( $$msg ) `
^lastintentfields o 0 0 A( $$fieldcount $$fieldid $$residentfield ) $$blockuser = true $$fieldcount = ^length ( $taskinfo.fields ) $$fieldid = 0 ^loop ( $$fieldcount ) 07W { $taskinfo.field = ^jsonpath ( "[$$fieldid]" $taskinfo.fields ) $$residentfield = ^getresidentfield ( $lastbotname $lastintentaction $taskinfo.field ) ^if 00R( ^getfieldrequired ( $$residentfield ) == true ) 04R{ $xkey = ^getfieldkey ( $taskinfo.field ) ^if 01i( ! $$istest and ! $taskinfo.fieldkeys.$xkey or $taskinfo.fieldkeys.$xkey == $k-novalue ) 02S{ $taskinfo.required = true ^reuse ( ~generic_fields.genericask ) ^if 013( ! $taskinfo.fieldkeys.$xkey or $taskinfo.fieldkeys.$xkey == $k-novalue ) 00L{ $$blockuser = null ^return ( null ) } 004 } 004 } 004 $$fieldid += 1 } $$blockuser = null ^return ( true ) `
^doesinputnamebotandtask o 0 0 B( $_bname $_botdata $_newarray ) $_botdata = ^getbotobject ( $_bname ) ^if 00j( ! $_botdata ) 00p{ ^return ( 0 ) } 004 ^notrace ( $_newarray = ^locatematchingtasksfrombot ( $_botdata null 1 ) ) ^return ( ^length ( $_newarray ) ) `
^getfieldsintojson o 0 0 D( ^responsetype ^domsg ^sanitizekeys $$title $$val $$key $$skipped $_tmpfieldssummary $_fieldcount $_count $_field $_keyname $_keyvalue $_type $_fieldtype $_fieldmetadata $_defaultvalue $_tempmsg $_tmpvalarray $_msgcomma $_tmpk $_tmp2 $_tmp1 $_comma $_format $_len $_obj $_value $_skipmsg $_tmpconfirmationsummary ) $$skipped = null $$tmpfilledfields = ^jsoncreate ( object ) $$tmpemptyfields = ^jsoncreate ( array ) $_tmpfieldssummary = null $_fieldcount = ^length ( $taskinfo.fields ) $_count = 0 ^loop ( $_fieldcount ) 0D0 { $_field = ^jsonpath ( "[$_count]" $taskinfo.fields ) $_count += 1 $$title = ^getfieldtitle ( $_field ) $_keyname = ^getfieldkey ( $_field ) $$key = $_keyname $_keyvalue = $$key $_type = ^getfieldtype ( $_field ) $_fieldtype = ^getfieldfieldtype ( $_field ) $_fieldmetadata = ^getfieldmetadata ( $_field ) $_defaultvalue = ^finddefaultvalue ( $_field ) ^if 00a( ^2 ) 00!{ $_keyname = ^substitute ( character $_keyname . _ ) } 004 $_tempmsg = null ^if 012( $taskinfo.fieldkeys.$$key and $taskinfo.fieldkeys.$$key != $k-novalue ) 0q={ ^if 00L( $_type == array and $_fieldtype != file ) 0cd{ ^if 00k( ^0 == string ) 01t{ $_tempmsg = ^messagemap ( "^For <title> you gave:" "^For $$title you gave:" null null true ) } 004 $_tmpvalarray = ^jsoncreate ( array ) @0 = ^query ( exact_s $taskinfo.fieldkeys.$$key ? ? ) $_msgcomma = null ^loop ( -1 ) 06% { $_tmpk = ^jsonparse ( ^last ( @0object ) ) @5 = ^query ( exact_s $_tmpk ? ? ) $_tmp2 = ^first ( @5object ) $_tmp1 = null @8 = ^query ( exact_sv $_tmp2 title ? ) ^if 00q( ^length ( @8 ) > 0 ) 01F{ $_comma = null ^loop ( -1 ) 012 { $_tmp1 = ^join ( $_comma $_tmp1 ^last ( @8object ) ) $_comma = ^", " } } 00H else ( 1 ) 00r { $_tmp1 = $_tmp2 } 004 ^if 00k( ^0 == string ) 00Z{ $_tempmsg = ^join ( $_tempmsg $_msgcomma $_tmp1 ) } 004 ^insertjsontypedvalue ( $_tmpvalarray . $_tmp1 string ) $_msgcomma = ^",\n  " } ^if 00k( ^0 == string ) 00K{ $_tempmsg = ^join ( $_tempmsg \n ) } 004 ^jsonobjectinsert ( $$tmpfilledfields $_keyname $_tmpvalarray ) } 0e3 else 00s( $_fieldtype != label ) 0dF{ $$val = $taskinfo.fieldkeys.$$key ^if 00q( $utcoffset == null ) 00v{ $utcoffset = +00:00 } 004 ^if 00v( $_fieldtype == datetime ) 01${ ^if 00i( $utcoffset ) 01x{ $_format = ^getdateformat ( $_field ) ^nofail ( RULE $$val = ^maketimelocal ( $$val $_format ) ) } 004 } 06# else 00r( $_fieldtype == date ) 01d{ $_format = ^getdateformat ( $_field ) $$val = ^datetotext ( $_format $$val ) } 05k else 00r( $_fieldtype == file ) 03C{ $_count = 0 $_len = ^length ( $$val ) ^loop ( $_len ) 025 { $_obj = ^jsonpath ( "[$_count]" $$val ) $_value = $_obj.fileName @12 += ^createfact ( koreattachments $_count $_value FACTTRANSIENT ) $_count += 1 } $$val = ^stringlist ( koreattachments or ) } 01p else 00D( $_fieldmetadata == "Percentage" ) 00Q{ $$val *= 100 $$val = ^join ( $$val "%" ) } 004 $_fieldtype = null ^insertjsontypedvalue ( $$tmpfilledfields $_keyname $$val string ) ^if 00k( ^0 == string ) 01C{ $_tempmsg = ^messagemap ( "^For <title> you gave: <val>" "^For $$title you gave: $$val" "^" \n true ) } 004 } 004 } 03q else 00h( $$skipped ) 01u{ $$skipped = ^"$$skipped, $$title" ^insertjsontypedvalue ( $$tmpemptyfields . $$title string ) } 01N else 00o( ! $_defaultvalue ) 01g{ $$skipped = $$title ^insertjsontypedvalue ( $$tmpemptyfields . $$title string ) } 004 ^if 00y( ^0 == string and $_tempmsg ) 016{ $_tmpfieldssummary = ^join ( AUTOSPACE $_tmpfieldssummary $_tempmsg ) } 004 } ^if 00k( ^0 == string ) 03Q{ $_skipmsg = null ^if 00h( $$skipped ) 01@{ $_skipmsg = ^messagemap ( "^You skipped <skipped>" "^You skipped $$skipped." \n \n true ) $$taskfieldsvaluesskipped = $_skipmsg } 004 $_tmpconfirmationsummary = ^"^1 $_tmpfieldssummary" ^return ( $_tmpconfirmationsummary ) } 00V else ( 1 ) 00F { ^return ( $$tmpfilledfields ) } 004 `
^actionchoice o 0 0 E( ^title ^rule ^id ^showoptional $_choice ) $_choice = ^jsoncreate ( transient object ) $_choice.title = ^0 ^if 00a( ^3 ) 00%{ $_choice.title = ^join ( $_choice.title " (optional)" ) } 004 $_choice.rule = ^1 $_choice.fieldid = ^2 ^return ( $_choice ) `
^getactionchoices o 0 0 B( ^showoptional $_choices $_accountlist $_choice $_len $_index $_field $_showoptional ) $_choices = ^jsoncreate ( array ) $_accountlist = $taskinfo.xAuthorizedAccounts ^if 00B( ^length ( $_accountlist ) > 1 ) 01Q{ $_choice = ^actionchoice ( Account ~generic_amend.amend_account null null ) ^jsonarrayinsert ( $_choices $_choice ) } 004 $_len = ^length ( $taskinfo.fields ) $_index = 0 ^loop ( $_len ) 04G { $_field = $taskinfo.fields[$_index] ^if 00A( $_field.visibility != hidden ) 03k{ $_showoptional = null ^if 00G( ^0 and $_field.isRequired == false ) 00x{ $_showoptional = true } 004 $_choice = ^actionchoice ( $_field.title ~generic_amend.amend_field $_index $_showoptional ) ^jsonarrayinsert ( $_choices $_choice ) } 004 $_index += 1 } ^return ( $_choices ) `
^confirmdisplay o 0 0 A( $$fieldcount $$tmp $$format $$tmpmodified $_tmpconfirmationsummary $_defaultmsg $_tmptokens ) $$fieldcount = ^length ( $taskinfo.fields ) ^if 00o( $$fieldcount > 0 ) 00+{ $$taskfieldsvaluesfilled = ^getfieldsintojson ( string null ) } 00X else ( 1 ) 00H { $_tmpconfirmationsummary = null } 004 $_defaultmsg = ^"Here's what I understood for <current-intended-action> \n<task-fields-values-filled><task-fields-values-skipped>Shall I go ahead?" $_tmpconfirmationsummary = ^messagemap ( "^Task confirmation dialog" $_defaultmsg ) ^sendconfirmationsummary ( $_defaultmsg $$tmpfilledfields $$tmpemptyfields null ) $_tmptokens = $cs_response $cs_response = 1048576 + 2097152 + 8388608 $_tmpconfirmationsummary ^flushoutput ( ) $cs_response = $_tmptokens `
^erasefilterpayload o 0 0 A( $_counter $_filter ) $_counter = 0 ^loop ( -1 ) 02E { $_filter = $taskinfo.filters[$_counter] $_filter.payload = null ^if 00O( ^length ( $taskinfo.filters ) >= $_counter ) 00q{ $_counter += 1 } 00G else ( 1 ) 00q { ^fail ( LOOP ) } 004 } `
^alertfield o 0 0 D( ^name ^value ^commas ) ^if 00a( ^1 ) 03s{ $$tmpfield = ^0 $$tmpkey = ^1 ^if 00y( $$tmpkey == "*" or ^2 == 1 ) 018{ ^jsonobjectinsert ( transient $$talertdata $$tmpfield "^\"$$tmpkey\"" ) } 01k else ( 1 ) 014 { ^jsonobjectinsert ( transient $$talertdata $$tmpfield "^$$tmpkey" ) } 004 } 004 `
^alertinfo o 0 0 A( $$fieldcount $$fieldid $$dependson $$name $$value $$count $_payloads $_count $_filter $_payload ) $$talertdata = ^jsoncreate ( transient object ) ^alertfield ( alertName $taskinfo.alertname 1 ) ^alertfield ( alertDescription $taskinfo.alertDescription 1 ) ^alertfield ( alertHour $taskinfo.alerthour 0 ) ^alertfield ( alertMinute $taskinfo.alertminute 0 ) ^alertfield ( alertDays $taskinfo.alertdays 0 ) ^alertfield ( alertfrequencyhours $taskinfo.alertfrequencyhours 0 ) ^alertfield ( alertfrequencyminutes $taskinfo.alertfrequencyminutes 0 ) ^alertfield ( changefrequency $taskinfo.changefrequency 0 ) ^alertfield ( currentfilter $taskinfo.currentfilter.name 1 ) ^alertfield ( currentfilterid $taskinfo.currentfilter.id 0 ) ^alertfield ( changefilter $taskinfo.changefilter 0 ) ^alertfield ( filtersavailable $taskinfo.filtersavailable 1 ) ^alertfield ( enablenotifications $taskinfo.enablenotifications 1 ) $$talertdata.inputInfo = $$taskinfo.currentfilter.inputInfo $$talertdata.supportedOperations = $taskinfo.currentfilter.supportedOperations ^alertfield ( webhook $taskinfo.webhook 1 ) ^alertfield ( instructions $taskinfo.instructions 1 ) ^alertfield ( preparedalert $taskinfo.preparedalert 0 ) $_payloads = ^jsoncreate ( TRANSIENT array ) $_count = 0 ^loop ( -1 ) 02z { $_filter = ^jsonpath ( "[$_count]" $taskinfo.filters ) $_count += 1 $_payload = $_filter.filterpayload ^if 00h( $_payload ) 00R{ ^jsonarrayinsert ( $_payloads $_payload ) } 004 } $$talertdata.alertFilters = $_payloads ^return ( ^jsonwrite ( $$talertdata ) ) `
^showfilterglean o 0 0 A( $$filtername $$count $$tmp $_filtername ) $$count = 0 ^loop ( -1 ) 086 { $_filtername = ^jsonpath ( "[$$count].name" $taskinfo.filters ) $$count += 1 $_filtername = ^pos ( lowercase $_filtername ) ^if 00%( ^query ( exact_sv $gleaninfo.alertfilter $_filtername ? 1 ) ) 05s{ ^if 00u( ! $taskinfo.filterlist ) 00${ $taskinfo.filterlist = ^jsoncreate ( permanent array ) } 004 $taskinfo.currentfilter = ^jsoncreate ( permanent object ) ^jsonarrayinsert ( PERMANENT $taskinfo.filterlist $taskinfo.currentfilter ) $taskinfo.currentfilter.name = $_filtername $taskinfo.currentfilter.id = @0object Filtering $taskinfo.currentfilter.name for $taskinfo.currentfilter.id . \n } 004 } `
^createfilterpayload o 0 0 A( $_filtering $_payload $_values ) $_filtering = $taskinfo.currentfilter.filtering $_payload = ^jsoncreate ( PERMANENT object ) $_payload.name = $taskinfo.currentfilter.name $_payload.id = $taskinfo.currentfilter.id ^if 00F( $taskinfo.currentfilter.operation ) 01m{ ^jsonobjectinsert ( PERMANENT $_payload operation $taskinfo.currentfilter.operation ) } 004 ^if 00j( $_filtering ) 01W{ $_values = ^jsoncreate ( PERMANENT array ) ^jsonarrayinsert ( PERMANENT $_values $_filtering ) $_payload.value = $_values } 004 ^return ( $_payload ) `
^setfrequencyofupdatesdays o 0 0 B( ^choicechosen ) ^if 00l( ^0 == "Daily" ) 00~{ $taskinfo.alertdays = 1 | 2 | 4 | 8 | 16 | 32 | 64 } 023 else 00n( ^0 == "Weekday" ) 00Q{ $taskinfo.alertdays = 1 | 2 | 4 | 8 | 16 } 00+ else 00n( ^0 == "Weekend" ) 00F{ $taskinfo.alertdays = 32 | 64 } 004 $taskinfo.alertFrequency = null `
^setfrequencyofupdatesinterval o 0 0 B( ^choicechosen ) ^if 00i( ^0 == "At" ) 00F{ $taskinfo.changefrequency = 3 } 00? else 00l( ^0 == "Every" ) 00F{ $taskinfo.changefrequency = 4 } 004 $taskinfo.alertFrequency = null `
^setfrequencyintervaltype o 0 0 B( ^choicelist $_field ) $haseverytype = null $hasattype = null $$count = 0 $$fieldcount = ^length ( ^0 ) ^loop ( $$fieldcount ) 02i { $_field = ^jsonpath ( "[$$count]" ^0 ) $$count += 1 ^if 00l( $_field == At ) 00q{ $hasattype = 1 } 004 ^if 00o( $_field == Every ) 00t{ $haseverytype = 1 } 004 } `
^setfrequencyofupdatesintervaltime o 0 0 B( ^choicechosen $$tmp ) @10 = ^burst ( ^0 ) $$tmpvalue = ^first ( @10subject ) $$tmp = ^last ( @10subject ) ^if 00l( $$tmp != null ) 00Z{ ^if 00l( $$tmp == "pm" ) 00p{ $$ispm = true } 004 } 004 @10 = ^burst ( ^0 : ) $$tmpalerthour = ^first ( @10subject ) $$tmpalertminute = ^last ( @10subject ) ^if 00w( $$tmpalertminute != null ) 02y{ $taskinfo.alerthour = $$tmpalerthour $taskinfo.alertminute = $$tmpalertminute ^if 00m( $$ispm == true ) 00B{ $taskinfo.alerthour += 12 } 004 $taskinfo.alertFrequency = null } 004 `
^setfrequencyofupdatesintervaltimefrequency o 0 0 B( ^choicechosen $$tmp ) @10 = ^burst ( ^0 ) $$tmpvalue = ^first ( @10subject ) $$tmp = ^last ( @10subject ) ^if 00l( $$tmp != null ) 043{ ^if 00!( $$tmp == "minutes" or $$tmp == "min" or $$tmp == "mins" ) 00U{ $taskinfo.alertfrequencyminutes = $$tmpvalue } 01$ else 013( $$tmp == "hour" or $$tmp == "hours" or $$tmp == "hr" or $$tmp == "hrs" ) 00S{ $taskinfo.alertfrequencyhours = $$tmpvalue } 004 $taskinfo.alertFrequency = null } 004 `
^getintervals o 0 0 B( ^intervaltype $_intervaltype $_intervalsobject $_intervalsarray $_counter $_currentinterval $_allintervals ) $_intervaltype = ^0 $_intervalsobject = $taskinfo.frequencyOfUpdates.intervals $_intervalsarray = $_intervalsobject.$_intervalType $_counter = 0 ^loop ( -1 ) 03n { $_currentinterval = ^jsonpath ( "[$_counter]" $_intervalsarray ) ^if 00m( $_allintervals ) 011{ $_allintervals = ^join ( $_allintervals ", " $_currentinterval ) } 00~ else ( 1 ) 00K { $_allintervals = $_currentinterval } 004 $_counter += 1 } ^return ( $_allintervals ) `
^alertchoice o 0 0 D( ^title ^rule ^id $_choice ) $_choice = ^jsoncreate ( transient object ) $_choice.title = ^0 $_choice.rule = ^1 $_choice.fieldid = ^2 ^return ( $_choice ) `
^getalertchoices o 0 0 A( $_choices $_choice $_accountlist $_len $_index $_field ) $_choices = ^jsoncreate ( array ) $_choice = ^alertchoice ( Name ~generic_amend.amend_name null ) ^jsonarrayinsert ( $_choices $_choice ) $_choice = ^alertchoice ( Description ~generic_amend.amend_description null ) ^jsonarrayinsert ( $_choices $_choice ) $_choice = ^alertchoice ( Notifications ~generic_amend.amend_notification null ) ^jsonarrayinsert ( $_choices $_choice ) ^if 00G( $taskinfo.filtersavailable == true ) 01K{ $_choice = ^alertchoice ( Filters ~generic_amend.amend_filters null ) ^jsonarrayinsert ( $_choices $_choice ) } 004 $_accountlist = $taskinfo.xAuthorizedAccounts ^if 00B( ^length ( $_accountlist ) > 1 ) 01K{ $_choice = ^alertchoice ( Account ~generic_amend.amend_account null ) ^jsonarrayinsert ( $_choices $_choice ) } 004 ^if 00r( ! $taskinfo.webhook ) 01O{ $_choice = ^alertchoice ( Frequency ~generic_amend.amend_frequency null ) ^jsonarrayinsert ( $_choices $_choice ) } 004 $_len = ^length ( $taskinfo.fields ) $_index = 0 ^loop ( $_len ) 030 { $_field = $taskinfo.fields[$_index] ^if 00A( $_field.visibility != hidden ) 01R{ $_choice = ^alertchoice ( $_field.title ~generic_amend.amend_field $_index ) ^jsonarrayinsert ( $_choices $_choice ) } 004 $_index += 1 } ^return ( $_choices ) `
^addinfotoalertfields o 0 0 B( ^msgtoadd ) ^if 00r( $$alertfieldsvalues ) 00Z{ $$alertfieldsvalues = ^"$$alertFieldsValues \n^0" } 00Q else ( 1 ) 00A { $$alertfieldsvalues = ^0 } 004 `
^isalert o 0 0 A( ) ^if 00z( $taskinfo.taskKind == alert ) 00s{ ^return ( true ) } 004 ^fail ( CALL ) `
^isaction o 0 0 A( ) ^if 00A( $taskinfo.taskKind == action ) 00s{ ^return ( true ) } 004 ^fail ( CALL ) `
^setadjustervalues o 0 0 A( ) $toneconstants.toneadjust = ^jsonparse ( permanent ^' [ [  2  2  3  0 -3 -2 -2 ] [  1  2  2  0 -2 -2 -1 ] [  1  1  2  0 -2 -1 -1 ] [  0  0  0  0  0  0  0 ] [ -2 -1 -1  0  1  1  2 ] [ -3 -2 -1  0  1  2  3 ] [ -3 -3 -2  0  2  3  3 ] ] ' ) `
^adjusttone o 0 0 C( $_value $_adjuster $_index1 $_index2 $_tonevalue ) $_index1 = $_adjuster + 3 $_index2 = $_value + 3 $_tonevalue = $toneconstants.toneadjust[$_index1][$_index2] ^return ( $_tonevalue ) `
^gettonekind o 0 0 B( $_tone $_kindindex $_kind $_pattern $_result ) $_kindindex = 0 ^loop ( -1 ) 02T { $_kind = $toneconstants.kinds[$_kindindex] $_pattern = ^'$_tone?~$_kind' $_result = ^result ( ^match ( $_pattern ) ) ^if 00t( $_result == NOPROBLEM ) 00u{ ^return ( $_kind ) } 004 $_kindindex += 1 } ^return ( null ) `
^gettoneindex o 0 0 C( $_array $_name $_return $_length $_toneid $_obj $_tonename ) $_return = null $_length = ^length ( $_array ) $_toneid = $_length ^loop ( $_length ) 02H { $_toneid -= 1 $_obj = $_array[$_toneid] ^if 00f( ! $_obj ) 00p{ ^end ( loop ) } 004 $_tonename = $_obj.name ^if 00s( $_tonename == $_name ) 00J{ $_return = $_toneid ^end ( loop ) } 004 } ^return ( $_return ) `
^calculatetones o 0 0 A( $_length $_toneid $_toneobject $_input $_name $_value $_adjuster $_tonevalue $_index $_result $_count ) ^if 00o( $tonalyzer.tones ) 0dI{ $_length = ^length ( $tonalyzer.tones ) $_toneid = $_length ^loop ( $_length ) 08p { $_toneid -= 1 $_toneobject = $tonalyzer.tones[$_toneid] ^if 00m( ! $_toneobject ) 00p{ ^end ( loop ) } 004 $_input = $_toneobject.input $_name = $_toneobject.name $_value = $_toneobject.value $_adjuster = $_toneobject.adjuster $_tonevalue = ^adjusttone ( $_value $_adjuster ) $_index = ^gettoneindex ( $tonalyzer.results $_name ) ^if 00n( $_index == null ) 01={ $_result = ^jsonparse ( ^'{ name: "$_name", value: "$_tonevalue", count: 1}' ) ^jsonarrayinsert ( permanent $tonalyzer.results $_result ) } 01E else ( 1 ) 01o { $tonalyzer.results[$_index].value += $_tonevalue $tonalyzer.results[$_index].count += 1 } 004 } $_length = ^length ( $tonalyzer.results ) $_toneid = $_length ^loop ( $_length ) 02+ { $_toneid -= 1 $_toneobject = $tonalyzer.results[$_toneid] ^if 00m( ! $_toneobject ) 00p{ ^end ( loop ) } 004 $_value = $_toneobject.value $_count = $_toneobject.count $_value /= $_count $_toneobject.value = $_value } } 004 `
^outputtones o 0 0 A( $_msg $_length $_toneid $_toneobject $_name $_value $_value01 $_count $_msgintro $_valuemsg $_tmpmsg ) ^if 00o( $tonalyzer.tones ) 07d{ $_msg = ^"\n Volley tones : " $_length = ^length ( $tonalyzer.results ) $_toneid = $_length ^loop ( $_length ) 05F { $_toneid -= 1 $_toneobject = $tonalyzer.results[$_toneid] ^if 00m( ! $_toneobject ) 00p{ ^end ( loop ) } 004 $_name = $_toneobject.name $_value = $_toneobject.value $_value01 = $_value $_value01 += 3 $_value01 /= 6 $_count = $_toneobject.count $_msgintro = ^"\n The tone $_name" $_valuemsg = ^" has value $_value and $_count occurrences. [0-1] value: $_value01" $_msg = ^join ( $_msg $_msgintro $_valuemsg ) } } 004 ^if 00o( $tonalyzer.tones ) 083{ $_length = ^length ( $tonalyzer.accumulatedResults ) $_toneid = $_length $_tmpmsg = ^"\n\n Accumulated tones : " $_msg = ^join ( $_msg $_tmpmsg ) ^loop ( $_length ) 05Q { $_toneid -= 1 $_toneobject = $tonalyzer.accumulatedResults[$_toneid] ^if 00m( ! $_toneobject ) 00p{ ^end ( loop ) } 004 $_name = $_toneobject.name $_value = $_toneobject.value $_value01 = $_value $_value01 += 3 $_value01 /= 6 $_count = $_toneobject.count $_msgintro = ^"\n The tone $_name" $_valuemsg = ^" has value $_value and $_count occurrences. [0-1] value: $_value01" $_msg = ^join ( $_msg $_msgintro $_valuemsg ) } } 004 ^return ( $_msg ) `
^accumulatetones o 0 0 A( $_length $_oldmaxcount $_acculength $_toneid $_result $_accuvalue $_maxcount $_name $_value $_count $_keytoupdate $_accuindex $_tmp $_accucount ) $_length = ^length ( $tonalyzer.results ) ^if 00l( $_length == 0 ) 00p{ ^end ( CALL ) } 004 $_oldmaxcount = $tonalyzer.maxcount $_acculength = ^length ( $tonalyzer.accumulatedResults ) $_toneid = $_acculength ^loop ( $_acculength ) 03d { $_toneid -= 1 $_result = $tonalyzer.accumulatedResults[$_toneid] ^if 00i( ! $_result ) 00p{ ^end ( loop ) } 004 $_accuvalue = $_result.value $_accuvalue *= $_oldmaxcount $tonalyzer.accumulatedResults[$_toneid].value = $_accuvalue } $_maxcount = 0 $_toneid = $_length ^loop ( $_length ) 0fq { $_toneid -= 1 $_result = $tonalyzer.results[$_toneid] ^if 00i( ! $_result ) 00p{ ^end ( loop ) } 004 $_name = $_result.name $_value = $_result.value $_count = $_result.count ^if 00E( $taskinfo.contextJson.volleyTone ) 02${ $taskinfo.contextJson.volleyTone.$_name = $_value $_keytoupdate = ^"context.volleyTone.$_name" ^updatevalueforkeyincontext ( $taskinfo.contextJson.botid $taskinfo.contextIdOnServer $_keytoupdate $_value ) } 004 $_accuindex = ^gettoneindex ( $tonalyzer.accumulatedResults $_name ) ^if 00l( ! $_accuindex ) 031{ $_tmp = ^jsonparse ( permanent ^'{ name: "$_name", value: 0, count: 0 }' ) ^jsonarrayinsert ( permanent $tonalyzer.accumulatedResults $_tmp ) $_accuindex = ^length ( $tonalyzer.accumulatedResults ) $_accuindex -= 1 } 004 $_accuvalue = $tonalyzer.accumulatedResults[$_accuIndex].value $_accucount = $tonalyzer.accumulatedResults[$_accuIndex].count $_value *= $_count $_accuvalue += $_value $_accucount += $_count $tonalyzer.accumulatedResults[$_accuIndex].value = $_accuvalue $tonalyzer.accumulatedResults[$_accuIndex].count = $_accucount ^if 00w( $_accucount > $_maxcount ) 00A{ $_maxcount = $_accucount } 004 } $tonalyzer.maxcount = $_maxcount $_acculength = ^length ( $tonalyzer.accumulatedResults ) $_toneid = $_acculength ^loop ( $_acculength ) 06+ { $_toneid -= 1 $_result = $tonalyzer.accumulatedResults[$_toneid] ^if 00i( ! $_result ) 00p{ ^end ( loop ) } 004 $_accuvalue = $_result.value $_accuvalue /= $_maxcount $tonalyzer.accumulatedResults[$_toneid].value = $_accuvalue ^if 00D( $taskinfo.contextJson.totalTone ) 03k{ $_name = $_result.name $taskinfo.contextJson.totalTone.$_name = $_accuvalue $_keytoupdate = ^"context.totalTone.$_name" ^updatevalueforkeyincontext ( $taskinfo.contextJson.botid $taskinfo.contextIdOnServer $_keytoupdate $_accuvalue ) } 004 } `
^gettoneadjuster o 0 0 D( $_left $_curr $_right $_lbeg $_lend $_cbeg $_cend $_rbeg $_rend $_array $_first $_last $_index $_return $_pattern $_result $_start $_end ) $_lbeg = ^getstartindexfromposition ( $_left ) $_lend = ^getendindexfromposition ( $_left ) $_cbeg = ^getstartindexfromposition ( $_curr ) $_cend = ^getendindexfromposition ( $_curr ) $_rbeg = ^getstartindexfromposition ( $_right ) $_rend = ^getendindexfromposition ( $_right ) $_array = $toneconstants.tonepatterns ^setposition ( _11 $_lbeg $_lend ) ^setposition ( _12 $_cbeg $_cend ) ^setposition ( _13 $_rbeg $_rend ) $_first = $_cbeg $_last = $_cend $_index = ^length ( $_array ) $_return = null ^loop ( -1 ) 05m { ^if 00k( $_index == 0 ) 00p{ ^end ( loop ) } 004 $_index -= 1 _0 = null $_pattern = $_array[$_index].pattern ^nofail ( RULE $_result = ^result ( ^match ( $_pattern ) ) ) ^if 00t( $_result == NOPROBLEM ) 02A{ $_start = ^position ( START _0 ) $_end = ^position ( END _0 ) ^if 00K( $_start <= $_first and $_end >= $_last ) 00!{ $_first = $_start $_last = $_end $_return = $_index } 004 } 004 } ^setposition ( _0 $_first $_last ) ^if 00g( $_return ) 00K{ $_return = $_array[$_return].value } 00E else ( 1 ) 00o { $_return = 2 } 004 ^return ( $_return ) `
^findtoneposition o 0 0 C( $_start $_direction $_step $_toneid $_position $_sentenceindex $_nextposition $_sentenceindex1 $_index ) ^if 00u( $_direction == forward ) 00m{ $_step = 1 } 00D else ( 1 ) 00n { $_step = -1 } 004 $_toneid = $_start $_position = $tonalyzer.tones[$_toneid].position $_sentenceindex = ^getsentenceindexfromposition ( $_position ) ^loop ( -1 ) 05k { $_toneid += $_step $_nextposition = $tonalyzer.tones[$_toneid].position ^if 00m( $_nextposition ) 03r{ ^if 00A( $_nextposition != $_position ) 02P{ $_sentenceindex1 = ^getsentenceindexfromposition ( $_nextposition ) ^if 00H( $_sentenceindex1 == $_sentenceindex ) 00C{ ^return ( $_nextposition ) } 00F else ( 1 ) 00p { ^end ( loop ) } 004 } 004 } 00F else ( 1 ) 00p { ^end ( loop ) } 004 } ^if 00u( $_direction == forward ) 00G{ $_index = %length $_index += 1 } 00D else ( 1 ) 00n { $_index = 0 } 004 $_nextposition = ^getpositionfromsentenceandrange ( $_sentenceindex $_index $_index ) ^return ( $_nextposition ) `
^processtones o 0 0 A( $_restoredsentenceindex $_length $_toneid $_toneobject $_name $_kind $_position $_sentenceindex $_prevposition $_nextposition $_adjuster $_toneid1 $_position1 $_startindex $_endindex ) ^if 00o( $tonalyzer.tones ) 0ho{ $_restoredsentenceindex = null $_length = ^length ( $tonalyzer.tones ) $_toneid = $_length ^loop ( $_length ) 0fR { $_toneid -= 1 $_toneobject = $tonalyzer.tones[$_toneid] ^if 00m( ! $_toneobject ) 00p{ ^end ( loop ) } 004 $_name = $_toneobject.name $_kind = $_toneobject.kind $_position = $_toneobject.position $_sentenceindex = ^getsentenceindexfromposition ( $_position ) ^if 00O( $_restoredsentenceindex != $_sentenceindex ) 01k{ ^restoregleansentence ( $_sentenceindex ) $_restoredsentenceindex = $_sentenceindex } 004 $_prevposition = ^findtoneposition ( $_toneid backward ) $_nextposition = ^findtoneposition ( $_toneid forward ) $_adjuster = null $_adjuster = ^gettoneadjuster ( $_prevposition $_position $_nextposition ) ^if 00q( $_adjuster != null ) 071{ $tonalyzer.tones[$_toneid].adjuster = $_adjuster $_toneid1 = $_toneid - 1 ^loop ( -1 ) 030 { $_position1 = $tonalyzer.tones[$_toneid1].position ^if 00N( $_position1 and $_position1 == $_position ) 00Z{ $tonalyzer.tones[$_toneid1].adjuster = $_adjuster } 00F else ( 1 ) 00p { ^end ( loop ) } 004 $_toneid1 -= 1 } $_toneid = $_toneid1 + 1 $_startindex = ^position ( START _0 ) $_endindex = ^position ( END _0 ) $_toneobject.valueposition = ^getpositionfromsentenceandrange ( $_sentenceindex $_startindex $_endindex ) } 004 } } 004 `
^scantones o 0 0 A( $_sentenceindex $_sentencecount $_toneprefix $_toneconcept $_name $_value $_startindex $_endindex $_position $_input $_toneobject $_kind ) $_sentenceindex = $gleaninfo.unprocessed $_sentencecount = ^length ( $gleaninfo.sentences ) - $_sentenceindex ^loop ( $_sentencecount ) 0a1 { ^restoregleansentence ( $_sentenceindex ) $_toneprefix = ^join ( ~ tone- ) ^setposition ( _0 1 %length ) @0 = ^conceptlist ( CONCEPT _0 $_toneprefix ) ^loop ( -1 ) 07x { _10 = ^first ( @0all ) ^if 00d( ! _10 ) 00p{ ^end ( loop ) } 004 $_toneconcept = _10 _0 = ^burst ( $_toneconcept - ) $_name = _1 $_value = _2 $_value -= 4 $_startindex = _12 >> 8 $_endindex = _12 & 255 $_position = ^getpositionfromsentenceandrange ( $_sentenceindex $_startindex $_endindex ) ^setposition ( _0 $_startindex $_endindex ) $_input = ^original ( _0 ) $_toneobject = ^jsonparse ( ^'{ input: "$_input", position: $_position, kind: "$_kind", name: "$_name",  value: "$_value"}' ) ^jsonarrayinsert ( permanent $tonalyzer.tones $_toneobject ) } $_sentenceindex += 1 } `
^settonalyzerconstants o 0 0 A( ) ^if 00o( ! $toneconstants ) 043{ $toneconstants = ^jsoncreate ( permanent object ) $toneconstants.kinds = ^jsonparse ( permanent ^'[ noun, adjective, verb, aux_verb, adverb, pronoun, preposition, conjunction, interjection, determiner, predeterminer, there_existential, number ]' ) ^settonepatterns ( ) ^setadjustervalues ( ) } 004 `
^resettonalyzer o 0 0 A( ) ^if 00i( $tonalyzer ) 00y{ ^delete ( $tonalyzer ) } 004 $tonalyzer = ^jsoncreate ( permanent object ) $tonalyzer.maxcount = 0 $tonalyzer.accumulatedResults = ^jsoncreate ( permanent array ) `
^resetvolleytones o 0 0 A( $_sentencecount ) ^if 00k( ! $tonalyzer ) 00v{ ^resettonalyzer ( ) } 004 ^if 00o( $tonalyzer.tones ) 00E{ ^delete ( $tonalyzer.tones ) } 004 ^if 00q( $tonalyzer.results ) 00G{ ^delete ( $tonalyzer.results ) } 004 $tonalyzer.tones = ^jsoncreate ( permanent array ) $tonalyzer.results = ^jsoncreate ( permanent array ) ^if 00l( $displayglean ) 00s{ ^return ( null ) } 004 ^if 00w( ! $gleaninfo.unprocessed ) 00s{ ^return ( null ) } 004 $_sentencecount = ^length ( $gleaninfo.sentences ) - $gleaninfo.unprocessed ^if 00p( ! $_sentencecount ) 00s{ ^return ( null ) } 004 ^return ( 1 ) `
^tonalyzer o 0 0 A( $_return $_msg ) $_return = ^resetvolleytones ( ) ^if 00g( $_return ) 01a{ ^scantones ( ) ^processtones ( ) ^calculatetones ( ) ^accumulatetones ( ) } 004 ^logif ( $tracefields "^tonalyzer:  ^jsontree($tonalyzer) \n" ) ^if 00n( $tonalyzercheat ) 00*{ $_msg = ^outputtones ( ) ^if 00d( $_msg ) 00h{ $_msg } 004 } 004 `
^isdatevalid o 0 0 D( $_year $_month $_date $_daysinmon ) ^if 00l( $_year > 9999 ) 00p{ ^return ( 0 ) } 004 ^if 00B( $_year < 1000 and $_year > 99 ) 00p{ ^return ( 0 ) } 004 ^if 00k( $_year < 100 ) 01n{ ^if 00j( $_year < 50 ) 00q{ $_year += 2000 } 00G else ( 1 ) 00q { $_year += 1900 } 004 } 004 ^if 00k( $_month > 12 ) 00p{ ^return ( 0 ) } 004 $_month -= 1 $_daysinmon = ^getdaysinmonth ( $_month $_year ) ^if 00s( $_date > $_daysinmon ) 00p{ ^return ( 0 ) } 004 ^return ( 1 ) `
^isambiguous o 0 0 B( $_formatmask ) ^if 00p( $_formatmask == 0 ) 00s{ ^return ( null ) } 004 ^if 01d( $_formatmask == 1 or $_formatmask == 2 or $_formatmask == 4 or $_formatmask == 8 ) 00t{ ^return ( false ) } 004 ^return ( true ) `
^displaytasks o 0 0 D( ^botname ^tasktype ^shownone $_result $_taskinfoparagraph $_taskinfoline $_loopcounter $_tasklength $_logfile $_tasks $_activitydata $_tasklabel $_counter $_patterns $_counter1 $_patterna $_pattern ) $$tasktype = ^pos ( capitalize ^1 ) $$botname = ^0 $$hide = ^2 $_result = ^"" $_taskinfoparagraph = ^" " $_taskinfoline = ^"" $_loopcounter = 0 $_tasklength = 0 $_logfile = $$tmpfile ^if 00t( $$tasktype == actions ) 00&{ $_tasks = ^getlistofdialogsandactionsforbot ( $$botname ) } 00= else ( 1 ) 00W { $_tasks = ^getlistofalertsforbot ( $$botname ) } 004 $_tasklength = ^length ( $_tasks ) ^if 00o( $_tasklength > 0 ) 0i-{ ^if 00h( $_logfile ) 02M{ ^log ( FILE $_logfile "^\n    $$tasktype of $$botName are: \n" ) ^if 00e( $k-bot ) 01t{ $_result = ^messagemap ( "^<actions> of <bot-name>" "^$$tasktype of $$botName are: " \n \n ) } 004 } 01J else ( 1 ) 01t { $_result = ^messagemap ( "^<actions> of <bot-name>" "^$$tasktype of $$botName are: " \n \n ) } 004 ^loop ( -1 ) 0cV { $_activitydata = ^query ( exact_sv $_tasks $_loopcounter ? 1 ? @0object ) ^if 00o( ! $_activitydata ) 00p{ ^end ( LOOP ) } 01l else ( 1 ) 015 { $_loopcounter += 1 $_tasklabel = ^taskdisplayname ( $_activitydata ) } 004 ^if 00h( $_logfile ) 01&{ ^log ( FILE $_logfile $_tasklabel \n ) ^if 00e( $k-bot ) 011{ $_taskinfoline = ^messagemap ( "^<label> \n" "^$_tasklabel \n" ) } 004 } 01e else ( 1 ) 00+ { $_taskinfoline = ^messagemap ( "^<label>" "^$_tasklabel \n" ) } 004 $_taskinfoparagraph = ^join ( $_taskinfoparagraph $_taskinfoline ) ^if 00p( $$showtaskpattern ) 059{ $_counter += 1 $_patterns = ^query ( exact_sv $_activitydata patterns ? 1 ? @0object ) $_counter1 = 0 ^loop ( -1 ) 03x { ^query ( exact_sv $_patterns $_counter1 ? 1 ) $_counter1 += 1 $_patterna = @0object $_pattern = ^query ( exact_sv $_patterna value ? 1 ? @0object ) ^if 00j( ! $_pattern ) 00y{ $_pattern = $_patterna } 004 ^log ( FILE $_logfile "^     $_pattern \n" ) } } 004 } $_result = ^join ( $_result $_taskinfoparagraph ) ^sendstatementsummary ( $_result ) ^return ( $_result ) } 05l else ( 1 ) 055 { ^if 00m( $$hide == true ) 04H{ ^if 00h( $_logfile ) 02a{ ^log ( FILE $_logfile "^   There are none.\n" ) ^if 00e( $k-bot ) 018{ $_result = ^messagemap ( "^There are none" "^   There are none" \n \n ) } 004 } 01o else ( 1 ) 018 { $_result = ^messagemap ( "^There are none" "^   There are none" \n \n ) } 004 ^sendstatementsummary ( $_result ) ^return ( $_result ) } 004 } 004 `
^matchprefixconcept p 0 0 B( ^prefix ) ( ^eval ( $$match_concept_prefix = ^0 ) ^respond ( ~match-concepts ) ) `
^debugbefore o 0 0 B( ^args ) _10 = $authorization _11 = $userid _12 = $protocol _13 = $host _14 = $nonkorabotid _15 = $clientname `
^debugafter o 0 0 B( ^args ) $$blockdefaultoob = 1 $authorization = _10 $userid = _11 $protocol = _12 $host = _13 $nonkorabotid = _14 $clientname = _15 `
^kora o 0 0 A( ) $userprompt = ^"user:>" $botprompt = ^"KORA: " ^addtopic ( ~introductions ) $cs_prepass = ~xprepass $cs_control_main = ~control $cs_control_post = ~xpostprocess $cs_control_pre = ~xpreprocess $kora_skipoptional = 1 $skipoptional = $kora_skipoptional $cs_token = $csbase_token $std_token = $cs_token $cs_response = $csbase_response $cs_userhistorylimit = 0 $cs_wildcardseparator = " " $cs_userfactlimit = 100000 $cs_looplimit = 15000 $cs_beforereset = ^"^debugbefore" $cs_afterreset = ^"^debugafter" ^defaultvaluesforenvcredentials ( ) $showmsgstouser = null $room = null $clientname = Bruce $appuserid = u-0cafc923-ad7c-5a22-b8bb-4e03fef0dc87 $appauthorization = KNy3uCW5a6Wj3FvIv6WZ_yoLwwQP-YLIP_yeX8rivqK4iohSW55D6Y7lXBOU0oLL $qabotsuserid = u-e5b914ff-4421-5f73-9b4f-25b22662c283 $qabotsauthorization = z_lJyGE8Hy5Jj9h6M6nOjTKAbA62PqHS6vhkGs5-cWtTmh0dUJXlAqw6mOMY-0Lp $qa1botsuserid = u-0cafc923-ad7c-5a22-b8bb-4e03fef0dc87 $qa1botsauthorization = -XX3wSh_gukWfX4gQvxGYqXW_iLUEmtyqo_otiFITlTYJMWw0JMm1PksjrwlMyyF $workflowbotsuserid = u-0cafc923-ad7c-5a22-b8bb-4e03fef0dc87 $workflowbotsauthorization = JZ5_0WCAtc0ioeYcjSACwUWrEtAEviCLSAC08K-iYLmVTO8mPFT8leZDnPMfo9Ur $koreappsauthorization = yQcLKhWH4G30loAxo164-7_qhmNOKrXFdf9DqiTJ50Hi42OEaliRcPRViLwb3BRO $userid = ^"u-0cafc923-ad7c-5a22-b8bb-4e03fef0dc87" `
^csboot o 0 0 A( $_lang $_headers $_url $_botsdata $_counter $_botname $_junk $_tmp ) ^if 00s( $prioritypersonality ) 00p{ ^end ( CALL ) } 004 $inboot = true $csbase_token = 1 | 70368744177664 | 8796093022208 | 4398046511104 | 2199023255552 | 134217728 | 1048576 | 4096 | 255 | 1099511627776 | 2048 | 24576 | 4194304 $csbase_token -= 128 $csbase_response = 1048576 + 2097152 ^jsonlabel ( x ) ^jsfunctions ( ) ^sethostvariables ( ) ^setservervariables ( ) ^cacheignorereadwords ( ) ^settonalyzerconstants ( ) $field_vocabulary = ^jsoncreate ( PERMANENT object ) $_lang = ^getisolanguage ( %language ) $baseheaders = ^"~Accept: application/json ~Accept-Encoding: identity,*;q=0 ~Accept-Language: $_lang;q=0.5 ~Cache-Control: no-cache ~Content-Type: application/json ~Connection: close ~User_Agent: Kora, ChatScript " ^if 00h( ! $server ) 00={ $qabotshost = qabots.kore.com $server = ^"$qabotshost/api/1.1" } 004 ^if 00j( ! $protocol ) 049{ $protocol = https ^if 03n( $server == koreapps.com/api/1.1 or $server == onprem.korebot.com/api/1.1 or $server == 192.168.10.115/api/1.1 or $server == 127.0.0.1/api/1.1 or $server == 10.0.2.193/api/1.1 or $server == 10.0.23.254/api/1.1 or $server == localhost/api/1.1 ) 00s{ $protocol = http } 004 } 004 $reference_protocol = $protocol ^if 00t( ! $machinelearningapi ) 02w{ ^if 00f( %server ) 00%{ $machinelearningapi = http://10.0.23.179:6006/ml/intent } 01e else ( 1 ) 00+ { $machinelearningapi = http://hafaq-qa.kore.net:6006/ml/intent } 004 } 004 ^if 00h( ! $faqapi ) 02b{ ^if 00f( %server ) 00V{ $faqapi = http://10.0.2.193:5005/botfaqsearch } 013 else ( 1 ) 00~ { $faqapi = http://hafaq-qa.kore.net:5005/faq/search } 004 } 004 $host = ^burst ( ONCE $server / ) _0 = %pid _0 &= 255 _0 *= 40 ^if 00f( %server ) 00p{ ^sleep ( _0 ) } 004 $_headers = ^gethttpheaders ( $server null ) $_url = ^"$protocol://$server/public/streamsnew?isKora=true&newPayload=true" ^nofail ( RULE $publicbotdata = null $publicbotdata = ^jsonopen ( permanent get $_url null $_headers ) ) ^if 00s( %httpresponse != 200 ) 01v{ ^log ( OUTPUT_ECHO Boot data load failed\n ) $publicbotdata = ^jsoncreate ( permanent object ) } 004 $publicbotsversion = $publicbotdata.publicBotsVersion ^if 00q( $publicbotsversion ) 00I{ $_botsdata = $publicbotdata.bots } 023 else ( 1 ) 01~ { ^if 00r( $publicbotdata.bots ) 00I{ $_botsdata = $publicbotdata.bots } 00T else ( 1 ) 00D { $_botsdata = $publicbotdata } 004 } 004 ^notrace ( ^persistbotsinformation ( public $_botsdata ) ) ^notrace ( ^fetchkoragenericresponses ( ) ) $publicbots = ^jsoncreate ( PERMANENT array ) $_counter = 0 ^loop ( -1 ) 020 { $_botname = ^jsonpath ( "[$_counter].name" $_botsdata ) $_junk = ^jsonarrayinsert ( "UNIQUE PERMANENT" $publicbots $_botname ) $_counter += 1 } $_tmp = ^length ( $publicbots ) $_tmp = ^"Read $_tmp bots version $publicBotsVersion with remaining %freetext Kb text space %freeword dict words %freefact facts." $boottime = %fulltime $inboot = null $field_vocabulary = null ^jsonlabel ( "" ) ^if 00l( ! $publicbots ) 00r{ ^eval ( :quit ) } 004 ^return ( $_tmp ) `
^showtasks o 0 0 B( ^botname $$counter $$tasks $$alerts $$activityobject $_fields ) $$tasks = ^getlistofactionsforbot ( ^0 ) ^if 00v( ^length ( $$tasks ) > 0 ) 01D{ ^if 00h( $$tmpfile ) 00L{ ^log ( FILE $$tmpfile ^0 Tasks \n ) } 00D else ( 1 ) 00n { ^0 Tasks \n } 004 } 004 $$counter = 0 ^loop ( -1 ) 069 { @15 = ^query ( exact_sv $$tasks $$counter ? 1 ) ^if 00d( ! @15 ) 00p{ ^end ( LOOP ) } 004 $$counter += 1 $$activityobject = @15object $$activityname = ^taskdisplayname ( $$activityobject ) $_fields = ^listfields ( $$botname $$activityname action ) $_fields = ^substitute ( WORD $_fields "^title:" "^   " ) $$msg = ^join ( $$activityname \n "^  " $_fields \n ) ^if 00h( $$tmpfile ) 00F{ ^log ( FILE $$tmpfile $$msg ) } 00x else ( 1 ) 00h { $$msg } 004 } $$tasks = ^getlistofdialogsforbot ( ^0 ) ^if 00v( ^length ( $$tasks ) > 0 ) 01H{ ^if 00h( $$tmpfile ) 00N{ ^log ( FILE $$tmpfile ^0 Dialogs \n ) } 00F else ( 1 ) 00p { ^0 Dialogs \n } 004 } 004 $$counter = 0 ^loop ( -1 ) 04o { @15 = ^query ( exact_sv $$tasks $$counter ? 1 ) ^if 00d( ! @15 ) 00p{ ^end ( LOOP ) } 004 $$counter += 1 $$activityobject = @15object $$activityname = ^taskdisplayname ( $$activityobject ) $$msg = ^join ( $$activityname \n ) ^if 00h( $$tmpfile ) 00F{ ^log ( FILE $$tmpfile $$msg ) } 00x else ( 1 ) 00h { $$msg } 004 } $$alerts = ^getlistofalertsforbot ( ^0 ) $$counter = 0 ^if 00w( ^length ( $$alerts ) > 0 ) 01F{ ^if 00h( $$tmpfile ) 00M{ ^log ( FILE $$tmpfile ^0 Alerts \n ) } 00E else ( 1 ) 00o { ^0 Alerts \n } 004 } 004 ^loop ( -1 ) 069 { @15 = ^query ( exact_sv $$alerts $$counter ? 1 ) ^if 00d( ! @15 ) 00p{ ^end ( LOOP ) } 004 $$counter += 1 $$activityobject = @15object $$activityname = ^taskdisplayname ( $$activityobject ) $_fields = ^listfields ( $$botname $$activityname alert ) $_fields = ^substitute ( WORD $_fields "^title:" "^   " ) $$msg = ^join ( $$activityname \n "^  " $_fields \n ) ^if 00h( $$tmpfile ) 00F{ ^log ( FILE $$tmpfile $$msg ) } 00x else ( 1 ) 00h { $$msg } 004 } ^if 00h( $$tmpfile ) 00C{ ^log ( FILE $$tmpfile \n ) } 00u else ( 1 ) 00e { \n } 004 `
^showconsumed o 0 0 A( $_len $_count $_sentence $_words $_sentenceid $_wordindex $_sentendid ) $_len = ^length ( $gleaninfo.sentences ) ^if 00h( $_len > 0 ) 01${ Sentences: \n $_count = 0 ^loop ( $_len ) 01d { $_sentence = $gleaninfo.sentences[$_count] $_count : $_sentence \n $_count += 1 } } 004 \n ^if 00J( ^length ( $gleaninfo.maybeused ) != 0 ) 06${ Activity registrations for consumption: \n @0 = ^query ( exact_s $gleaninfo.maybeused ? ? ) ^loop ( -1 ) 05p { _3 = ^last ( @0all ) _4 : Words: $_words = null @1 = ^burst ( _5 ) ^if 00r( ^length ( @1 ) == 1 ) 03E{ $_sentenceid = _5 >> 56 ^loop ( 7 ) 01R { $_wordindex = _5 & 255 _5 >>= 8 ^if 00n( $_wordindex > 0 ) 00Z{ $_words = ^join ( AUTOSPACE $_words $_wordindex ) } 004 } $_words = ^substitute ( character $_words " " ", " ) $_words of sentence: $_sentenceid \n } 00x else ( 1 ) 00h { _5 \n } 004 } } 004 \n $_len = ^length ( $gleaninfo.usedup ) ^if 00h( $_len > 0 ) 03-{ Consumed: \n @0 = ^query ( exact_s $gleaninfo.usedup ? ? ) ^loop ( $_len ) 02Z { _3 = ^last ( @0all ) _0 = ^burst ( _4 - ) $_sentendid = _0 $_sentence = $gleaninfo.sentences[$_sentenceid] @2 = ^burst ( $_sentence " " ) Word _1 \( ^nth ( @2subject _1 ) \) of sentence: $_sentenceid \n } } 004 `
^favetable t 0 8 E( ^topic ^modifier ^main ^what $_x $_mod $_main $_lastfact ) $_x = ^join ( ^1 _ ^2 ) $_mod = ^1 $_main = ^2 ^if 00w( ^properties ( $_x ) != 0 ) 00y{ $_main = $_x $_mod = _ } 004 $_lastfact = ^createfact ( ( $_mod ^0 ^3 ) favorite $_main ) ^addproperty ( $_mod PATTERN_WORD ) ^addproperty ( $_main PATTERN_WORD ) `
^range_function_get_range o 0 0 A( ) ^respond ( ~range_control_relative ~range_control_static ) `
^range_function_extract_static_field o 0 0 A( ) $$numerical = null $$units = null ^unmark ( * _14 ) ^respond ( ~range_extract_static_fields ) $$context_end_value = $$numerical $$context_end_units = $$units ^mark ( * _14 ) $$numerical = null $$units = null ^unmark ( * _15 ) ^respond ( ~range_extract_static_fields ) $$context_start_value = $$numerical $$context_start_units = $$units ^mark ( * _15 ) ^if 00P( $$context_start_value < $$context_end_value ) 06C{ ^if 00Q( $$context_start_units == $$context_end_units ) 013{ ^"$$context_start_value $$context_end_value $$context_start_units" } 04L else 00&( $$context_start_units != null and $$context_end_units == null ) 013{ ^"$$context_start_value $$context_end_value $$context_start_units" } 02J else 00&( $$context_start_units == null and $$context_end_units != null ) 011{ ^"$$context_start_value $$context_end_value $$context_end_units" } 00J else ( 1 ) 00t { ^"No Range Found" } 004 } 00J else ( 1 ) 00t { ^"No Range Found" } 004 `
^range_function_extract_relative_field o 0 0 A( ) $$start_units = null $$start_value = null ^unmark ( * _15 ) ^respond ( ~range_extract_relative_fields ) $$initial_val = $$start_value $$initial_units = $$start_units ^mark ( * _15 ) $$diff_units = null $$diff_value = null ^unmark ( * _14 ) ^respond ( ~range_extract_relative_fields.relativity ) ^mark ( * _14 ) ^if 00U( $$initial_units == null and $$diff_units != null ) 00G{ $$initial_units = $$diff_units } 00W else ( 1 ) 00G { $$diff_units = $$initial_units } 004 ^if 00o( $$diff_value < 0 ) 02u{ ^if 00D( $$initial_units == $$diff_units ) 01P{ $$range_begin = $$initial_val + $$diff_value $$range_end = $$initial_val ^"$$range_begin $$range_end $$diff_units" } 004 } 02K else ( 1 ) 02u { ^if 00D( $$initial_units == $$diff_units ) 01P{ $$range_begin = $$initial_val $$range_end = $$initial_val + $$diff_value ^"$$range_begin $$range_end $$diff_units" } 004 } 004 `
^range_function_extract_single_field o 0 0 A( ) $$numerical = null $$units = null ^unmark ( * _14 ) ^respond ( ~range_extract_static_fields ) $$context_start_value = $$numerical $$context_start_units = $$units ^mark ( * _14 ) $$numerical = null $$units = null ^unmark ( * _15 ) ^respond ( ~range_extract_static_fields ) $$context_end_value = $$numerical $$context_end_units = $$units ^mark ( * _15 ) ^if 00^( $$context_start_value == null or $$context_end_value == null ) 02B{ ^if 00t( $$context_start_value ) 00W{ ^"$$context_start_value $$context_start_units" } 004 ^if 00r( $$context_end_value ) 00S{ ^"$$context_end_value $$context_end_units" } 004 } 00r else ( 1 ) 00b { } 004 `
