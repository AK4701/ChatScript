 ^reuse__ "Wraps our reuse rule so we don't move forward if we are running unit tests"
 ^retry__ "Wraps our retry so we don't move forward if we are running unit tests"
 ^refine__ "Wraps our retry so we don't move forward if we are running unit tests"
 ^gambit__ "Wraps our retry so we don't move forward if we are running unit tests"
 ^endiftest "This will end the current rule if we are in testing mode. Should be placed on the first line of the macro we want to stop propagating, between conditial UNITTEST separators"
 ~range_initiate "initiation words for range_entity"
 ~range_terminate "termination words for range_entity"
 ~units_range "units set for range_entity"
 ~increment "increment words for range_entity"
 ~decrement_unsorted "unsorted decrement words for range_entity"
 ~decrement "decrement words for range_entity"
 ~timereferences "Different ways a reference date can be mentioned"
 ~datefrequency "Date frequency words"
 ~time_frequency_adjectives "Adjectives that imply frequency"
 ~time_alternate_adjectives "Time adjectives that indicate alternate"
 ~time_approximate_adjectives "Adjectives that imply a probable time"
 ~time_forward_words "Words that indicate forward in time"
 ~time_backward_words "Words that indicate backward in time"
 ~time_duration_start "to identify duration start"
 ~time_duration_end "to identify duration end"
 ~time_clock_units "to identify units of clock time"
 ~time_day_units "to identify units of day"
 ~time_relative "to identify relativity"
 ~time_absolute_relative "to identify absolute mentioned in relative"
 ~time_portion "to identify portion in one full"
 ~time_duration_keywords "to identify duration related keywords"
 ~time_frequency "to identify frequency"
 ~time_place_value_words "to identify place value system in words"
 ~initiateaction "keywords that hint to a user request"
 ^getlocationpatternarray "Returns an array of patterns that match location utterances"
 ^getcompanypatternarray "Returns an array of patterns that match company/roles utterances"
 ^secondbeforefirst "the pattern that indicates the following phrase might contain a task that needs to be executed first"
 ^secondafterfirst "the pattern that indicates the following phrase might contain a task that needs to be executed later"
 ^validalphamenuoption "validates a match against a valid menu option"
 ~softseparator "used to separate two fields"
 ~hardseparator "used to separate clauses"
 ~arrayseparator "used to separate elements of an array of values"
 ~time_duration "to identify duration"
 ~dayvalue "Bit codes corresponding to the days: ~dayname (Friday Monday Saturday Sunday Thursday Tuesday Wednesday)"
 ~dateunits "Units of time starting from day"
 ~dayweek "Units of time starting from day"
 ~timedata "All keywords that can trigger ~date_time_wrapper"
 ~no_valid_values "Lone time keywords that might not be valid for alerts"
 ~time_units "To identify units of time"
 ~employment "To identify role and tile"
 ^ismoreinput "report if more input is pending"
 ^dumpcallstack "Log the callstack"
 ^getsentenceindexfromposition "Given encoded data on which sentence and which word in sentence, retrieves sentence index"
 ^getstartindexfromposition "Given encoded data on which sentence and which words in sentence, retrieves start index"
 ^getendindexfromposition "Given encoded data on which sentence and which words in sentence, retrieves end index"
 ^getwordindexfromposition "Given encoded data on which sentence and which word in sentence, retrieves word index"
 ^getpositionfromsentenceandindex "Given sentence index and which word in sentence, encode it into a position"
 ^getpositionfromsentenceandrange "Given sentence index and which words in sentence, encode it into a position"
 ^iswordwithinrange "Returns true if a word position is within a range"
 ^computecharbitmask "Returns a mask with 0/1 characters set for each word in a range"
 ^computeconceptlocationmask "Returns a mask with 0/1 characters set for each word in a concept list location range"
 ^charbitmaskor "Perform the equivalent of bitwise OR on two strings of 0's and 1's"
 ^countcharbitsset "Counts the number of 1's set"
 ^markvolleyusedrange "Declare these words used up either in field value or in task name for this volley"
 ^markusedrange "Declare these words used up either in field value or in task name"
 ^markusedmatch "Declare these words used up using the position of a match variable"
 ^markusedposition "Declare these words used up over a position mask"
 ^unmarkusedrange "Restore these words either in field value or in task name"
 ^unmarkusedposition "Restore these words over a position mask"
 ^markusedmask "Mark words used up via a mask"
 ^markused "Declare task name words used up"
 ^joinwords "Join words in a factset"
 ^replacewordatindex "Replace a word at a specified position with another"
 ^istransientjson "Returns true if a JSON object or array reference is transient"
 ^makejsonpermanent "Removes the transient flag from json facts"
 ^makejsontransient "Adds the transient flag to json facts"
 ^jsonparent "Return the parent JSON fact for a given object value"
 ^jsonparentfromproperty "Return the parent JSON fact for a given property value"
 ^jsonparentfrompropertyinarray "Return the parent JSON fact for a given property value, limited to an array"
 ^jsonpropertiesforobjectsinarray "From an array of JSON objects, extract facts based on a property"
 ^jsonvaluesforobjectsinarray "From an array of JSON objects, extract facts based on their value"
 ^jsonpropertyvaluesforobjectsinarray "From an array of JSON objects, extract facts based on their value for a property"
 ^jsonpropertiesforobjectsinset "From a factset of JSON objects, extract a property"
 ^deletejsonobjectsinarray "Delete objects from a set of arrays for an object"
 ^makearrayfromset "Convert a factset into an array"
 ^insertjsontypedvalue "Insert a property into a JSON object/array making sure that the type is conformed to"
 ^insertjsonobjectproperty "Add a property to an object in some json, creating the object if necessary"
 ^safejsondelete "Safely delete a json object - that is don't cascade delete down to referenced json"
 ^createoruseobject "Create or use existing JSON object within a container object"
 ^getaccessiblebots "prepare accessible bots list"
 ^listlinkedbots "Lists all the bots linked to the universal bot"
 ^replacetokens "get the modified message for an input"
 ^getrandomnumberwithin "get a random value with in the given range"
 ^getoriginalmsgfromgenericresponses "get original message for generic responses"
 ^fetchmessageforkey "get the modified message for an input. prefixNewline suffixNewline are optional arguments"
 ^messagemap "get the modified message for an input. prefixNewline suffixNewline and skipAddingToCompositeKey are optional arguments"
 ^checkmessagemap "checks to see if a message is in the generic messages"
 ^logif "Only log text if a variable has been defined"
 ^rightpad "Right pad a string with a character, space is the default"
 ^stringlist "Convert a set of strings into a text list"
 ^trimwhitespace "Trims the whitepace from the input. Leading and trailing spaces are removed, multiple spaces are replaced with a single space"
 ^appendarray "Append the objects from one array on to another and returning the unique combination"
 ^findwordinconcept "Find a word in a concept and return the true spelling"
 ^cacheignorereadwords "Caches the ignored words in a layer 0 variable"
 ^isignorereadword "returns true if a word is to be ignored - handles internal concepts"
 ^sendmsgsummary "Add a message to the OOB response object"
 ^sendconfirmationsummary "Create a confirmation summary of filled and empty fields"
 ^sendchoicessummary "Create a choices summary"
 ^sendinfolistsummary "Create a InfoList summary"
 ^sendquestionsummary "Create a question summary"
 ^sendyesornoquestionsummary "Create a yes/no question summary"
 ^sendgreetingsummary "Create a greeting summary"
 ^sendstatementsummary "Create a statement summary"
 ^sendconfirmationquestionsummary "Create a confirmation question summary"
 ^sendvalidationsummary "Create a validation summary"
 ^sendchitchatsummary "Create a chit chat summary"
 ^senderrorsummary "Create an error summary"
 ^matchpatternarray "returns value and position of the first match ( by position ) in array of patterns"
 ^getwordcount " get number of a words in ^string before position on ^index letter. Words are separated by one space"
 ^rememberword "Create a fact with the word to ensure it is part of the dictionary"
 ^forgetword "Remove a reference count to a word"
 ^maskindirection "unmark part of the current sentense in ^direction from ^wordindex"
 ^castboolean "Given a value that is a true or false, will return true or null"
 ^stripquotes "Strips quote characters from the start and end of a string"
 ^getcurrentvolleysentences "get all the sentences related to current volley"
 ^getisolanguage "Return an ISO language code for a CS language"
 ^gethttpheaders "Build up the HTTP headers to use for a request"
 ^comparepropertieslength "Make sure that all properties of an object have the same length then; fail if they don't; return that length if they do"
 ^jsregex "Returns the first match of a regular expression in a string"
 ^get_padded_left "Pads the len number of pad characters to the left of input"
 ^format_time "Formats the time in Thh:mm:ssZ format. It works with $$time_computed_hrs $$time_computed_mins and $$time_computed_secs"
 ^format_date "Formats the date in yyyy-mm-dd, mm-dd-yyyy, dd-mm-yyyy or yyyyMMdd formats. It works with $$date $$month and $$year variables."
 ^hrs_mins_secs_to_secs "Convert hours minuts seconds to seconds"
 ^secs_to_days_hrs_mins_secs "Converts  secs to days, hrs, mins, secs"
 ^get_current_date_time "will get current system date & time"
 ^unitsymboltotext "Converts a unit symbol into text"
 ^findmeasurementcategory "Determines the measurement category for a unit"
 ~units_parse "Wrapper topic for units parsing, identifies a type, the unit name and the unit amount. This may be computed if there are compound units"
 ^matchcurrencycode "Check to see if the current input matches a particular currency code"
 ~currency_parse "Wrapper topic for currency parsing"
 ^get_address "Returns address string... _0 is set into position "
 ^get_time_zone_value "try to find a direct value for time zone offset"
 ^get_time_zone_name "try to find time zone offset value by name"
 ^get_time_zone "Returns time zone offset value"
 ^get_date "Returns a date from the input, in yyyy-mm-dd format or other specified format"
 ^get_date_time "Returns a date and time from the input, in yyyy-mm-ddThh:mm:ssZ format"
 ^get_date_frequency "Returns a frequency mentioned in the input"
 ^get_time "Returns time mentioned in the input"
 ^get_time_frequency "Returns time frequency mentioned in the input"
 ^get_time_duration "Returns time duration mentioned in the input"
 ^get_frequency "Returns a frequency in date/time mentioned in the input"
 ^get_duration "Returns a duration mentioned in the input"
 ^get_date_period "Returns a date period mentioned in the input"
 ^setformatdate "set date variables accordingly to format"
 ^getpaddedleft "Pads the len number of pad characters to the left of input"
 ^formatdatetime "Formats the date and time in yyyy-mm-ddThh:mm:ssZ format"
 ^getdatetime "Returns a date and time from the input, in yyyy-mm-ddThh:mm:ssZ format"
 ^getdate "Returns a date from the input, in yyyy-mm-dd format"
 ^getfrequency "Returns a frequency mentioned in the input"
 ^isleapyear "Returns 1 if the year is leap and 0 otherwise."
 ^getmonthnamefromindex "Given a 0-based index of a month, returns the month name."
 ^getmonthindexfromname "Given a month name, returns it's 0-based index"
 ^getpreviousmonth "Given a month, returns the previous month"
 ^getnextmonth "Given a month, returns the next month"
 ^getdaysinmonth "Given a month and a year, returns days in that month. If year is null, it defaults to the current year."
 ^validatedate "Checks if a given date is valid. If invalid, it sets $$error_in_date."
 ^getrelativedate "This function computes a date given a reference (today, tomorrow etc.), units to skip (2 days, 3 months etc.) and a skip direction (forward in time or backward)."
 ^setdaynamebit "Sets the bit corresponding to a day of week. Sunday is LSB, Monday the second LSB and so on."
 $$duration "Duration between 2 dates expressed in seconds"
 $$from_d "From date"
 $$from_m "From month"
 $$from_y "From year"
 $$to_d "To date"
 $$to_m "To month"
 $$to_y "To year"
 $$from_timeinseconds "From date converted to seconds"
 $$to_timeinseconds "To date converted to seconds"
 ~date_duration "Wrapper topic for all date duration, which internally calls the ~date_parse topic"
 $$year_frequency "Once in how many years"
 $$month_frequency "Once in how many months"
 $$date_frequency "Once in how many days"
 $$days_of_week_to_set "Used to describe the days of week set. Each bit represents a day. Sunday is the LSB, Monday, the second LSB and so on."
 ~date_frequency "Captures frequency in date"
 ~date_overflow "Computes any overflow or underflow in date. Uses $$date $$month $$year $$hour $$minute $$second and updates them with the computed values."
 ~date_parse "Wrapper topic for all date patterns, which internally calls ~identify_year ~identify_month and ~identify_date topic to get the date"
 ^datetosec " convert date to absolute seconds "
 ^maskoutside "unmark part of the current sentense outside interval "
 ^get_dp_specialcases " different other patterns  "
 ^get_dp_year " absolute whole year  "
 ^get_dp_month " absolute whole month of the current year  "
 ^get_dp_yearmonth " absolute year month  "
 ^get_dp_totodayabsolute " from date to today "
 ^get_dp_fromtodayabsolute " from today to date "
 ^get_dp_lastperiod " date relative period before today"
 ^get_dp_nextperiod " date relative period around today"
 ^get_dp_thisperiod " this period"
 ^get_dp_relativeforward " date relative period forward from absolute date"
 ^get_dp_relativebackward " date relative period backward from absolute date"
 ^get_dp_absolute " date period between 2 absolute dates"
 ^get_dateperiod "Returns a date period mentioned in the input and used interval at _0 "
 ~date_reference "Computes a reference date. Eg. today, tomorrow, day before yesterday. This topic does not use the user input. It works on the value of $$time_reference set outside. Returns the referenced date through $$date_referenced, $$month_referenced and $$year_referenced."
 ^convert_hrs_mins_secs_to_secs "will convert passed hours minuts seconds to seconds"
 ^convert_secs_to_hrs_mins_secs "will convert passed secs to hrs, mins, secs"
 ^identify_clock_units "will identify if the given number belongs to hr / min / sec with the help of clock units"
 ^convert_pm_time_to_military_time "will convert time mentioned in pm to military equivalent"
 ^adjust_time_as_per_day_unit "will adjust given hr, min, sec based on the given day unit"
 ^tokenize_to_hrs_mins_secs "will tokenize the given actual time input to hr, min, sec equivalents"
 ^compute_duration "will compute duration from given from time, to time"
 ^compute_relative_time "will compute relative time mentioned in relative to a given base time"
 ^compute_relative_to_base "will compute relative time to identified base time"
 ^assign_time_to_base "will assign given hrs, mins, secs to base hrs, mins, secs"
 ^compute_relative_to_now "will compute relative time to current system time"
 ^get_time_portion_value "will convert the given portion in full to its number equivalent"
 ^parse_compute_duration "will parse for the time components in the from part, to part then computes the duration"
 ^set_frequency_with_value "will set time frequency variables with given value"
 ^get_direction "will get the direction ( ie., to add / subtract ) based on the given word"
 ^get_place_value "will get the value for the place given"
 ~time_compute_duration "will compute the duration after identifying time components in terms of hrs, mins, secs given in any format"
 ~time_compute_relative "will compute the relative time after identifying time components in terms of hrs, mins, secs and a base time given in any format"
 ~time_identification "will identify time in terms of hrs, mins, secs given in any format ie., may it be relative or absolute"
 ~time_identify_components "will identify time in terms of hrs, mins, secs given in any format"
 ~time_identify_frequency "will identify the frequency, at what time, in terms of hrs, mins, secs given in any format"
 $$time_computed_hrs "will have the final computed hrs"
 $$time_computed_mins "will have the final computed mins"
 $$time_computed_secs "will have the final computed secs"
 $$time_computed_days "will have the final computed days"
 $$time_frequency_hrs "will have the time frequency's hrs"
 $$time_frequency_mins "will have the time frequency's mins"
 $$time_frequency_secs "will have the time frequency's secs"
 $$time_computed_total_secs "will have the total computed secs which is equivalent of days, hrs, mins, secs variables, infact they are computed from this value"
 $$time_computed_duration_secs "will have the duration in seconds"
 ~time_parse "will identify time in terms of hrs, mins, secs given in any format ie., may it be relative or absolute, compute duration, identify time frequency"
 ~time_reusable_rules "the purpose of this file is to collate all the reusable rules in time entity"
 $$year "Saves the year mentioned or implied in the input"
 $$month "Saves the month mentioned or implied in the input"
 $$date "Saves the date mentioned or implied in the input"
 $$current_date "Current date"
 $$current_month "Current month"
 $$current_year "Current year"
 $$current_dayinweek "Current day in week"
 $$current_hr "Current hour"
 $$current_min "Current minute"
 $$current_sec "Current second"
 $$error_in_date "Error while computing the date. This is set by all topics and functions used in the date and time entity"
 $$ambiguity_in_date "A boolean used when a ambiguity is seen while computing date"
 $$ambiguous_date_1 "This is a temporary variable set only when an ambiguity in date is seen"
 $$ambiguous_date_2 "This is a temporary variable set only when an ambiguity in date is seen"
 $$ambiguous_month_1 "This is a temporary variable set only when an ambiguity in date is seen"
 $$ambiguous_month_2 "This is a temporary variable set only when an ambiguity in date is seen"
 ~date_time_wrapper "This is a wrapper that merges date and time picking logic"
 ^getpatternmatchposition "find position of the first occurence of the pattern. A position is also at _0"
 ^scantimeconceptsequences "find positions of all time-related concept sequences"
 ^scantimeconcepts "find positions of all time-related concepts"
 ^parse_address "will parse address based on the input country name"
 ^tokenize_to_us_state_zip_code "will tokenize the given input to zip code, 4 code equivalents"
 ~address_parse "will identify address in terms of name, house no, street name, town name, state name and zip code given by user"
 $$address_person_name "will have the person name"
 $$address_house_number "will have the house number"
 $$address_street_name "will have the street name"
 $$address_town_name "will have the town name"
 $$address_state_name "will have the state name"
 $$address_country_name "will have the country name"
 $$address_zip_code "will have the zip code"
 $$address_zip4_code "will have the 4 code related to zip"
 ~address_parse_india "will identify address in India"
 ~address_parse_us "will identify address in U.S"
 ~test_entity_functions "purpose is to test entity get functions"
 ^get_location "returns first possible location and set _0 into position of the location"
 ^splitsentence "take two phrases and push one on to the input queue and use the other to replace the current sentence"
 ^vlog "customized log function for my(vishnu) use: logge in LOGS/vlog.txt"
 ^note_permanent_facts "We gather permanent json as facts so we can delete longer lived json when done an action"
 ^show_failed_response "display header and response data for failing json call"
 ^invoke_json "perform appropriate http call to get back json data and test for failures. ^host is an optional argument, if passed it needs to be used instead of the kore base url."
 ^sendoobforcancel "sends OOB for cancel request"
 ^setserversettings "Given a \$server string, set the userid, authorization and host variables according to what it should be. Second argument is a boolean debug flag."
 ^taskdisplayname "Return the display name for a task"
 ^taskid "Return the id for a task"
 ^getfieldkey "The key name developer associates with this field. We store our data on this named variable. (case insensitive)"
 ^getfieldtitle "The name we show the user for this field"
 ^getfieldrequired "Is it required"
 ^getfieldlowercasetitle "The name we show the user for this field"
 ^getfieldhelp "Help text for field"
 ^getfieldfieldtype "things like textbox, array, typeahead, etc"
 ^getfieldtype "things more refined like string, number, etc"
 ^getfieldmetadata "things even more refined for NL like Company Name, Human Name, etc"
 ^getdateformat "gets format of date field"
 ^getfieldfromkey "returns a field given its key"
 ^setkeys "creates paired key and keyvale global variable names"
 ^acceptvalue "Take data from the glean saved and store it on key, using up that glean. Then move along"
 ^parse_dynamicdropdowninfo "Gets children field from dynamicDropDownInfo object. If ^filters is not null, then it is a dynamicdropdown from an alert filter. "
 ^resetkeys "resets field"
 ^erasefieldinfo "Clean field data"
 ^erasedependantfields "Erases values from dependant fields"
 ^gettimetosave "time for which the field value should be remembered in minutes"
 ^finddefaultvalue "Gets the default value or the session value of a field. Saves the title in $$defaultTitle and value in $$defaultvalue"
 ^memorizedfile "Return the name of the memorized file"
 ^cleanmemorized "Remove old, stale items from memory"
 ^memoryheader "Returns the reference to a memorized action"
 ^validmemory "Verifies that a memorized action is still valid"
 ^findmatchingdatabykind "Return the memorized data for field of a particular kind"
 ^findmatchingdatabyfieldname "Return the memorized data for a field name"
 ^memorizeaction "track values of a completed action"
 ^cleancachekey "Sanitize a key to avoid characters that will cause jsonpath and mongo problems"
 ^getcacheobject "Return an individual cache"
 ^getcacheitemobject "Return the object for an item in a particular cache"
 ^getcacheitem "Return the data for an item in a particular cache"
 ^getcacheitemwhen "Return the when date/time for an item in a particular cache"
 ^savecacheitem "Save data to a particular cached item, replacing what was there before"
 ^loadmemorized "Load any memorized data"
 ^savememorized "Save the memorized if it has changed"
 ^isrecentbot "Returns true if the bot has been used recently"
 ^botlastused "Returns the date/time when this bot was last used"
 ^rememberbot "Remembers the bot as the last bot explicitly as well as in LTM"
 ^push_choice "Save any current displaylabel/displayvalue data"
 ^pop_choice "Restore any current displaylabel/displayvalue data"
 ^erasefields "clear field variables involved in form"
 ^reset_bot_search "Clear out any remainding places to search for bots"
 ^reset_bot_glean "Clear old gleaned bot data, setting up for new volley"
 ^reset_glean "Clear old glean data, setting up for new glean"
 ^reset_fields "Clear old field data, setting up for new  field fillin"
 ^reset_intent "Clear old bot and task data"
 ^reset_context "Clear out the task context stack"
 ^reset_lead "Clear all old data, setting up for new lead"
 ^iswordavailableinsentence "See if word can be found, fail otherwise"
 ^iswordavailable "See if word can be found, fail otherwise"
 ^directinputmatch "Can we find this label already in input"
 ^create_element_array "generate an array from template on json data (use $$item as reference)"
 ^extract_alternates "transfer alternates matches to a new array w/o the match count in front"
 ^parsepossessive "Parse out any possessive from a word, returns _0 and _1 as the base word and the possessive"
 ^show_choice "Displays choices from an array."
 ^display_choice "Displays choices from an array. Uses @1 as its temp array"
 ^addttimerepresentations "adds different time representations"
 ^saveintent "Save the intent matching data in gleaninfo"
 ^formattime "Formats the time in Thh:mm:ssZ format. It works with $$time_computed_hrs $$time_computed_mins and $$time_computed_secs"
 ^formatdate "Formats the date in yyyy-mm-dd format"
 ^maketimeutc "Converts local time to GMT using $utcoffset"
 ^maketimelocal "Converts GMT time data to local time data using $utcoffset value which is +hours:minutes or -hours:minutes"
 ^findcommonsentenceindex "find the sentence with the most matching words in it, prefer the earliest"
 ^findbestwordindex "Find the best word closest to the previous and next words"
 ^cleanlabel "Clean a label for matching"
 ^calculatewordcredit "Calculate the score given to a word based on its position in a sentence"
 ^calculatetasktypebonus "Calculate the bonus for this type of task in this sentence"
 ^scoremlexactmatch "Identifed a task by an exact ML match, so score it accordingly"
 ^processlabel "Given a label, find out if it plausibly matches"
 ^matchfieldname "Find index of a choice from input"
 ^start_intent "Begin a task"
 ^isnullpattern "Returns true if the pattern is null or matches anything"
 ^isallpattern "Returns true if the pattern is memorizing something or everything"
 ^testrejoinders "Test the patterns in a rejoinder set, sets $$rejoinderMatch if there is a match"
 ^composeformdata "Get values of fields to post to server. don't post null field values. Returns a json object"
 ^get_coordinates "Return the coordinates for a location"
 ^converttomilitarytime "Given a string 4:30pm, will burst it and return it as an array [16, 30, 1630]"
 ^activate_alert "activate an alert"
 ^alert_frequency "text description of alert frequency data"
 ^format_frequency "convert variables into Kore format"
 ^get_alert_filters "get filters of an alert"
 ^set_alert_timing "set how often to run this alert -- minute hour dayofmonth(1-31) month(1-12) day-of-week(0-6 1=monday)  "
 ^setalertchannelinfo "set channel information for an alert"
 ^set_alert_mute "set  alert mute -- true (enable) or false (mute)"
 ^set_alert_filter "set alert filter"
 ^set_alert_fields "set alert fields"
 ^set_alert_name "set alert name"
 ^email_instructions "Email webhook setup instructions"
 ^get_closest_every "get nearest available time interval for frequency"
 ^isvalidattime "Check if capture input for an interval actually exists in our array of possible (dropdown) values. Return true if it does, false if it doesn't"
 ^get_closest_at "Return the nearest available time interval for an 'At' interval"
 ^buildfrequencychoicelist "create the list with default, daily, weekday etc "
 ^lookupfrequencychoice "look if the given list element is in input"
 ^korereminder " Set reminder from Kora. ^delay is in seconds. after the delay, $$reminder is set to true in ~handle_oob "
 ^createaction "prepare data for a generic action call"
 ^process_action "perform requested action of bot"
 ^get_search_by_name "what opportunites match this name"
 ^getbotnameproperty "Use the correct property name based on the format of the parameter"
 ^publicbotdata "Return the data container for the public bots"
 ^getbotobject "Return the bot object given a name or stream id"
 ^isbotinarray "Return true if the bot is a member of an array of bots"
 ^ispublicbotbyid "Return true if the bot id is for a public bot"
 ^isprivatebot "Return true if the bot id is for a private bot"
 ^isnonfunctioningbot "Returns true if a bot has no actions, alerts, dialogs and not a knowledge task"
 ^linkedprivatebot "Return the reference to a private bot linked to a public one"
 ^isbotlinkedtouniversal "Returns true if a bot is a linked bot to the Universal bot"
 ^getbotdatabyname "find named bot data (owned or accessible)"
 ^isdevelopmentactivity "Return true if this is a development activity"
 ^getactivitytype "Return either actions or alerts for the type of the task"
 ^getactivity "Returns the activity object for a bot"
 ^getactivitybyid "Returns the activity object given an id"
 ^createbotinfo "create the global blob of the bot data (not task specific)"
 ^setbotidandname "given bot data clump, set the global name and id of the bot"
 ^getbotidfromname "find generic id of a bot with this name"
 ^getbotnamefromid "find name of a bot with this generic id"
 ^getlistofactivitiesoftype "find array of activities of a type for a bot"
 ^getlistofactionsforbot "find array of names of actions given for a bot"
 ^getlistofdialogsandactionsforbot "find array of names of actions and dialogs given for a bot"
 ^getlistofalertsforbot "find array of names of alerts given for a bot"
 ^getlistofdialogsforbot "find array of names of dialogs given for a bot"
 ^getlistoffaqsforbot "find array of names of FAQ collections given for a bot"
 ^getactivitynamesforbot "return a list of primary activity names for a bot"
 ^getactivityfields "Get fields for a particular activity"
 ^getbotconfirm "Get task confirm status of bot"
 ^getactivityconfirm "Must we confirm this activity"
 ^getactivitytaskid "Return the taskid for the named activity of the bot"
 ^getresidentfield "Get resident field corresponding to field"
 ^getresidentfieldinfo "Get resident field blob"
 ^removespecificfields "Removes fields with on basis of fieldtype"
 ^isbotnameinstalled "Has the user installed a specific bot"
 ^isbotnameaccessible "Is a specific bot accessible by the user"
 ^botinstalled "get bot installation status"
 ^generatebotchoices "Generate a list of tasks for a bot"
 ^addfieldsynonyms "set up the field synonyms concepts from synonym data"
 ^addfieldconcepts "makes field name into a concept. Synonyms for it to be added elsewhere"
 ^deletefieldconcepts "delete generic concept of fieldname (all members)"
 ^addpatternconcepts "Associate words in a pattern to a bot"
 ^deletepatternconcepts "Remove words in a pattern from a bot"
 ^deleteignorewords "Delete the ignored words concepts"
 ^defineignorewords "Create facts for words to ignore in a task"
 ^deleteactionvocabulary "deletes words from task names we dont know to concept list to assure spell checking does not harm them"
 ^deletedialogvocabulary "deletes words from dialogs names"
 ^generatedialogvocabulary "add words from dialog names we dont know to concept list to assure spell checking does not harm them"
 ^generateactionvocabulary "add words from task names we dont know to concept list to assure spell checking does not harm them"
 ^addbottasks "Add the tasks for a private/enterprise bot"
 ^addtasksynonyms "set up the synonyms for task or dialog intent name words (global per bot)"
 ^persistbotinformation "Add individual bot elements be members of concept ~k-bot, augment dictionary by words of fields and actions and alerts"
 ^mergebotinformation "Merge an individual bot elements be members of concept ~k-bot, augment dictionary by words of fields and actions and alerts"
 ^persistbotsinformation "Make bot list elements be members of concept ~k-bot, augment dictionary by words of fields and actions and alerts"
 ^deletebotsfromconcept "remove xref data on loaded local bots"
 ^getuserinstalledbots "List bots + alerts & actions of bots the user has installed"
 ^deleteprivatebots "Delete a user's private bots"
 ^preparebotslistforfetchingbotsdata "prepares the list of bots for which we need the bots information"
 ^getuserprivateandenterprisebotdata "List of bots having information of id, name, alerts & actions"
 ^fetchkoragenericresponses "get all generic responses for KORA"
 ^botauthorized "finds if a bot requires authorization"
 ^install_bot "install a bot"
 ^get_streaminfo_for_bot "get stream details"
 ^get_authorization "See if user is authorized to perform this task and has taken the needed steps"
 ^use_auth_data "Use the correct account authorization data for the current task"
 ^get_instance_auth "retrieve auth data on an instance"
 ^set_instance_auth "set auth data on an instance"
 ^get_order_id "buy this alert/task"
 ^get_instance_data "retrieve data on an instance"
 ^get_order_instance "get our instance data for this alert/action"
 ^get_instance "get our instance data for this alert/action, but instance ids are not cached for alerts"
 ^get_instance_fields "set dynamic fields for this task"
 ^prepare_bot "Get basic data for the activity involved including authorization data"
 ^fetchmodifiedmessagesforbot "get all modified messages for a specific bot"
 ^intentmatchresults "Record intent match results"
 ^cachebottaskresults "Record the results of a bot task identification, so we don't have to repeat it"
 ^getthreshold "Get a threshold value for a bot mode"
 ^getfaq "Check for an FAQ given some input"
 ^getmachinelearning "Check ML data for a given input"
 ^locatematchingtasksfrombot "does this bot cover the task"
 ^locatebesttask "From gleaning, look at ALL bots of a collection and their tasks/alerts to find best match w/o knowing bot in advance"
 ^ismultipletask "Returns true if we want to consider multiple tasks and there is another task to process"
 ^push_action "Save the current task state"
 ^pop_action "Restore a previous task"
 ^isittask "Check to see if the current volley input describes a task"
 ^get_ml_names "Get the ML matched task names into an array"
 ^showfaq "Show the FAQ answer"
 ^extractspreadsheetid "Will extract and return a google spreadsheet id from its url"
 ^parsespreadsheetjson "Given the url to a google spreadsheet, will retrieve it's content in json form and creates a result object with two matched arrays: utterance and expectedintent"
 ^bulkmatchinput "Iterate through an array of utterance and locate tasks that match. Returns an array of objects"
 ^bulkmatchmessage "Will churn out a user friendly output of ^bulkMatchInput"
 ^getcolumnvalue "Return the appropriate value for a type of column object"
 ^bulkresultsextract "Given a json from ^bulkMatchInput and an argument of type of match  -exact or alternates- , will return an array containing the items as string"
 ^bulkspreadsheetcsv "Take an object with properties containing arrays of the same length, and parse them as columns; return the output formatted as csv"
 ^toggle_mute "Toggle mute status of a bot notifications"
 ^get_active_instance_ids "get list of active alerts set up by user"
 ^get_active_instances "get json of active alerts set up by user"
 ^refresh_alerts "refresh all tasks"
 ^clear_history "clear history"
 ^delete_bot "delete bot and stop notifications"
 ^get_active_accounts "list active accounts"
 ^rename_account "rename account"
 ^delete_account "delete an account"
 ^delete_alert "deletes an existing alert"
 ^scanusageindirection "find first used/unused word in sentence ^sentenceIndex in ^direction between ^start and ^end"
 ^findpatternindirection "find position of first occurence of ^pattern in ^direction starting in ^position"
 ^maskpattern "remove all matched parts from input"
 ^cleaninput "clean current unmasked input in ^direction"
 ^isfielddependent " does a fields still have unresolved dependon fields "
 ^getfieldpatterns "get array of field patterns for given field ^name"
 ^filterarraybyvalue "filter array by value.. only elements containing ^value remain"
 ^getkindoffield " get field kind "
 ^getkindtype " check that kind is supported and get type of field kind "
 ^getregexvalue "Extract words based on a regex from a sentence"
 ^getformattedkindvalue "find a value of formatted field of given kind in the current sentence, return its' position on _0 "
 ^getcontextvalues "Return the set of values for an variable from the context"
 ^gettextvalue "find a value of given ^kind in text ^input "
 ^getfieldvalue " get field value"
 ^acceptfieldvalue " assign field value to key variable "
 ^getunformattedvalue "get unused text value within ^segment moving in ^direction from name"
 ^getformattedvalue "get value of first unused ^kind value within ^segment moving in ^direction"
 ^getsinglefieldkindvalue "get a value of the first unused ^kind variable within ^segment moving in ^direction"
 ^getkindvalue "get a value of ^kind variable within current segment"
 ^getfieldkindvaluearray "get an array of values of ^kind type within ^segment moving in ^direction"
 ^getfieldkindvalue "get values of ^kind type within ^segment moving in ^direction. it may be an array of values"
 ^getpatternvalue " get kind value from pattern"
 ^processnamedfields " match field names and their values in input "
 ^processunnamedfields "try to guess values for fields without names in input"
 ^getunusedinput "collect all unused parts of input into one string"
 ^processpatternfields "match pattern field values in input"
 ^processdefaultvalues " set default values to unprocessed fields "
 ^scanformattedvalues "find position and values for all formatted values"
 ^interposition "determine interposition of two segments"
 ^findnameindex " find index of field with ^name in bot description array "
 ^scannamedfields "find position and values for all field names"
 ^setdependentonfields " determine all dependson fields"
 ^processbatchfields " process fields set in taskinfo.fields[] in batch mode "
 ^processfields " set global variables and main workflow for field processing "
 ^processlonefield " process a lone field.  Field should be prepared and filled with data as a standard field object "
 ^initfieldobject " prepare field object"
 ^acknowledgemessage "In a server environment, need to have our message acknowledged before continuing"
 ^getuserentityvalue "get entity from user reply on current entity node"
 ^setalocation "Sets the individual properties for a location object"
 ^setlocation "Sets the value for a location entity. Can be an array or a single object"
 ^prepareformappedaction "Set up variables when requested to perform a mapped action"
 ^getmatchposition "find position of the first occurence of the pattern. A position is also at _0"
 ^finishnamedmatch "If we found data, go check it out for acceptability"
 ^findfieldnamedefault "get default val of name, desc for alerts"
 ^findthisname "Given a field concept name, find it somewhere in input, then find matching data"
 ^getfieldkind "Kind is the cs kind to use or the bot tool kind"
 ^findfieldnameininput "Finds a field name given in input and the associated data around it that we want"
 ^showfieldmessage "Display the field prompt. If the field is optional, add information on that to message and allow rejoinder to accept skip"
 ^useorshow "If we have a glean for this, use it. Maybe use some other related glean. Otherwise prompt for data if $$blockuser is false "
 ^findfieldtofill "Find a field that needs filling, according to true/false argument"
 ^fillfieldfromglean "Fill all fields from gleaned data, or mark as empty"
 ^composenestedformresponse "given the current choice, the current field and the current nested value, will create a response object for our nested form identified by with our $xkey value; returns the lastest added value"
 ^filldataforformlink "Find a field that has data available"
 ^hasmandatoryfields "returns if there are any mandatory fields or not"
 ^listfields "get the names of all fields, to show to user"
 ^lastintentfields "check that all required fields for recent intent are filled "
 ~generic_fields "The general field-filling code"
 ~generic_bot "Find out what bot to use"
 ^getactionchoices "Return an array of choices for amending an action"
 ~getconfirmationdata "used by logging in functions.top to access ^getfieldsintojson"
 ~generic_task "Performs setting up and executing a task"
 ^alertfield "write field name and data value to alert JSON object. ^commas - flag to use commas around value "
 ^alertinfo "Gather all available info about an alert"
 ^showfilterglean "When the user is allowed to change filters, this displays all of their current settings"
 ^createfilterpayload "Generate filter payload to send to kore system"
 ^setfrequencyofupdatesdays "Sets days part of frequency of updates"
 ^setfrequencyofupdatesinterval "Sets interval part of frequency of updates"
 ^setfrequencyintervaltype " describes if it is at a particular time or every X hours"
 ^setfrequencyofupdatesintervaltime "Sets interval time part of frequency of updates"
 ^setfrequencyofupdatesintervaltimefrequency "Sets interval time frequency part of frequency of updates"
 ^getintervals "Given an interval type (either 'At' or 'Every'), will return a list of possible values that the user can input"
 ^getalertchoices "Return an array of choices for amending an alert"
 ~generic_alert "General starter for creating alerts"
 ^addinfotoalertfields "add info to alerts fields"
 ~completealert "Confirm alert request"
 ^isalert "return true if we're dealing with an alert, fail if not"
 ^isaction "return true if we're dealing with an action, fail if not"
 ~generic_amend "Amend our alerts & actions"
 ~generic_manage "manage bot notifications of exixting alerts"
 ^findtoneposition " find position of a next tone in direction from the current tone"
 ^processtones "  find adjusters for all basic tones"
 ^scantones "find positions and values for all tones"
 ^tonalyzer " analyze the tone of user input "
 ~dialogmgr_entities "allow for an entity value to be checked via a rejoinder"
 ~preglean "extract bot names for use later"
 ~glean_sentence "looks for words that alter the processing order of phrases and turns them into sentences in a different order"
 ~identify_year "Picks the year from the input"
 ~identify_date "Picks the date from the input"
 ~identify_month "Picks the month from the input"
 ~keywordless "responses that have no obvious keyword topic to come from"
 ~no_task "topic to invoke when we don't know what he wants and we are not in the middle of some task creation"
 ~badaction "Cancels recent presumed task choice that is wrong"
 ~politeness "Marks polite phrases as used up, e.g I want to <task name>"
 ^matchprefixconcept "Given a concept prefix, find the first word marked with a matching concept"
 ~match-concepts "Find the first word marked given a concept prefix"
 ~ack_user "topic to handle user acknowledgement before or after a task"
 $clientname "memorized name of user if they gave it - but in future get it from profile"
 ~introductions "basic startup hellos, how are you"
 $authorization "authorization for user"
 $userid "Kore id of user"
 $taskinfo.fields "field data for current task"
 $xkey "current key being read in"
 $taskinfo.field "current field"
 $nullinputpossibleasskip "turn we potentially will accept null input for optional field"
 $callbackrule "Std CS callback OOB mechanism"
 $callbacktopic "Std CS callback OOB mechanism"
 $callbacktime "Std CS callback OOB mechanism"
 $loopbackrule "Std CS loopback OOB mechanism"
 $loopbacktime "Std CS loopback OOB mechanism"
 $alarmtime "Std CS alarm OOB mechanism"
 $pendingtaskinput "He said something which might have been a request. Keep it until we confirm we should process it as such"
 $originalinput "Memorized sentence in case we want to copy it to \$pendingTaskInput"
 $$new_token "requested change of engine tokenization for next volley"
 ^debugbefore "This memorizes critical data before a :reset command happens, so context can continue after flushing user context"
 ^debugafter "This restores critical data after a :reset command happens, so context can continue even after flushing user context"
 ^kora "This function defines Kora and is executed once for every new user chatting with kora (or via :reset)"
 ~control "main per-sentence control processing"
 ~xprepass "per-sentence preparation adjustments before ~control is called"
 ~xpostprocess "handle results of chat output once after all sentences are finished"
 ~handle_oob "deal with incoming out-of-band messages"
 ~xidioms "handle idioms that have no obvious keywords, to route to appropriate topics"
 ~xquestion "revise analysis of engine as needed for what things are questions and what are statements."
 ^range_function_get_range "will retrive range as: start end units, if no units are provided: start end , null otherwise"
 ^range_function_extract_static_field "will get the static values for the place given"
 ^range_function_extract_relative_field "will get the relative values for the place given"
 ^range_function_extract_relative_field "will get the lone start/end value and units"
 ~range_control_static "looks for range entity with relative boundary first and then for static boundary, then if there is no range, for single start/end value"
 ~range_extract_static_fields "control flow for range"
 ~range_control_relative "control flow for relative range"
 ~range_extract_relative_fields "control flow for range"
 ~range_cheat "this files expose tests for the range entity (for single tests, use cheat range your test sentence)"
